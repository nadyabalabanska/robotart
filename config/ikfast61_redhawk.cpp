/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-01-30 20:39:20.108477
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.33655)*x6);
x13=((0.48417)*x3);
x14=((1.0)*x10);
x15=((1.0)*x7);
x16=((0.33655)*x3);
x17=((0.14105)*x5);
x18=((0.48417)*x0);
x19=((1.0)*x11);
x20=((0.48417)*x6);
x21=((1.0)*x3);
x22=((0.14105)*x2);
x23=((1.0)*x6);
x24=((0.48417)*x5);
x25=((1.0)*x2);
x26=(x1*x2);
x27=(x0*x4);
x28=(x11*x5);
x29=(x4*x6);
x30=(x2*x4);
x31=(x1*x3);
x32=(x3*x4);
x33=(x15*x6);
x34=(x1*x21);
x35=(x25*x27);
x36=(x23*x30);
x37=((((-1.0)*x34))+x30);
x38=((((-1.0)*x21*x4))+(((-1.0)*x1*x25)));
x39=(((x1*x25))+((x21*x4)));
x40=(x11*x37);
x41=((((-1.0)*x35))+((x0*x31)));
x42=((((-1.0)*x36))+((x31*x6)));
x43=(x38*x7);
x44=((((-1.0)*x21*x27))+(((-1.0)*x0*x1*x25)));
x45=((((-1.0)*x21*x29))+(((-1.0)*x23*x26)));
x46=(((x21*x29))+((x23*x26)));
x47=(x41*x5);
x48=(x42*x5);
x49=(x10*x38*x5);
x50=(x11*x44);
x51=(x11*x45);
x52=((((-1.0)*x33))+x47);
x53=(((x0*x7))+x48);
x54=(((x0*x5))+((x7*((x36+(((-1.0)*x34*x6)))))));
x55=(((x23*x5))+((x15*(((((-1.0)*x35))+((x0*x34)))))));
x56=(x10*x52);
eerot[0]=(((x8*(((((-1.0)*x19*x44))+(((-1.0)*x14*x52))))))+((x55*x9)));
eerot[1]=(((x9*((x56+x50))))+((x55*x8)));
eerot[2]=(((x11*(((((-1.0)*x47))+x33))))+((x10*x44)));
eetrans[0]=((((0.4445)*x27))+((x10*((((x18*x26))+((x13*x27))))))+((x7*(((((-1.0)*x22*x27))+(((0.14105)*x0*x31))))))+((x16*x27))+((x17*x6))+(((0.33655)*x0*x26))+(((-0.1016)*x6))+((x11*(((((-1.0)*x20*x7))+((x24*x41)))))));
eerot[3]=(((x54*x9))+((x8*((((x10*x53))+x51)))));
eerot[4]=(((x54*x8))+((x9*(((((-1.0)*x19*x45))+(((-1.0)*x14*x53)))))));
eerot[5]=(((x10*x46))+((x11*x53)));
IkReal x57=((1.0)*x26);
eetrans[1]=((((-1.0)*x12*x32))+((x0*x17))+(((-1.0)*x12*x57))+((x7*((((x22*x29))+(((-0.14105)*x31*x6))))))+((x10*(((((-1.0)*x13*x29))+(((-1.0)*x20*x57))))))+((x11*(((((-1.0)*x18*x7))+(((-1.0)*x24*x42))))))+(((-0.1016)*x0))+(((-0.4445)*x29)));
eerot[6]=(((x43*x9))+((x8*(((((-1.0)*x40))+(((-1.0)*x49)))))));
eerot[7]=(((x9*((x49+x40))))+((x43*x8)));
eerot[8]=(((x10*x37))+((x28*x39)));
eetrans[2]=((0.43421)+((x28*(((((-0.48417)*x26))+(((-1.0)*x13*x4))))))+(((0.4445)*x1))+((x1*x16))+(((-0.33655)*x30))+((x7*(((((-1.0)*x1*x22))+(((-0.14105)*x32))))))+((x10*((((x1*x13))+(((-0.48417)*x30)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-1.0)*px))+(((-0.48417)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((0.48417)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((0.43421)+(((-0.48417)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x58=((1.0)*px);
IkReal x59=((1.0)*pz);
IkReal x60=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x60))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x59)));
rxp0_2=((((-1.0)*r10*x58))+((py*r00)));
rxp1_0=((((-1.0)*r21*x60))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x59)));
rxp1_2=((((-1.0)*r11*x58))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x60)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x59)));
rxp2_2=((((-1.0)*r12*x58))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x61=((0.29919295)*npz);
IkReal x62=((0.4445)*pp);
IkReal x63=((0.12539345)*npy);
IkReal x64=((0.14105)*r20);
IkReal x65=((0.1016)*r02);
IkReal x66=((1.0)*rxp2_2);
IkReal x67=((0.2821)*r21);
IkReal x68=((1.1967718)*npy);
IkReal x69=((0.5983859)*npx);
IkReal x70=((0.2032)*r00);
IkReal x71=((2.0)*rxp0_2);
IkReal x72=((0.2821)*r22);
IkReal x73=((0.2032)*r10);
IkReal x74=((0.4064)*r01);
IkReal x75=((4.0)*rxp1_2);
IkReal x76=((0.1016)*r12);
IkReal x77=((-0.2507869)*npx);
IkReal x78=((-0.1016)*r12);
IkReal x79=((-0.5983859)*npx);
IkReal x80=((-0.4064)*r11);
IkReal x81=((-0.2032)*r10);
IkReal x82=((-0.2821)*r21);
IkReal x83=((-0.0332227323225)+x62);
IkReal x84=(x64+x65);
IkReal x85=(x71+x70);
IkReal x86=(x63+x83);
IkReal x87=(x61+x83+(((-1.0)*x63)));
IkReal x88=(x83+(((-1.0)*x63))+(((-1.0)*x61)));
IkReal x89=(x86+(((-1.0)*x61)));
IkReal x90=(x61+x86);
op[0]=x87;
op[1]=x87;
op[2]=x77;
op[3]=x77;
op[4]=x90;
op[5]=x90;
op[6]=((((-1.0)*x66))+(((-1.0)*x84)));
op[7]=x78;
op[8]=x67;
op[9]=0;
op[10]=(x64+(((-1.0)*x66))+(((-1.0)*x65)));
op[11]=x78;
op[12]=x78;
op[13]=(x65+(((-1.0)*x66))+(((-1.0)*x64)));
op[14]=0;
op[15]=x67;
op[16]=x78;
op[17]=(x84+(((-1.0)*x66)));
op[18]=0;
op[19]=x87;
op[20]=0;
op[21]=x77;
op[22]=0;
op[23]=x90;
op[24]=x79;
op[25]=x79;
op[26]=x68;
op[27]=x68;
op[28]=x69;
op[29]=x69;
op[30]=((((-1.0)*x72))+x85);
op[31]=x73;
op[32]=((((-1.0)*x74))+(((-1.0)*x75)));
op[33]=x80;
op[34]=((((-1.0)*x72))+(((-1.0)*x85)));
op[35]=x81;
op[36]=x73;
op[37]=((((-1.0)*x72))+(((-1.0)*x70))+x71);
op[38]=x80;
op[39]=((((-1.0)*x75))+x74);
op[40]=x81;
op[41]=((((-1.0)*x71))+(((-1.0)*x72))+x70);
op[42]=0;
op[43]=x79;
op[44]=0;
op[45]=x68;
op[46]=0;
op[47]=x69;
op[48]=x88;
op[49]=x88;
op[50]=x77;
op[51]=x77;
op[52]=x89;
op[53]=x89;
op[54]=(rxp2_2+x84);
op[55]=x76;
op[56]=x82;
op[57]=0;
op[58]=(rxp2_2+x65+(((-1.0)*x64)));
op[59]=x76;
op[60]=x76;
op[61]=(rxp2_2+x64+(((-1.0)*x65)));
op[62]=0;
op[63]=x82;
op[64]=x76;
op[65]=(rxp2_2+(((-1.0)*x84)));
op[66]=0;
op[67]=x88;
op[68]=0;
op[69]=x77;
op[70]=0;
op[71]=x89;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x91=htj4*htj4;
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+x91),-1);
if(!x92.valid){
continue;
}
cj4array[numsolutions]=((x92.value)*(((1.0)+(((-1.0)*x91)))));
CheckValue<IkReal> x93=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x93.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x93.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x94=htj5*htj5;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj5array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x96.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x96.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x97=htj0*htj0;
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+x97),-1);
if(!x98.valid){
continue;
}
cj0array[numsolutions]=((x98.value)*(((1.0)+(((-1.0)*x97)))));
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x99.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x99.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x100=((1.0)*cj0);
IkReal x101=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x101;
j3eval[1]=IKsign(x101);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x100))+(((-1.0)*r20*sj5*x100)))))+(IKabs((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x100))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x102=((1.0)*sj5);
IkReal x103=(r20*sj0);
IkReal x104=((1.0)*r21*sj0);
IkReal x105=((((-1.0)*r11*sj4*x102))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x105;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*sj0*x102))+((r22*sj0*sj4))+((cj4*cj5*x103)))))+(IKabs(((((-1.0)*cj5*x104))+(((-1.0)*x102*x103))))));
j3eval[2]=IKsign(x105);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x106=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x106;
j3eval[1]=IKsign(x106);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x107=((1.0)*cj5);
IkReal x108=((1.0)*sj5);
IkReal x109=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x107))+((cj4*r22)));
j3eval[0]=x109;
j3eval[1]=((IKabs(((((-1.0)*r01*x107))+(((-1.0)*r00*x108)))))+(IKabs(((((-1.0)*cj4*r01*x108))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x109);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x110=((1.0)*sj5);
IkReal x111=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x110)));
j3eval[0]=x111;
j3eval[1]=((IKabs(((((-1.0)*r20*x110))+(((-1.0)*cj5*r21)))))+(IKabs(((((-1.0)*cj4*r21*x110))+((r22*sj4))+((cj4*cj5*r20))))));
j3eval[2]=IKsign(x111);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x112=cj4*cj4;
IkReal x113=cj5*cj5;
IkReal x114=r10*r10;
IkReal x115=r11*r11;
IkReal x116=r12*r12;
IkReal x117=(r11*sj5);
IkReal x118=((1.0)*r10);
IkReal x119=(r12*sj4);
IkReal x120=((1.0)*x114);
IkReal x121=((2.0)*cj5*r10);
IkReal x122=(x113*x115);
IkReal x123=(((x112*x122))+((x112*x116))+(((2.0)*cj4*x117*x119))+(((-1.0)*cj4*x119*x121))+((x113*x114))+(((-1.0)*x117*x121))+(((-1.0)*x120))+((x112*x117*x121))+(((-1.0)*x112*x115))+(((-1.0)*x122))+(((-1.0)*x116))+(((-1.0)*x112*x113*x120)));
j3eval[0]=x123;
j3eval[1]=IKsign(x123);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*x118))+((cj4*x117))+(((-1.0)*x119)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x118))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x124=cj4*cj4;
IkReal x125=cj5*cj5;
IkReal x126=r10*r10;
IkReal x127=r11*r11;
IkReal x128=r12*r12;
IkReal x129=(r11*sj5);
IkReal x130=((1.0)*cj5);
IkReal x131=(r12*sj4);
IkReal x132=((1.0)*x126);
IkReal x133=((2.0)*cj5*r10);
IkReal x134=(x125*x127);
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x130))+(((-1.0)*x131))+((cj4*x129)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
CheckValue<IkReal> x136=IKPowWithIntegerCheck(IKsign(((((2.0)*cj4*x129*x131))+((x124*x129*x133))+(((-1.0)*x124*x127))+(((-1.0)*cj4*x131*x133))+(((-1.0)*x124*x125*x132))+((x125*x126))+(((-1.0)*x132))+((x124*x134))+((x124*x128))+(((-1.0)*x134))+(((-1.0)*x129*x133))+(((-1.0)*x128)))),-1);
if(!x136.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x135.value)+(((1.5707963267949)*(x136.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x137=IKsin(j3);
IkReal x138=IKcos(j3);
IkReal x139=(r10*sj5);
IkReal x140=(cj4*sj5);
IkReal x141=(cj5*r11);
IkReal x142=(cj4*cj5);
IkReal x143=(r12*sj4);
IkReal x144=((1.0)*x138);
IkReal x145=((1.0)*x137);
evalcond[0]=((((-1.0)*x143*x144))+((x137*x141))+(((-1.0)*r10*x142*x144))+((x137*x139))+((r11*x138*x140)));
evalcond[1]=((((-1.0)*r22*sj4*x145))+(((-1.0)*r20*sj5*x144))+(((-1.0)*r20*x142*x145))+(((-1.0)*cj5*r21*x144))+((r21*x137*x140)));
evalcond[2]=((((-1.0)*r02*sj4*x145))+(((-1.0)*cj5*r01*x144))+(((-1.0)*r00*sj5*x144))+(((-1.0)*r00*x142*x145))+((r01*x137*x140)));
evalcond[3]=((1.0)+(((-1.0)*x143*x145))+(((-1.0)*r10*x142*x145))+(((-1.0)*x139*x144))+(((-1.0)*x141*x144))+((r11*x137*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x146=((0.757142857142857)*sj4);
IkReal x147=((0.757142857142857)*cj4);
IkReal x148=((0.317322834645669)*cj5);
IkReal x149=((0.317322834645669)*sj5);
if( IKabs((((r01*x148))+(((-1.0)*r01*sj5*x146))+((r00*x149))+(((-1.0)*r02*x147))+((cj5*r00*x146))+(((-2.24971878515186)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj5*x146))+((r20*x149))+((cj5*r20*x146))+((r21*x148))+(((-1.0)*r22*x147))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x148))+(((-1.0)*r01*sj5*x146))+((r00*x149))+(((-1.0)*r02*x147))+((cj5*r00*x146))+(((-2.24971878515186)*px))))+IKsqr(((((-1.0)*r21*sj5*x146))+((r20*x149))+((cj5*r20*x146))+((r21*x148))+(((-1.0)*r22*x147))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x148))+(((-1.0)*r01*sj5*x146))+((r00*x149))+(((-1.0)*r02*x147))+((cj5*r00*x146))+(((-2.24971878515186)*px))), ((((-1.0)*r21*sj5*x146))+((r20*x149))+((cj5*r20*x146))+((r21*x148))+(((-1.0)*r22*x147))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x150=((0.14105)*cj5);
IkReal x151=((0.33655)*sj4);
IkReal x152=(r01*sj5);
IkReal x153=(cj5*r20);
IkReal x154=(cj5*r00);
IkReal x155=((0.14105)*sj5);
IkReal x156=((0.33655)*sj3);
IkReal x157=(r21*sj5);
IkReal x158=((0.33655)*cj4);
IkReal x159=((0.4445)*(IKsin(j1)));
IkReal x160=(r00*x155);
IkReal x161=(r01*x150);
IkReal x162=((0.4445)*(IKcos(j1)));
IkReal x163=(r21*x150);
IkReal x164=(r20*x155);
IkReal x165=(cj3*x158);
IkReal x166=(x159+px);
IkReal x167=(x163+x164);
IkReal x168=(x160+x161);
evalcond[0]=((((-1.0)*x168))+(((-1.0)*x151*x154))+((x151*x152))+x166+((r02*x158)));
evalcond[1]=((((-1.0)*x162))+(((-1.0)*x151*x157))+((x151*x153))+x167+(((-1.0)*pz))+(((-1.0)*r22*x158)));
evalcond[2]=(((x157*x165))+(((-1.0)*x168))+((cj5*r21*x156))+x166+((r20*sj5*x156))+(((-1.0)*cj3*r22*x151))+(((-1.0)*x153*x165)));
evalcond[3]=((((-1.0)*x167))+(((-1.0)*x152*x165))+x162+((cj3*r02*x151))+((x154*x165))+pz+(((-1.0)*cj5*r01*x156))+(((-1.0)*r00*sj5*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x169=(cj4*sj1);
IkReal x170=(cj1*sj4);
IkReal x171=((1.0)*cj5);
IkReal x172=(r21*sj5);
IkReal x173=(cj1*cj4);
IkReal x174=(sj1*sj4);
IkReal x175=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r00*x170*x171))+(((-1.0)*r22*x169))+((cj5*r20*x174))+(((-1.0)*x172*x174))+((r01*sj5*x170))+((r02*x173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x173))+((x170*x172))+(((-1.0)*r20*x170*x171))+(((-1.0)*r00*x171*x174))+((r02*x169))+((r01*sj5*x174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x170*x171))+(((-1.0)*r22*x169))+((cj5*r20*x174))+(((-1.0)*x172*x174))+((r01*sj5*x170))+((r02*x173))))+IKsqr((((r22*x173))+((x170*x172))+(((-1.0)*r20*x170*x171))+(((-1.0)*r00*x171*x174))+((r02*x169))+((r01*sj5*x174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x170*x171))+(((-1.0)*r22*x169))+((cj5*r20*x174))+(((-1.0)*x172*x174))+((r01*sj5*x170))+((r02*x173))), (((r22*x173))+((x170*x172))+(((-1.0)*r20*x170*x171))+(((-1.0)*r00*x171*x174))+((r02*x169))+((r01*sj5*x174))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x176=IKcos(j2);
IkReal x177=IKsin(j2);
IkReal x178=(cj5*r01);
IkReal x179=((1.0)*cj3);
IkReal x180=(cj5*r00);
IkReal x181=((0.33655)*sj1);
IkReal x182=((1.0)*sj1);
IkReal x183=(cj5*r21);
IkReal x184=(r00*sj5);
IkReal x185=(cj5*r20);
IkReal x186=((1.0)*cj4);
IkReal x187=(r20*sj5);
IkReal x188=(cj1*x176);
IkReal x189=(cj3*cj4*sj5);
IkReal x190=((1.0)*sj4*sj5);
IkReal x191=(cj1*x177);
IkReal x192=(x177*x182);
evalcond[0]=(((sj1*x176))+(((-1.0)*r01*x190))+(((-1.0)*r02*x186))+x191+((sj4*x180)));
evalcond[1]=((((-1.0)*r22*x186))+(((-1.0)*x192))+x188+((sj4*x185))+(((-1.0)*r21*x190)));
evalcond[2]=(((x177*x181))+(((0.14105)*x187))+(((0.14105)*x183))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x188)));
evalcond[3]=((((-0.4445)*sj1))+(((0.14105)*x178))+(((0.14105)*x184))+(((-1.0)*x176*x181))+(((-1.0)*px))+(((-0.33655)*x191)));
evalcond[4]=((((-1.0)*cj4*x179*x180))+((sj3*x184))+((r01*x189))+(((-1.0)*x192))+(((-1.0)*r02*sj4*x179))+x188+((sj3*x178)));
evalcond[5]=((((-1.0)*cj4*x179*x185))+((sj3*x187))+((sj3*x183))+(((-1.0)*x191))+(((-1.0)*x176*x182))+((r21*x189))+(((-1.0)*r22*sj4*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x193=((1.0)*sj5);
CheckValue<IkReal> x194=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x193)))),-1);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x193)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x193))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x194.value)))+(x195.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x196=IKsin(j3);
IkReal x197=IKcos(j3);
IkReal x198=(r10*sj5);
IkReal x199=(cj4*sj5);
IkReal x200=(cj5*r11);
IkReal x201=(cj4*cj5);
IkReal x202=(r12*sj4);
IkReal x203=((1.0)*x197);
IkReal x204=((1.0)*x196);
evalcond[0]=(((x196*x200))+(((-1.0)*x202*x203))+((x196*x198))+((r11*x197*x199))+(((-1.0)*r10*x201*x203)));
evalcond[1]=(((r21*x196*x199))+(((-1.0)*r20*x201*x204))+(((-1.0)*r20*sj5*x203))+(((-1.0)*cj5*r21*x203))+(((-1.0)*r22*sj4*x204)));
evalcond[2]=((((-1.0)*cj5*r01*x203))+((r01*x196*x199))+(((-1.0)*r00*x201*x204))+(((-1.0)*r00*sj5*x203))+(((-1.0)*r02*sj4*x204)));
evalcond[3]=((1.0)+(((-1.0)*x200*x203))+(((-1.0)*x202*x204))+(((-1.0)*x198*x203))+(((-1.0)*r10*x201*x204))+((r11*x196*x199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x205=((0.757142857142857)*sj4);
IkReal x206=((0.757142857142857)*cj4);
IkReal x207=((0.317322834645669)*cj5);
IkReal x208=((0.317322834645669)*sj5);
if( IKabs((((cj5*r00*x205))+(((-1.0)*r02*x206))+((r01*x207))+((r00*x208))+(((-2.24971878515186)*px))+(((-1.0)*r01*sj5*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x206))+(((-1.0)*r21*sj5*x205))+((cj5*r20*x205))+((r20*x208))+((r21*x207))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*x205))+(((-1.0)*r02*x206))+((r01*x207))+((r00*x208))+(((-2.24971878515186)*px))+(((-1.0)*r01*sj5*x205))))+IKsqr(((((-1.0)*r22*x206))+(((-1.0)*r21*sj5*x205))+((cj5*r20*x205))+((r20*x208))+((r21*x207))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r00*x205))+(((-1.0)*r02*x206))+((r01*x207))+((r00*x208))+(((-2.24971878515186)*px))+(((-1.0)*r01*sj5*x205))), ((((-1.0)*r22*x206))+(((-1.0)*r21*sj5*x205))+((cj5*r20*x205))+((r20*x208))+((r21*x207))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x209=((0.14105)*cj5);
IkReal x210=((0.33655)*sj4);
IkReal x211=(r01*sj5);
IkReal x212=(cj5*r20);
IkReal x213=(cj5*r00);
IkReal x214=((0.14105)*sj5);
IkReal x215=((0.33655)*sj3);
IkReal x216=(r21*sj5);
IkReal x217=((0.33655)*cj4);
IkReal x218=((0.4445)*(IKsin(j1)));
IkReal x219=(r00*x214);
IkReal x220=(r01*x209);
IkReal x221=((0.4445)*(IKcos(j1)));
IkReal x222=(r21*x209);
IkReal x223=(r20*x214);
IkReal x224=(cj3*x217);
IkReal x225=(x218+px);
IkReal x226=(x223+x222);
IkReal x227=(x219+x220);
evalcond[0]=(((x210*x211))+x225+(((-1.0)*x210*x213))+((r02*x217))+(((-1.0)*x227)));
evalcond[1]=(((x210*x212))+(((-1.0)*r22*x217))+(((-1.0)*pz))+x226+(((-1.0)*x210*x216))+(((-1.0)*x221)));
evalcond[2]=(((r20*sj5*x215))+(((-1.0)*cj3*r22*x210))+((x216*x224))+x225+(((-1.0)*x212*x224))+((cj5*r21*x215))+(((-1.0)*x227)));
evalcond[3]=((((-1.0)*r00*sj5*x215))+(((-1.0)*cj5*r01*x215))+((x213*x224))+((cj3*r02*x210))+x221+pz+(((-1.0)*x211*x224))+(((-1.0)*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x228=(cj4*sj1);
IkReal x229=(cj1*sj4);
IkReal x230=((1.0)*cj5);
IkReal x231=(r21*sj5);
IkReal x232=(cj1*cj4);
IkReal x233=(sj1*sj4);
IkReal x234=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x228))+((r02*x232))+((cj5*r20*x233))+((r01*sj5*x229))+(((-1.0)*r00*x229*x230))+(((-1.0)*x231*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x229*x231))+(((-1.0)*r00*x230*x233))+(((-1.0)*r20*x229*x230))+((r02*x228))+((r01*sj5*x233))+((r22*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x228))+((r02*x232))+((cj5*r20*x233))+((r01*sj5*x229))+(((-1.0)*r00*x229*x230))+(((-1.0)*x231*x233))))+IKsqr((((x229*x231))+(((-1.0)*r00*x230*x233))+(((-1.0)*r20*x229*x230))+((r02*x228))+((r01*sj5*x233))+((r22*x232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x228))+((r02*x232))+((cj5*r20*x233))+((r01*sj5*x229))+(((-1.0)*r00*x229*x230))+(((-1.0)*x231*x233))), (((x229*x231))+(((-1.0)*r00*x230*x233))+(((-1.0)*r20*x229*x230))+((r02*x228))+((r01*sj5*x233))+((r22*x232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x235=IKcos(j2);
IkReal x236=IKsin(j2);
IkReal x237=(cj5*r01);
IkReal x238=((1.0)*cj3);
IkReal x239=(cj5*r00);
IkReal x240=((0.33655)*sj1);
IkReal x241=((1.0)*sj1);
IkReal x242=(cj5*r21);
IkReal x243=(r00*sj5);
IkReal x244=(cj5*r20);
IkReal x245=((1.0)*cj4);
IkReal x246=(r20*sj5);
IkReal x247=(cj1*x235);
IkReal x248=(cj3*cj4*sj5);
IkReal x249=((1.0)*sj4*sj5);
IkReal x250=(cj1*x236);
IkReal x251=(x236*x241);
evalcond[0]=(((sj1*x235))+(((-1.0)*r01*x249))+x250+((sj4*x239))+(((-1.0)*r02*x245)));
evalcond[1]=(x247+(((-1.0)*r22*x245))+((sj4*x244))+(((-1.0)*r21*x249))+(((-1.0)*x251)));
evalcond[2]=(((x236*x240))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x246))+(((0.14105)*x242))+(((-0.33655)*x247)));
evalcond[3]=((((-0.4445)*sj1))+(((0.14105)*x237))+(((-1.0)*px))+(((-1.0)*x235*x240))+(((0.14105)*x243))+(((-0.33655)*x250)));
evalcond[4]=(((sj3*x243))+x247+((r01*x248))+(((-1.0)*cj4*x238*x239))+(((-1.0)*r02*sj4*x238))+(((-1.0)*x251))+((sj3*x237)));
evalcond[5]=((((-1.0)*cj4*x238*x244))+((sj3*x246))+((sj3*x242))+((r21*x248))+(((-1.0)*x235*x241))+(((-1.0)*r22*sj4*x238))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x252=((1.0)*r01);
CheckValue<IkReal> x253=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x253.valid){
continue;
}
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x252))+(((-1.0)*r00*sj5)))),IkReal((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x253.value)))+(x254.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x255=IKsin(j3);
IkReal x256=IKcos(j3);
IkReal x257=(r10*sj5);
IkReal x258=(cj4*sj5);
IkReal x259=(cj5*r11);
IkReal x260=(cj4*cj5);
IkReal x261=(r12*sj4);
IkReal x262=((1.0)*x256);
IkReal x263=((1.0)*x255);
evalcond[0]=((((-1.0)*r10*x260*x262))+(((-1.0)*x261*x262))+((x255*x257))+((x255*x259))+((r11*x256*x258)));
evalcond[1]=(((r21*x255*x258))+(((-1.0)*r20*x260*x263))+(((-1.0)*cj5*r21*x262))+(((-1.0)*r22*sj4*x263))+(((-1.0)*r20*sj5*x262)));
evalcond[2]=((((-1.0)*r02*sj4*x263))+(((-1.0)*r00*sj5*x262))+(((-1.0)*cj5*r01*x262))+(((-1.0)*r00*x260*x263))+((r01*x255*x258)));
evalcond[3]=((1.0)+(((-1.0)*r10*x260*x263))+(((-1.0)*x259*x262))+(((-1.0)*x261*x263))+((r11*x255*x258))+(((-1.0)*x257*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x264=((0.757142857142857)*sj4);
IkReal x265=((0.757142857142857)*cj4);
IkReal x266=((0.317322834645669)*cj5);
IkReal x267=((0.317322834645669)*sj5);
if( IKabs((((cj5*r00*x264))+(((-1.0)*r01*sj5*x264))+(((-1.0)*r02*x265))+((r00*x267))+((r01*x266))+(((-2.24971878515186)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20*x264))+((r21*x266))+(((-1.0)*r21*sj5*x264))+(((-1.0)*r22*x265))+(((-2.24971878515186)*pz))+((r20*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*x264))+(((-1.0)*r01*sj5*x264))+(((-1.0)*r02*x265))+((r00*x267))+((r01*x266))+(((-2.24971878515186)*px))))+IKsqr((((cj5*r20*x264))+((r21*x266))+(((-1.0)*r21*sj5*x264))+(((-1.0)*r22*x265))+(((-2.24971878515186)*pz))+((r20*x267))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r00*x264))+(((-1.0)*r01*sj5*x264))+(((-1.0)*r02*x265))+((r00*x267))+((r01*x266))+(((-2.24971878515186)*px))), (((cj5*r20*x264))+((r21*x266))+(((-1.0)*r21*sj5*x264))+(((-1.0)*r22*x265))+(((-2.24971878515186)*pz))+((r20*x267))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x268=((0.14105)*cj5);
IkReal x269=((0.33655)*sj4);
IkReal x270=(r01*sj5);
IkReal x271=(cj5*r20);
IkReal x272=(cj5*r00);
IkReal x273=((0.14105)*sj5);
IkReal x274=((0.33655)*sj3);
IkReal x275=(r21*sj5);
IkReal x276=((0.33655)*cj4);
IkReal x277=((0.4445)*(IKsin(j1)));
IkReal x278=(r00*x273);
IkReal x279=(r01*x268);
IkReal x280=((0.4445)*(IKcos(j1)));
IkReal x281=(r21*x268);
IkReal x282=(r20*x273);
IkReal x283=(cj3*x276);
IkReal x284=(x277+px);
IkReal x285=(x282+x281);
IkReal x286=(x278+x279);
evalcond[0]=(((r02*x276))+(((-1.0)*x269*x272))+x284+(((-1.0)*x286))+((x269*x270)));
evalcond[1]=((((-1.0)*x269*x275))+(((-1.0)*pz))+x285+(((-1.0)*r22*x276))+(((-1.0)*x280))+((x269*x271)));
evalcond[2]=(((r20*sj5*x274))+(((-1.0)*cj3*r22*x269))+x284+((x275*x283))+(((-1.0)*x271*x283))+((cj5*r21*x274))+(((-1.0)*x286)));
evalcond[3]=((((-1.0)*x270*x283))+(((-1.0)*r00*sj5*x274))+((cj3*r02*x269))+(((-1.0)*cj5*r01*x274))+x280+((x272*x283))+pz+(((-1.0)*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x287=(cj4*sj1);
IkReal x288=(cj1*sj4);
IkReal x289=((1.0)*cj5);
IkReal x290=(r21*sj5);
IkReal x291=(cj1*cj4);
IkReal x292=(sj1*sj4);
IkReal x293=(r01*sj4*sj5);
if( IKabs((((cj5*r20*x292))+(((-1.0)*x290*x292))+(((-1.0)*r00*x288*x289))+(((-1.0)*r22*x287))+((r01*sj5*x288))+((r02*x291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x292))+((r02*x287))+(((-1.0)*r20*x288*x289))+((r22*x291))+((x288*x290))+(((-1.0)*r00*x289*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*x292))+(((-1.0)*x290*x292))+(((-1.0)*r00*x288*x289))+(((-1.0)*r22*x287))+((r01*sj5*x288))+((r02*x291))))+IKsqr((((r01*sj5*x292))+((r02*x287))+(((-1.0)*r20*x288*x289))+((r22*x291))+((x288*x290))+(((-1.0)*r00*x289*x292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*x292))+(((-1.0)*x290*x292))+(((-1.0)*r00*x288*x289))+(((-1.0)*r22*x287))+((r01*sj5*x288))+((r02*x291))), (((r01*sj5*x292))+((r02*x287))+(((-1.0)*r20*x288*x289))+((r22*x291))+((x288*x290))+(((-1.0)*r00*x289*x292))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x294=IKcos(j2);
IkReal x295=IKsin(j2);
IkReal x296=(cj5*r01);
IkReal x297=((1.0)*cj3);
IkReal x298=(cj5*r00);
IkReal x299=((0.33655)*sj1);
IkReal x300=((1.0)*sj1);
IkReal x301=(cj5*r21);
IkReal x302=(r00*sj5);
IkReal x303=(cj5*r20);
IkReal x304=((1.0)*cj4);
IkReal x305=(r20*sj5);
IkReal x306=(cj1*x294);
IkReal x307=(cj3*cj4*sj5);
IkReal x308=((1.0)*sj4*sj5);
IkReal x309=(cj1*x295);
IkReal x310=(x295*x300);
evalcond[0]=((((-1.0)*r01*x308))+((sj1*x294))+((sj4*x298))+(((-1.0)*r02*x304))+x309);
evalcond[1]=((((-1.0)*r22*x304))+(((-1.0)*r21*x308))+x306+(((-1.0)*x310))+((sj4*x303)));
evalcond[2]=((((-0.33655)*x306))+(((0.14105)*x305))+(((0.14105)*x301))+(((-1.0)*pz))+((x295*x299))+(((-0.4445)*cj1)));
evalcond[3]=((((-0.4445)*sj1))+(((-0.33655)*x309))+(((0.14105)*x302))+(((0.14105)*x296))+(((-1.0)*px))+(((-1.0)*x294*x299)));
evalcond[4]=((((-1.0)*cj4*x297*x298))+((sj3*x302))+x306+(((-1.0)*x310))+(((-1.0)*r02*sj4*x297))+((r01*x307))+((sj3*x296)));
evalcond[5]=((((-1.0)*cj4*x297*x303))+(((-1.0)*r22*sj4*x297))+((r21*x307))+((sj3*x305))+((sj3*x301))+(((-1.0)*x294*x300))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x311=((1.0)*sj5);
IkReal x312=((1.0)*cj5);
IkReal x313=((((-1.0)*r00*sj4*x312))+((r01*sj4*sj5))+((cj4*r02)));
j3eval[0]=x313;
j3eval[1]=IKsign(x313);
j3eval[2]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x311)))))+(IKabs(((((-1.0)*r21*x312))+(((-1.0)*r20*x311))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x314=((1.0)*r01);
IkReal x315=((1.0)*sj5);
IkReal x316=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x315)));
j3eval[0]=x316;
j3eval[1]=((IKabs(((((-1.0)*r00*x315))+(((-1.0)*cj5*x314)))))+(IKabs(((((-1.0)*cj4*sj5*x314))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x316);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x317=cj4*cj4;
IkReal x318=r10*r10;
IkReal x319=cj5*cj5;
IkReal x320=r11*r11;
IkReal x321=r12*r12;
IkReal x322=(r11*sj5);
IkReal x323=((1.0)*r10);
IkReal x324=(r12*sj4);
IkReal x325=((1.0)*x317);
IkReal x326=((2.0)*cj5*r10);
IkReal x327=(x319*x320);
IkReal x328=(x318*x319);
IkReal x329=(((x322*x326))+(((-1.0)*x321*x325))+(((-1.0)*x325*x327))+(((-1.0)*x328))+((cj4*x324*x326))+x327+x321+x318+((x317*x328))+((x317*x320))+(((-2.0)*cj4*x322*x324))+(((-1.0)*x317*x322*x326)));
j3eval[0]=x329;
j3eval[1]=IKsign(x329);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*x323))+(((-1.0)*x324))+((cj4*x322)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x323))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x330=cj4*cj4;
IkReal x331=r10*r10;
IkReal x332=cj5*cj5;
IkReal x333=r11*r11;
IkReal x334=r12*r12;
IkReal x335=(r11*sj5);
IkReal x336=((1.0)*cj5);
IkReal x337=(r12*sj4);
IkReal x338=((1.0)*x330);
IkReal x339=((2.0)*cj5*r10);
IkReal x340=(x332*x333);
IkReal x341=(x331*x332);
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal(((((-1.0)*x337))+((cj4*x335))+(((-1.0)*cj4*r10*x336)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
CheckValue<IkReal> x343=IKPowWithIntegerCheck(IKsign((((x335*x339))+(((-1.0)*x330*x335*x339))+((x330*x333))+(((-2.0)*cj4*x335*x337))+((cj4*x337*x339))+x331+x334+x340+(((-1.0)*x338*x340))+((x330*x341))+(((-1.0)*x334*x338))+(((-1.0)*x341)))),-1);
if(!x343.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x342.value)+(((1.5707963267949)*(x343.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x344=IKsin(j3);
IkReal x345=IKcos(j3);
IkReal x346=(r10*sj5);
IkReal x347=(cj4*sj5);
IkReal x348=(cj5*r11);
IkReal x349=(cj4*cj5);
IkReal x350=(r12*sj4);
IkReal x351=((1.0)*x345);
IkReal x352=((1.0)*x344);
evalcond[0]=((((-1.0)*r10*x349*x351))+((x344*x348))+((x344*x346))+((r11*x345*x347))+(((-1.0)*x350*x351)));
evalcond[1]=((((-1.0)*cj5*r21*x351))+(((-1.0)*r20*x349*x352))+(((-1.0)*r20*sj5*x351))+(((-1.0)*r22*sj4*x352))+((r21*x344*x347)));
evalcond[2]=((((-1.0)*r02*sj4*x352))+((r01*x344*x347))+(((-1.0)*r00*x349*x352))+(((-1.0)*r00*sj5*x351))+(((-1.0)*cj5*r01*x351)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x349*x352))+(((-1.0)*x348*x351))+(((-1.0)*x346*x351))+((r11*x344*x347))+(((-1.0)*x350*x352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x353=((0.757142857142857)*sj4);
IkReal x354=((0.317322834645669)*sj5);
IkReal x355=((0.317322834645669)*cj5);
IkReal x356=((0.757142857142857)*cj4);
if( IKabs(((((2.24971878515186)*px))+(((-1.0)*r01*x355))+(((-1.0)*r00*x354))+((r01*sj5*x353))+(((-1.0)*cj5*r00*x353))+((r02*x356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x356))+((r21*x355))+(((-1.0)*r21*sj5*x353))+((cj5*r20*x353))+(((-2.24971878515186)*pz))+((r20*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*px))+(((-1.0)*r01*x355))+(((-1.0)*r00*x354))+((r01*sj5*x353))+(((-1.0)*cj5*r00*x353))+((r02*x356))))+IKsqr(((((-1.0)*r22*x356))+((r21*x355))+(((-1.0)*r21*sj5*x353))+((cj5*r20*x353))+(((-2.24971878515186)*pz))+((r20*x354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*px))+(((-1.0)*r01*x355))+(((-1.0)*r00*x354))+((r01*sj5*x353))+(((-1.0)*cj5*r00*x353))+((r02*x356))), ((((-1.0)*r22*x356))+((r21*x355))+(((-1.0)*r21*sj5*x353))+((cj5*r20*x353))+(((-2.24971878515186)*pz))+((r20*x354))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x357=((1.0)*pz);
IkReal x358=((0.14105)*cj5);
IkReal x359=((0.33655)*sj4);
IkReal x360=(r01*sj5);
IkReal x361=(cj5*r20);
IkReal x362=(cj5*r00);
IkReal x363=((0.14105)*sj5);
IkReal x364=((0.33655)*sj3);
IkReal x365=(r21*sj5);
IkReal x366=((0.33655)*cj4);
IkReal x367=(r00*x363);
IkReal x368=((0.4445)*(IKsin(j1)));
IkReal x369=(r01*x358);
IkReal x370=(r21*x358);
IkReal x371=(r20*x363);
IkReal x372=((0.4445)*(IKcos(j1)));
IkReal x373=(cj3*x366);
IkReal x374=(x357+x372);
IkReal x375=(x371+x370);
IkReal x376=(x368+x369+x367);
evalcond[0]=((((-1.0)*r02*x366))+((x359*x362))+x376+(((-1.0)*px))+(((-1.0)*x359*x360)));
evalcond[1]=((((-1.0)*x374))+((x359*x361))+x375+(((-1.0)*x359*x365))+(((-1.0)*r22*x366)));
evalcond[2]=((((-1.0)*x376))+((cj3*r22*x359))+px+(((-1.0)*cj5*r21*x364))+(((-1.0)*r20*sj5*x364))+((x361*x373))+(((-1.0)*x365*x373)));
evalcond[3]=((((-1.0)*r00*sj5*x364))+(((-1.0)*x360*x373))+(((-1.0)*x374))+x375+(((-1.0)*cj5*r01*x364))+((cj3*r02*x359))+((x362*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x377=((1.0)*r01);
IkReal x378=(sj1*sj4);
IkReal x379=(cj5*r00);
IkReal x380=(cj1*cj4);
IkReal x381=(cj5*r20);
IkReal x382=(cj1*sj4);
IkReal x383=(sj5*x382);
IkReal x384=((1.0)*cj4*sj1);
if( IKabs((((x378*x381))+(((-1.0)*r21*sj5*x378))+(((-1.0)*r22*x384))+(((-1.0)*r02*x380))+((x379*x382))+(((-1.0)*x377*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x380))+(((-1.0)*sj5*x377*x378))+((r21*x383))+((x378*x379))+(((-1.0)*r02*x384))+(((-1.0)*x381*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x378*x381))+(((-1.0)*r21*sj5*x378))+(((-1.0)*r22*x384))+(((-1.0)*r02*x380))+((x379*x382))+(((-1.0)*x377*x383))))+IKsqr((((r22*x380))+(((-1.0)*sj5*x377*x378))+((r21*x383))+((x378*x379))+(((-1.0)*r02*x384))+(((-1.0)*x381*x382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x378*x381))+(((-1.0)*r21*sj5*x378))+(((-1.0)*r22*x384))+(((-1.0)*r02*x380))+((x379*x382))+(((-1.0)*x377*x383))), (((r22*x380))+(((-1.0)*sj5*x377*x378))+((r21*x383))+((x378*x379))+(((-1.0)*r02*x384))+(((-1.0)*x381*x382))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x385=IKcos(j2);
IkReal x386=IKsin(j2);
IkReal x387=(cj5*r01);
IkReal x388=((1.0)*cj3);
IkReal x389=(cj5*r00);
IkReal x390=((0.33655)*sj1);
IkReal x391=((1.0)*sj1);
IkReal x392=(cj5*r21);
IkReal x393=(r00*sj5);
IkReal x394=(cj5*r20);
IkReal x395=((1.0)*cj4);
IkReal x396=(r20*sj5);
IkReal x397=(cj1*x385);
IkReal x398=(cj3*cj4*sj5);
IkReal x399=((1.0)*sj4*sj5);
IkReal x400=(cj1*x386);
IkReal x401=(x385*x391);
IkReal x402=((1.0)*x400);
IkReal x403=(x401+x402);
evalcond[0]=((((-1.0)*x386*x391))+(((-1.0)*r21*x399))+x397+(((-1.0)*r22*x395))+((sj4*x394)));
evalcond[1]=((((-1.0)*r02*x395))+(((-1.0)*r01*x399))+((sj4*x389))+(((-1.0)*x403)));
evalcond[2]=((((-0.33655)*x397))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x396))+(((0.14105)*x392))+((x386*x390)));
evalcond[3]=(((x385*x390))+(((0.33655)*x400))+(((0.14105)*x387))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.14105)*x393)));
evalcond[4]=((((-1.0)*x397))+((r01*x398))+(((-1.0)*r02*sj4*x388))+((sj3*x393))+((sj1*x386))+(((-1.0)*cj4*x388*x389))+((sj3*x387)));
evalcond[5]=((((-1.0)*r22*sj4*x388))+(((-1.0)*cj4*x388*x394))+((sj3*x396))+((sj3*x392))+((r21*x398))+(((-1.0)*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x404=((1.0)*r01);
IkReal x405=((1.0)*sj5);
CheckValue<IkReal> x406 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x404))+(((-1.0)*r00*x405)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x404))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x405))+(((-1.0)*cj4*r22)))),-1);
if(!x407.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x406.value)+(((1.5707963267949)*(x407.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x408=IKsin(j3);
IkReal x409=IKcos(j3);
IkReal x410=(r10*sj5);
IkReal x411=(cj4*sj5);
IkReal x412=(cj5*r11);
IkReal x413=(cj4*cj5);
IkReal x414=(r12*sj4);
IkReal x415=((1.0)*x409);
IkReal x416=((1.0)*x408);
evalcond[0]=(((x408*x410))+((x408*x412))+(((-1.0)*x414*x415))+(((-1.0)*r10*x413*x415))+((r11*x409*x411)));
evalcond[1]=(((r21*x408*x411))+(((-1.0)*cj5*r21*x415))+(((-1.0)*r22*sj4*x416))+(((-1.0)*r20*x413*x416))+(((-1.0)*r20*sj5*x415)));
evalcond[2]=(((r01*x408*x411))+(((-1.0)*r00*x413*x416))+(((-1.0)*cj5*r01*x415))+(((-1.0)*r02*sj4*x416))+(((-1.0)*r00*sj5*x415)));
evalcond[3]=((-1.0)+(((-1.0)*x412*x415))+(((-1.0)*x410*x415))+(((-1.0)*x414*x416))+((r11*x408*x411))+(((-1.0)*r10*x413*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x417=((0.757142857142857)*sj4);
IkReal x418=((0.317322834645669)*sj5);
IkReal x419=((0.317322834645669)*cj5);
IkReal x420=((0.757142857142857)*cj4);
if( IKabs(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x417))+((r02*x420))+(((-1.0)*r01*x419))+(((-1.0)*r00*x418))+((r01*sj5*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj5*x417))+((r21*x419))+((r20*x418))+((cj5*r20*x417))+(((-2.24971878515186)*pz))+(((-1.0)*r22*x420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x417))+((r02*x420))+(((-1.0)*r01*x419))+(((-1.0)*r00*x418))+((r01*sj5*x417))))+IKsqr(((((-1.0)*r21*sj5*x417))+((r21*x419))+((r20*x418))+((cj5*r20*x417))+(((-2.24971878515186)*pz))+(((-1.0)*r22*x420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x417))+((r02*x420))+(((-1.0)*r01*x419))+(((-1.0)*r00*x418))+((r01*sj5*x417))), ((((-1.0)*r21*sj5*x417))+((r21*x419))+((r20*x418))+((cj5*r20*x417))+(((-2.24971878515186)*pz))+(((-1.0)*r22*x420))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x421=((1.0)*pz);
IkReal x422=((0.14105)*cj5);
IkReal x423=((0.33655)*sj4);
IkReal x424=(r01*sj5);
IkReal x425=(cj5*r20);
IkReal x426=(cj5*r00);
IkReal x427=((0.14105)*sj5);
IkReal x428=((0.33655)*sj3);
IkReal x429=(r21*sj5);
IkReal x430=((0.33655)*cj4);
IkReal x431=(r00*x427);
IkReal x432=((0.4445)*(IKsin(j1)));
IkReal x433=(r01*x422);
IkReal x434=(r21*x422);
IkReal x435=(r20*x427);
IkReal x436=((0.4445)*(IKcos(j1)));
IkReal x437=(cj3*x430);
IkReal x438=(x421+x436);
IkReal x439=(x434+x435);
IkReal x440=(x431+x432+x433);
evalcond[0]=((((-1.0)*px))+x440+(((-1.0)*r02*x430))+((x423*x426))+(((-1.0)*x423*x424)));
evalcond[1]=((((-1.0)*x438))+x439+((x423*x425))+(((-1.0)*x423*x429))+(((-1.0)*r22*x430)));
evalcond[2]=((((-1.0)*cj5*r21*x428))+(((-1.0)*x440))+((cj3*r22*x423))+((x425*x437))+(((-1.0)*x429*x437))+px+(((-1.0)*r20*sj5*x428)));
evalcond[3]=((((-1.0)*cj5*r01*x428))+(((-1.0)*x438))+((cj3*r02*x423))+((x426*x437))+(((-1.0)*r00*sj5*x428))+(((-1.0)*x424*x437))+x439);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x441=((1.0)*r01);
IkReal x442=(sj1*sj4);
IkReal x443=(cj5*r00);
IkReal x444=(cj1*cj4);
IkReal x445=(cj5*r20);
IkReal x446=(cj1*sj4);
IkReal x447=(sj5*x446);
IkReal x448=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r02*x444))+(((-1.0)*r21*sj5*x442))+((x442*x445))+(((-1.0)*r22*x448))+((x443*x446))+(((-1.0)*x441*x447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x447))+(((-1.0)*x445*x446))+((r22*x444))+(((-1.0)*r02*x448))+((x442*x443))+(((-1.0)*sj5*x441*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x444))+(((-1.0)*r21*sj5*x442))+((x442*x445))+(((-1.0)*r22*x448))+((x443*x446))+(((-1.0)*x441*x447))))+IKsqr((((r21*x447))+(((-1.0)*x445*x446))+((r22*x444))+(((-1.0)*r02*x448))+((x442*x443))+(((-1.0)*sj5*x441*x442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x444))+(((-1.0)*r21*sj5*x442))+((x442*x445))+(((-1.0)*r22*x448))+((x443*x446))+(((-1.0)*x441*x447))), (((r21*x447))+(((-1.0)*x445*x446))+((r22*x444))+(((-1.0)*r02*x448))+((x442*x443))+(((-1.0)*sj5*x441*x442))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x449=IKcos(j2);
IkReal x450=IKsin(j2);
IkReal x451=(cj5*r01);
IkReal x452=((1.0)*cj3);
IkReal x453=(cj5*r00);
IkReal x454=((0.33655)*sj1);
IkReal x455=((1.0)*sj1);
IkReal x456=(cj5*r21);
IkReal x457=(r00*sj5);
IkReal x458=(cj5*r20);
IkReal x459=((1.0)*cj4);
IkReal x460=(r20*sj5);
IkReal x461=(cj1*x449);
IkReal x462=(cj3*cj4*sj5);
IkReal x463=((1.0)*sj4*sj5);
IkReal x464=(cj1*x450);
IkReal x465=(x449*x455);
IkReal x466=((1.0)*x464);
IkReal x467=(x466+x465);
evalcond[0]=(((sj4*x458))+x461+(((-1.0)*x450*x455))+(((-1.0)*r22*x459))+(((-1.0)*r21*x463)));
evalcond[1]=((((-1.0)*r01*x463))+(((-1.0)*x467))+((sj4*x453))+(((-1.0)*r02*x459)));
evalcond[2]=((((0.14105)*x460))+(((0.14105)*x456))+(((-0.33655)*x461))+(((-1.0)*pz))+(((-0.4445)*cj1))+((x450*x454)));
evalcond[3]=((((0.14105)*x451))+(((0.14105)*x457))+(((-1.0)*px))+((x449*x454))+(((0.4445)*sj1))+(((0.33655)*x464)));
evalcond[4]=(((sj3*x457))+((sj3*x451))+(((-1.0)*r02*sj4*x452))+(((-1.0)*x461))+((sj1*x450))+(((-1.0)*cj4*x452*x453))+((r01*x462)));
evalcond[5]=(((sj3*x456))+((sj3*x460))+(((-1.0)*x467))+(((-1.0)*r22*sj4*x452))+(((-1.0)*cj4*x452*x458))+((r21*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x468=((1.0)*cj5);
IkReal x469=((1.0)*sj5);
CheckValue<IkReal> x470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x468))+((r01*sj4*sj5))+((cj4*r02)))),-1);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x468))+(((-1.0)*r20*x469)))),IkReal(((((-1.0)*cj4*r21*x469))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x470.value)))+(x471.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x472=IKsin(j3);
IkReal x473=IKcos(j3);
IkReal x474=(r10*sj5);
IkReal x475=(cj4*sj5);
IkReal x476=(cj5*r11);
IkReal x477=(cj4*cj5);
IkReal x478=(r12*sj4);
IkReal x479=((1.0)*x473);
IkReal x480=((1.0)*x472);
evalcond[0]=(((x472*x476))+((x472*x474))+(((-1.0)*x478*x479))+(((-1.0)*r10*x477*x479))+((r11*x473*x475)));
evalcond[1]=((((-1.0)*r22*sj4*x480))+(((-1.0)*cj5*r21*x479))+(((-1.0)*r20*sj5*x479))+((r21*x472*x475))+(((-1.0)*r20*x477*x480)));
evalcond[2]=((((-1.0)*r00*sj5*x479))+(((-1.0)*cj5*r01*x479))+(((-1.0)*r00*x477*x480))+((r01*x472*x475))+(((-1.0)*r02*sj4*x480)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x477*x480))+(((-1.0)*x476*x479))+((r11*x472*x475))+(((-1.0)*x474*x479))+(((-1.0)*x478*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x481=((0.757142857142857)*sj4);
IkReal x482=((0.317322834645669)*sj5);
IkReal x483=((0.317322834645669)*cj5);
IkReal x484=((0.757142857142857)*cj4);
if( IKabs(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x481))+((r02*x484))+(((-1.0)*r01*x483))+((r01*sj5*x481))+(((-1.0)*r00*x482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x482))+((cj5*r20*x481))+((r21*x483))+(((-1.0)*r22*x484))+(((-1.0)*r21*sj5*x481))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x481))+((r02*x484))+(((-1.0)*r01*x483))+((r01*sj5*x481))+(((-1.0)*r00*x482))))+IKsqr((((r20*x482))+((cj5*r20*x481))+((r21*x483))+(((-1.0)*r22*x484))+(((-1.0)*r21*sj5*x481))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x481))+((r02*x484))+(((-1.0)*r01*x483))+((r01*sj5*x481))+(((-1.0)*r00*x482))), (((r20*x482))+((cj5*r20*x481))+((r21*x483))+(((-1.0)*r22*x484))+(((-1.0)*r21*sj5*x481))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x485=((1.0)*pz);
IkReal x486=((0.14105)*cj5);
IkReal x487=((0.33655)*sj4);
IkReal x488=(r01*sj5);
IkReal x489=(cj5*r20);
IkReal x490=(cj5*r00);
IkReal x491=((0.14105)*sj5);
IkReal x492=((0.33655)*sj3);
IkReal x493=(r21*sj5);
IkReal x494=((0.33655)*cj4);
IkReal x495=(r00*x491);
IkReal x496=((0.4445)*(IKsin(j1)));
IkReal x497=(r01*x486);
IkReal x498=(r21*x486);
IkReal x499=(r20*x491);
IkReal x500=((0.4445)*(IKcos(j1)));
IkReal x501=(cj3*x494);
IkReal x502=(x485+x500);
IkReal x503=(x498+x499);
IkReal x504=(x496+x497+x495);
evalcond[0]=((((-1.0)*r02*x494))+(((-1.0)*px))+(((-1.0)*x487*x488))+x504+((x487*x490)));
evalcond[1]=((((-1.0)*x502))+(((-1.0)*x487*x493))+(((-1.0)*r22*x494))+x503+((x487*x489)));
evalcond[2]=(((x489*x501))+(((-1.0)*x504))+((cj3*r22*x487))+(((-1.0)*cj5*r21*x492))+px+(((-1.0)*x493*x501))+(((-1.0)*r20*sj5*x492)));
evalcond[3]=((((-1.0)*x488*x501))+(((-1.0)*r00*sj5*x492))+(((-1.0)*x502))+(((-1.0)*cj5*r01*x492))+((x490*x501))+x503+((cj3*r02*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x505=((1.0)*r01);
IkReal x506=(sj1*sj4);
IkReal x507=(cj5*r00);
IkReal x508=(cj1*cj4);
IkReal x509=(cj5*r20);
IkReal x510=(cj1*sj4);
IkReal x511=(sj5*x510);
IkReal x512=((1.0)*cj4*sj1);
if( IKabs((((x507*x510))+(((-1.0)*r22*x512))+((x506*x509))+(((-1.0)*x505*x511))+(((-1.0)*r02*x508))+(((-1.0)*r21*sj5*x506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x505*x506))+((x506*x507))+((r22*x508))+(((-1.0)*x509*x510))+((r21*x511))+(((-1.0)*r02*x512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x507*x510))+(((-1.0)*r22*x512))+((x506*x509))+(((-1.0)*x505*x511))+(((-1.0)*r02*x508))+(((-1.0)*r21*sj5*x506))))+IKsqr(((((-1.0)*sj5*x505*x506))+((x506*x507))+((r22*x508))+(((-1.0)*x509*x510))+((r21*x511))+(((-1.0)*r02*x512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x507*x510))+(((-1.0)*r22*x512))+((x506*x509))+(((-1.0)*x505*x511))+(((-1.0)*r02*x508))+(((-1.0)*r21*sj5*x506))), ((((-1.0)*sj5*x505*x506))+((x506*x507))+((r22*x508))+(((-1.0)*x509*x510))+((r21*x511))+(((-1.0)*r02*x512))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x513=IKcos(j2);
IkReal x514=IKsin(j2);
IkReal x515=(cj5*r01);
IkReal x516=((1.0)*cj3);
IkReal x517=(cj5*r00);
IkReal x518=((0.33655)*sj1);
IkReal x519=((1.0)*sj1);
IkReal x520=(cj5*r21);
IkReal x521=(r00*sj5);
IkReal x522=(cj5*r20);
IkReal x523=((1.0)*cj4);
IkReal x524=(r20*sj5);
IkReal x525=(cj1*x513);
IkReal x526=(cj3*cj4*sj5);
IkReal x527=((1.0)*sj4*sj5);
IkReal x528=(cj1*x514);
IkReal x529=(x513*x519);
IkReal x530=((1.0)*x528);
IkReal x531=(x530+x529);
evalcond[0]=((((-1.0)*x514*x519))+(((-1.0)*r21*x527))+x525+((sj4*x522))+(((-1.0)*r22*x523)));
evalcond[1]=(((sj4*x517))+(((-1.0)*r01*x527))+(((-1.0)*x531))+(((-1.0)*r02*x523)));
evalcond[2]=(((x514*x518))+(((-0.33655)*x525))+(((-1.0)*pz))+(((0.14105)*x524))+(((0.14105)*x520))+(((-0.4445)*cj1)));
evalcond[3]=(((x513*x518))+(((0.33655)*x528))+(((-1.0)*px))+(((0.14105)*x521))+(((0.4445)*sj1))+(((0.14105)*x515)));
evalcond[4]=((((-1.0)*cj4*x516*x517))+(((-1.0)*r02*sj4*x516))+(((-1.0)*x525))+((sj3*x521))+((sj3*x515))+((sj1*x514))+((r01*x526)));
evalcond[5]=(((r21*x526))+((sj3*x524))+((sj3*x520))+(((-1.0)*x531))+(((-1.0)*r22*sj4*x516))+(((-1.0)*cj4*x516*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x532=((1.0)*r11);
IkReal x533=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x533;
j3eval[1]=IKsign(x533);
j3eval[2]=((IKabs((((cj4*cj5*r10))+(((-1.0)*cj4*sj5*x532))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x532))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x534=((1.0)*sj5);
IkReal x535=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x534))+(((-1.0)*cj4*r12)));
j3eval[0]=x535;
j3eval[1]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x534)))))+(IKabs(((((-1.0)*r20*x534))+(((-1.0)*cj5*r21))))));
j3eval[2]=IKsign(x535);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x536=r00*r00;
IkReal x537=cj5*cj5;
IkReal x538=cj4*cj4;
IkReal x539=r01*r01;
IkReal x540=r02*r02;
IkReal x541=(cj5*r00);
IkReal x542=(r02*sj4);
IkReal x543=((2.0)*r01*sj5);
IkReal x544=((1.0)*x538);
IkReal x545=(x536*x537);
IkReal x546=(x537*x539);
IkReal x547=((((-1.0)*x544*x546))+(((2.0)*cj4*x541*x542))+((x541*x543))+(((-1.0)*x545))+(((-1.0)*cj4*x542*x543))+(((-1.0)*x540*x544))+x546+x540+x536+(((-1.0)*x538*x541*x543))+((x538*x545))+((x538*x539)));
j3eval[0]=x547;
j3eval[1]=((IKabs(((((-1.0)*x542))+((cj4*r01*sj5))+(((-1.0)*cj4*x541)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x547);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x548=r00*r00;
IkReal x549=cj5*cj5;
IkReal x550=cj4*cj4;
IkReal x551=r01*r01;
IkReal x552=r02*r02;
IkReal x553=(cj5*r00);
IkReal x554=(r02*sj4);
IkReal x555=((2.0)*r01*sj5);
IkReal x556=((1.0)*x550);
IkReal x557=(x548*x549);
IkReal x558=(x549*x551);
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x553))+(((-1.0)*x554))+((cj4*r01*sj5)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(IKsign(((((-1.0)*x556*x558))+(((-1.0)*x557))+(((-1.0)*x552*x556))+(((2.0)*cj4*x553*x554))+x558+x552+x548+((x550*x557))+((x550*x551))+(((-1.0)*cj4*x554*x555))+((x553*x555))+(((-1.0)*x550*x553*x555)))),-1);
if(!x560.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x559.value)+(((1.5707963267949)*(x560.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x561=IKsin(j3);
IkReal x562=IKcos(j3);
IkReal x563=(r02*sj4);
IkReal x564=(cj4*cj5);
IkReal x565=(cj4*sj5);
IkReal x566=(cj5*r01);
IkReal x567=(r00*sj5);
IkReal x568=((1.0)*x562);
IkReal x569=((1.0)*x561);
evalcond[0]=(((r01*x562*x565))+((x561*x567))+((x561*x566))+(((-1.0)*x563*x568))+(((-1.0)*r00*x564*x568)));
evalcond[1]=((((-1.0)*r20*x564*x569))+(((-1.0)*cj5*r21*x568))+((r21*x561*x565))+(((-1.0)*r22*sj4*x569))+(((-1.0)*r20*sj5*x568)));
evalcond[2]=((((-1.0)*cj5*r11*x568))+((r11*x561*x565))+(((-1.0)*r10*sj5*x568))+(((-1.0)*r12*sj4*x569))+(((-1.0)*r10*x564*x569)));
evalcond[3]=((-1.0)+(((-1.0)*x566*x568))+(((-1.0)*x563*x569))+(((-1.0)*r00*x564*x569))+(((-1.0)*x567*x568))+((r01*x561*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x570=((0.317322834645669)*cj5);
IkReal x571=((0.757142857142857)*cj4);
IkReal x572=((0.317322834645669)*sj5);
IkReal x573=((0.757142857142857)*cj5*sj4);
IkReal x574=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x574))+(((-1.0)*r12*x571))+((r10*x572))+((r10*x573))+(((-2.24971878515186)*py))+((r11*x570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x572))+((r20*x573))+(((-1.0)*r21*x574))+((r21*x570))+(((-1.0)*r22*x571))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x574))+(((-1.0)*r12*x571))+((r10*x572))+((r10*x573))+(((-2.24971878515186)*py))+((r11*x570))))+IKsqr((((r20*x572))+((r20*x573))+(((-1.0)*r21*x574))+((r21*x570))+(((-1.0)*r22*x571))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x574))+(((-1.0)*r12*x571))+((r10*x572))+((r10*x573))+(((-2.24971878515186)*py))+((r11*x570))), (((r20*x572))+((r20*x573))+(((-1.0)*r21*x574))+((r21*x570))+(((-1.0)*r22*x571))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x575=((0.14105)*cj5);
IkReal x576=((0.33655)*cj3);
IkReal x577=(cj4*sj5);
IkReal x578=((0.33655)*cj5);
IkReal x579=(r10*sj5);
IkReal x580=((0.33655)*sj3);
IkReal x581=(cj4*cj5);
IkReal x582=(r20*sj5);
IkReal x583=((0.33655)*cj4);
IkReal x584=((0.4445)*(IKsin(j1)));
IkReal x585=((0.14105)*x579);
IkReal x586=(r11*x575);
IkReal x587=((0.4445)*(IKcos(j1)));
IkReal x588=(r21*x575);
IkReal x589=((0.14105)*x582);
IkReal x590=((0.33655)*sj4*sj5);
IkReal x591=(py+x584);
IkReal x592=(x588+x589);
IkReal x593=(x585+x586);
evalcond[0]=(((r12*x583))+(((-1.0)*r10*sj4*x578))+(((-1.0)*x593))+((r11*x590))+x591);
evalcond[1]=((((-1.0)*r22*x583))+(((-1.0)*r21*x590))+((r20*sj4*x578))+(((-1.0)*pz))+x592+(((-1.0)*x587)));
evalcond[2]=(((x580*x582))+(((-1.0)*x593))+((r21*x576*x577))+x591+(((-1.0)*r22*sj4*x576))+((r21*sj3*x578))+(((-1.0)*r20*x576*x581)));
evalcond[3]=(((r12*sj4*x576))+(((-1.0)*x579*x580))+(((-1.0)*x592))+pz+x587+(((-1.0)*r11*x576*x577))+((r10*x576*x581))+(((-1.0)*r11*sj3*x578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x594=(cj4*r12);
IkReal x595=(cj4*r22);
IkReal x596=(cj1*sj4);
IkReal x597=(r11*sj5);
IkReal x598=(r21*sj5);
IkReal x599=((1.0)*sj1);
IkReal x600=(sj1*sj4);
IkReal x601=(cj5*r20);
IkReal x602=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x596*x602))+((cj1*x594))+((x600*x601))+(((-1.0)*sj4*x598*x599))+(((-1.0)*x595*x599))+((x596*x597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x595))+((x597*x600))+(((-1.0)*cj5*r10*sj4*x599))+((x596*x598))+((sj1*x594))+(((-1.0)*x596*x601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x596*x602))+((cj1*x594))+((x600*x601))+(((-1.0)*sj4*x598*x599))+(((-1.0)*x595*x599))+((x596*x597))))+IKsqr((((cj1*x595))+((x597*x600))+(((-1.0)*cj5*r10*sj4*x599))+((x596*x598))+((sj1*x594))+(((-1.0)*x596*x601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x596*x602))+((cj1*x594))+((x600*x601))+(((-1.0)*sj4*x598*x599))+(((-1.0)*x595*x599))+((x596*x597))), (((cj1*x595))+((x597*x600))+(((-1.0)*cj5*r10*sj4*x599))+((x596*x598))+((sj1*x594))+(((-1.0)*x596*x601))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x603=IKcos(j2);
IkReal x604=IKsin(j2);
IkReal x605=(cj3*cj4);
IkReal x606=(r21*sj5);
IkReal x607=((0.33655)*sj1);
IkReal x608=((1.0)*sj4);
IkReal x609=((1.0)*cj5);
IkReal x610=((0.14105)*cj5);
IkReal x611=((1.0)*sj1);
IkReal x612=(cj5*sj4);
IkReal x613=((1.0)*cj4);
IkReal x614=((0.14105)*sj5);
IkReal x615=(r11*sj5);
IkReal x616=(cj5*sj3);
IkReal x617=(sj3*sj5);
IkReal x618=(cj1*x603);
IkReal x619=(cj1*x604);
IkReal x620=(x604*x611);
evalcond[0]=(((sj1*x603))+(((-1.0)*r12*x613))+x619+((r10*x612))+(((-1.0)*x608*x615)));
evalcond[1]=(((r20*x612))+(((-1.0)*r22*x613))+(((-1.0)*x620))+x618+(((-1.0)*x606*x608)));
evalcond[2]=(((r20*x614))+((x604*x607))+(((-0.33655)*x618))+(((-1.0)*pz))+((r21*x610))+(((-0.4445)*cj1)));
evalcond[3]=((((-1.0)*x603*x607))+(((-0.4445)*sj1))+(((-0.33655)*x619))+((r11*x610))+(((-1.0)*py))+((r10*x614)));
evalcond[4]=(((x605*x615))+((r11*x616))+(((-1.0)*x620))+(((-1.0)*r10*x605*x609))+x618+(((-1.0)*cj3*r12*x608))+((r10*x617)));
evalcond[5]=(((x605*x606))+(((-1.0)*r20*x605*x609))+((r20*x617))+(((-1.0)*cj3*r22*x608))+(((-1.0)*x619))+((r21*x616))+(((-1.0)*x603*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x621=((1.0)*sj5);
CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x621))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x621))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x622.valid){
continue;
}
CheckValue<IkReal> x623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x621))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)))),-1);
if(!x623.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x622.value)+(((1.5707963267949)*(x623.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x624=IKsin(j3);
IkReal x625=IKcos(j3);
IkReal x626=(r02*sj4);
IkReal x627=(cj4*cj5);
IkReal x628=(cj4*sj5);
IkReal x629=(cj5*r01);
IkReal x630=(r00*sj5);
IkReal x631=((1.0)*x625);
IkReal x632=((1.0)*x624);
evalcond[0]=(((r01*x625*x628))+((x624*x630))+((x624*x629))+(((-1.0)*x626*x631))+(((-1.0)*r00*x627*x631)));
evalcond[1]=((((-1.0)*cj5*r21*x631))+((r21*x624*x628))+(((-1.0)*r20*sj5*x631))+(((-1.0)*r22*sj4*x632))+(((-1.0)*r20*x627*x632)));
evalcond[2]=(((r11*x624*x628))+(((-1.0)*r12*sj4*x632))+(((-1.0)*r10*sj5*x631))+(((-1.0)*cj5*r11*x631))+(((-1.0)*r10*x627*x632)));
evalcond[3]=((-1.0)+(((-1.0)*x629*x631))+(((-1.0)*x630*x631))+((r01*x624*x628))+(((-1.0)*x626*x632))+(((-1.0)*r00*x627*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x633=((0.317322834645669)*cj5);
IkReal x634=((0.757142857142857)*cj4);
IkReal x635=((0.317322834645669)*sj5);
IkReal x636=((0.757142857142857)*cj5*sj4);
IkReal x637=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x637))+(((-1.0)*r12*x634))+((r10*x636))+((r10*x635))+(((-2.24971878515186)*py))+((r11*x633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x633))+(((-1.0)*r21*x637))+((r20*x636))+((r20*x635))+(((-1.0)*r22*x634))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x637))+(((-1.0)*r12*x634))+((r10*x636))+((r10*x635))+(((-2.24971878515186)*py))+((r11*x633))))+IKsqr((((r21*x633))+(((-1.0)*r21*x637))+((r20*x636))+((r20*x635))+(((-1.0)*r22*x634))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x637))+(((-1.0)*r12*x634))+((r10*x636))+((r10*x635))+(((-2.24971878515186)*py))+((r11*x633))), (((r21*x633))+(((-1.0)*r21*x637))+((r20*x636))+((r20*x635))+(((-1.0)*r22*x634))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x638=((0.14105)*cj5);
IkReal x639=((0.33655)*cj3);
IkReal x640=(cj4*sj5);
IkReal x641=((0.33655)*cj5);
IkReal x642=(r10*sj5);
IkReal x643=((0.33655)*sj3);
IkReal x644=(cj4*cj5);
IkReal x645=(r20*sj5);
IkReal x646=((0.33655)*cj4);
IkReal x647=((0.4445)*(IKsin(j1)));
IkReal x648=((0.14105)*x642);
IkReal x649=(r11*x638);
IkReal x650=((0.4445)*(IKcos(j1)));
IkReal x651=(r21*x638);
IkReal x652=((0.14105)*x645);
IkReal x653=((0.33655)*sj4*sj5);
IkReal x654=(py+x647);
IkReal x655=(x651+x652);
IkReal x656=(x649+x648);
evalcond[0]=((((-1.0)*x656))+(((-1.0)*r10*sj4*x641))+((r11*x653))+((r12*x646))+x654);
evalcond[1]=(((r20*sj4*x641))+(((-1.0)*x650))+(((-1.0)*r22*x646))+(((-1.0)*pz))+x655+(((-1.0)*r21*x653)));
evalcond[2]=(((x643*x645))+(((-1.0)*x656))+((r21*x639*x640))+(((-1.0)*r22*sj4*x639))+x654+(((-1.0)*r20*x639*x644))+((r21*sj3*x641)));
evalcond[3]=((((-1.0)*x642*x643))+(((-1.0)*r11*x639*x640))+(((-1.0)*x655))+(((-1.0)*r11*sj3*x641))+pz+((r10*x639*x644))+x650+((r12*sj4*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x657=(cj4*r12);
IkReal x658=(cj4*r22);
IkReal x659=(cj1*sj4);
IkReal x660=(r11*sj5);
IkReal x661=(r21*sj5);
IkReal x662=((1.0)*sj1);
IkReal x663=(sj1*sj4);
IkReal x664=(cj5*r20);
IkReal x665=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x659*x665))+((x663*x664))+((cj1*x657))+(((-1.0)*x658*x662))+((x659*x660))+(((-1.0)*sj4*x661*x662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x657))+((cj1*x658))+((x660*x663))+(((-1.0)*x659*x664))+((x659*x661))+(((-1.0)*cj5*r10*sj4*x662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x659*x665))+((x663*x664))+((cj1*x657))+(((-1.0)*x658*x662))+((x659*x660))+(((-1.0)*sj4*x661*x662))))+IKsqr((((sj1*x657))+((cj1*x658))+((x660*x663))+(((-1.0)*x659*x664))+((x659*x661))+(((-1.0)*cj5*r10*sj4*x662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x659*x665))+((x663*x664))+((cj1*x657))+(((-1.0)*x658*x662))+((x659*x660))+(((-1.0)*sj4*x661*x662))), (((sj1*x657))+((cj1*x658))+((x660*x663))+(((-1.0)*x659*x664))+((x659*x661))+(((-1.0)*cj5*r10*sj4*x662))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x666=IKcos(j2);
IkReal x667=IKsin(j2);
IkReal x668=(cj3*cj4);
IkReal x669=(r21*sj5);
IkReal x670=((0.33655)*sj1);
IkReal x671=((1.0)*sj4);
IkReal x672=((1.0)*cj5);
IkReal x673=((0.14105)*cj5);
IkReal x674=((1.0)*sj1);
IkReal x675=(cj5*sj4);
IkReal x676=((1.0)*cj4);
IkReal x677=((0.14105)*sj5);
IkReal x678=(r11*sj5);
IkReal x679=(cj5*sj3);
IkReal x680=(sj3*sj5);
IkReal x681=(cj1*x666);
IkReal x682=(cj1*x667);
IkReal x683=(x667*x674);
evalcond[0]=(((r10*x675))+((sj1*x666))+x682+(((-1.0)*x671*x678))+(((-1.0)*r12*x676)));
evalcond[1]=((((-1.0)*r22*x676))+(((-1.0)*x683))+((r20*x675))+(((-1.0)*x669*x671))+x681);
evalcond[2]=(((r21*x673))+(((-1.0)*pz))+((x667*x670))+((r20*x677))+(((-0.4445)*cj1))+(((-0.33655)*x681)));
evalcond[3]=(((r10*x677))+(((-0.4445)*sj1))+((r11*x673))+(((-1.0)*py))+(((-1.0)*x666*x670))+(((-0.33655)*x682)));
evalcond[4]=((((-1.0)*x683))+((r11*x679))+(((-1.0)*cj3*r12*x671))+(((-1.0)*r10*x668*x672))+((r10*x680))+((x668*x678))+x681);
evalcond[5]=(((r21*x679))+(((-1.0)*r20*x668*x672))+((x668*x669))+(((-1.0)*x666*x674))+((r20*x680))+(((-1.0)*x682))+(((-1.0)*cj3*r22*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x684=((1.0)*r11);
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x684)))),IkReal(((((-1.0)*cj4*sj5*x684))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x685.value)))+(x686.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x687=IKsin(j3);
IkReal x688=IKcos(j3);
IkReal x689=(r02*sj4);
IkReal x690=(cj4*cj5);
IkReal x691=(cj4*sj5);
IkReal x692=(cj5*r01);
IkReal x693=(r00*sj5);
IkReal x694=((1.0)*x688);
IkReal x695=((1.0)*x687);
evalcond[0]=((((-1.0)*r00*x690*x694))+((x687*x692))+((x687*x693))+((r01*x688*x691))+(((-1.0)*x689*x694)));
evalcond[1]=(((r21*x687*x691))+(((-1.0)*r20*sj5*x694))+(((-1.0)*cj5*r21*x694))+(((-1.0)*r20*x690*x695))+(((-1.0)*r22*sj4*x695)));
evalcond[2]=((((-1.0)*r10*sj5*x694))+((r11*x687*x691))+(((-1.0)*cj5*r11*x694))+(((-1.0)*r10*x690*x695))+(((-1.0)*r12*sj4*x695)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x690*x695))+(((-1.0)*x693*x694))+((r01*x687*x691))+(((-1.0)*x692*x694))+(((-1.0)*x689*x695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x696=((0.317322834645669)*cj5);
IkReal x697=((0.757142857142857)*cj4);
IkReal x698=((0.317322834645669)*sj5);
IkReal x699=((0.757142857142857)*cj5*sj4);
IkReal x700=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x700))+(((-1.0)*r12*x697))+((r10*x698))+((r10*x699))+((r11*x696))+(((-2.24971878515186)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x698))+((r20*x699))+(((-1.0)*r21*x700))+(((-1.0)*r22*x697))+((r21*x696))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x700))+(((-1.0)*r12*x697))+((r10*x698))+((r10*x699))+((r11*x696))+(((-2.24971878515186)*py))))+IKsqr((((r20*x698))+((r20*x699))+(((-1.0)*r21*x700))+(((-1.0)*r22*x697))+((r21*x696))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x700))+(((-1.0)*r12*x697))+((r10*x698))+((r10*x699))+((r11*x696))+(((-2.24971878515186)*py))), (((r20*x698))+((r20*x699))+(((-1.0)*r21*x700))+(((-1.0)*r22*x697))+((r21*x696))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x701=((0.14105)*cj5);
IkReal x702=((0.33655)*cj3);
IkReal x703=(cj4*sj5);
IkReal x704=((0.33655)*cj5);
IkReal x705=(r10*sj5);
IkReal x706=((0.33655)*sj3);
IkReal x707=(cj4*cj5);
IkReal x708=(r20*sj5);
IkReal x709=((0.33655)*cj4);
IkReal x710=((0.4445)*(IKsin(j1)));
IkReal x711=((0.14105)*x705);
IkReal x712=(r11*x701);
IkReal x713=((0.4445)*(IKcos(j1)));
IkReal x714=(r21*x701);
IkReal x715=((0.14105)*x708);
IkReal x716=((0.33655)*sj4*sj5);
IkReal x717=(py+x710);
IkReal x718=(x715+x714);
IkReal x719=(x711+x712);
evalcond[0]=(((r11*x716))+(((-1.0)*x719))+(((-1.0)*r10*sj4*x704))+x717+((r12*x709)));
evalcond[1]=(((r20*sj4*x704))+(((-1.0)*r21*x716))+(((-1.0)*pz))+(((-1.0)*x713))+x718+(((-1.0)*r22*x709)));
evalcond[2]=(((r21*sj3*x704))+((x706*x708))+((r21*x702*x703))+(((-1.0)*x719))+(((-1.0)*r20*x702*x707))+(((-1.0)*r22*sj4*x702))+x717);
evalcond[3]=(((r10*x702*x707))+(((-1.0)*r11*x702*x703))+((r12*sj4*x702))+(((-1.0)*r11*sj3*x704))+(((-1.0)*x718))+pz+(((-1.0)*x705*x706))+x713);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x720=(cj4*r12);
IkReal x721=(cj4*r22);
IkReal x722=(cj1*sj4);
IkReal x723=(r11*sj5);
IkReal x724=(r21*sj5);
IkReal x725=((1.0)*sj1);
IkReal x726=(sj1*sj4);
IkReal x727=(cj5*r20);
IkReal x728=((1.0)*cj5*r10);
if( IKabs((((cj1*x720))+((x726*x727))+(((-1.0)*x722*x728))+((x722*x723))+(((-1.0)*sj4*x724*x725))+(((-1.0)*x721*x725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x721))+((x723*x726))+((x722*x724))+(((-1.0)*x722*x727))+(((-1.0)*cj5*r10*sj4*x725))+((sj1*x720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x720))+((x726*x727))+(((-1.0)*x722*x728))+((x722*x723))+(((-1.0)*sj4*x724*x725))+(((-1.0)*x721*x725))))+IKsqr((((cj1*x721))+((x723*x726))+((x722*x724))+(((-1.0)*x722*x727))+(((-1.0)*cj5*r10*sj4*x725))+((sj1*x720))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x720))+((x726*x727))+(((-1.0)*x722*x728))+((x722*x723))+(((-1.0)*sj4*x724*x725))+(((-1.0)*x721*x725))), (((cj1*x721))+((x723*x726))+((x722*x724))+(((-1.0)*x722*x727))+(((-1.0)*cj5*r10*sj4*x725))+((sj1*x720))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x729=IKcos(j2);
IkReal x730=IKsin(j2);
IkReal x731=(cj3*cj4);
IkReal x732=(r21*sj5);
IkReal x733=((0.33655)*sj1);
IkReal x734=((1.0)*sj4);
IkReal x735=((1.0)*cj5);
IkReal x736=((0.14105)*cj5);
IkReal x737=((1.0)*sj1);
IkReal x738=(cj5*sj4);
IkReal x739=((1.0)*cj4);
IkReal x740=((0.14105)*sj5);
IkReal x741=(r11*sj5);
IkReal x742=(cj5*sj3);
IkReal x743=(sj3*sj5);
IkReal x744=(cj1*x729);
IkReal x745=(cj1*x730);
IkReal x746=(x730*x737);
evalcond[0]=(((r10*x738))+(((-1.0)*x734*x741))+x745+((sj1*x729))+(((-1.0)*r12*x739)));
evalcond[1]=((((-1.0)*x732*x734))+((r20*x738))+x744+(((-1.0)*x746))+(((-1.0)*r22*x739)));
evalcond[2]=((((-0.33655)*x744))+(((-1.0)*pz))+(((-0.4445)*cj1))+((r20*x740))+((r21*x736))+((x730*x733)));
evalcond[3]=((((-0.33655)*x745))+(((-0.4445)*sj1))+((r10*x740))+(((-1.0)*py))+((r11*x736))+(((-1.0)*x729*x733)));
evalcond[4]=(((r10*x743))+((x731*x741))+((r11*x742))+(((-1.0)*cj3*r12*x734))+(((-1.0)*r10*x731*x735))+x744+(((-1.0)*x746)));
evalcond[5]=(((x731*x732))+(((-1.0)*r20*x731*x735))+((r21*x742))+((r20*x743))+(((-1.0)*x745))+(((-1.0)*cj3*r22*x734))+(((-1.0)*x729*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x747=((1.0)*cj5);
IkReal x748=((1.0)*sj5);
IkReal x749=(((r11*sj4*sj5))+(((-1.0)*r10*sj4*x747))+((cj4*r12)));
j3eval[0]=x749;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*x748))+((r22*sj4))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*r20*x748))+(((-1.0)*r21*x747))))));
j3eval[2]=IKsign(x749);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x750=((1.0)*r11);
IkReal x751=((1.0)*sj5);
IkReal x752=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x751))+(((-1.0)*cj4*r22)));
j3eval[0]=x752;
j3eval[1]=((IKabs((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x750)))))+(IKabs(((((-1.0)*r10*x751))+(((-1.0)*cj5*x750))))));
j3eval[2]=IKsign(x752);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x753=cj4*cj4;
IkReal x754=cj5*cj5;
IkReal x755=r01*r01;
IkReal x756=r02*r02;
IkReal x757=r00*r00;
IkReal x758=(cj5*r00);
IkReal x759=(r01*sj5);
IkReal x760=(r02*sj4);
IkReal x761=((2.0)*cj4);
IkReal x762=((1.0)*x753);
IkReal x763=(x754*x757);
IkReal x764=(x754*x755);
IkReal x765=((((-1.0)*x762*x763))+(((-1.0)*x758*x760*x761))+(((-1.0)*x755*x762))+((x759*x760*x761))+(((-1.0)*x764))+(((-1.0)*x756))+(((-1.0)*x757))+(((-2.0)*x758*x759))+x763+((x753*x756))+((x753*x764))+(((2.0)*x753*x758*x759)));
j3eval[0]=x765;
j3eval[1]=IKsign(x765);
j3eval[2]=((IKabs(((((-1.0)*x760))+(((-1.0)*cj4*x758))+((cj4*x759)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x766=cj4*cj4;
IkReal x767=cj5*cj5;
IkReal x768=r01*r01;
IkReal x769=r02*r02;
IkReal x770=r00*r00;
IkReal x771=((1.0)*cj5);
IkReal x772=(cj4*r00);
IkReal x773=(r02*sj4);
IkReal x774=((2.0)*cj5);
IkReal x775=(r00*sj5);
IkReal x776=((1.0)*x767);
IkReal x777=(cj4*r01*sj5);
IkReal x778=(x766*x768);
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal(((((-1.0)*x771*x772))+x777+(((-1.0)*x773)))),IkReal(((((-1.0)*r01*x771))+(((-1.0)*x775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780=IKPowWithIntegerCheck(IKsign(((((2.0)*x773*x777))+(((-1.0)*x768*x776))+(((-1.0)*x766*x770*x776))+(((-1.0)*r01*x774*x775))+((x767*x770))+((x767*x778))+((r01*x766*x774*x775))+(((-1.0)*x769))+(((-1.0)*x772*x773*x774))+((x766*x769))+(((-1.0)*x778))+(((-1.0)*x770)))),-1);
if(!x780.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x779.value)+(((1.5707963267949)*(x780.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x781=IKsin(j3);
IkReal x782=IKcos(j3);
IkReal x783=(r02*sj4);
IkReal x784=(cj4*cj5);
IkReal x785=(cj4*sj5);
IkReal x786=(cj5*r01);
IkReal x787=(r00*sj5);
IkReal x788=((1.0)*x782);
IkReal x789=((1.0)*x781);
evalcond[0]=(((x781*x786))+((x781*x787))+((r01*x782*x785))+(((-1.0)*r00*x784*x788))+(((-1.0)*x783*x788)));
evalcond[1]=(((r21*x781*x785))+(((-1.0)*r20*sj5*x788))+(((-1.0)*r20*x784*x789))+(((-1.0)*r22*sj4*x789))+(((-1.0)*cj5*r21*x788)));
evalcond[2]=((((-1.0)*r10*x784*x789))+((r11*x781*x785))+(((-1.0)*r12*sj4*x789))+(((-1.0)*cj5*r11*x788))+(((-1.0)*r10*sj5*x788)));
evalcond[3]=((1.0)+((r01*x781*x785))+(((-1.0)*x787*x788))+(((-1.0)*x786*x788))+(((-1.0)*r00*x784*x789))+(((-1.0)*x783*x789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x790=((0.317322834645669)*cj5);
IkReal x791=((0.757142857142857)*cj4);
IkReal x792=((0.317322834645669)*sj5);
IkReal x793=((0.757142857142857)*cj5*sj4);
IkReal x794=((0.757142857142857)*sj4*sj5);
if( IKabs(((((2.24971878515186)*py))+(((-1.0)*r11*x790))+(((-1.0)*r10*x792))+(((-1.0)*r10*x793))+((r11*x794))+((r12*x791)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x793))+((r20*x792))+((r21*x790))+(((-1.0)*r21*x794))+(((-1.0)*r22*x791))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*py))+(((-1.0)*r11*x790))+(((-1.0)*r10*x792))+(((-1.0)*r10*x793))+((r11*x794))+((r12*x791))))+IKsqr((((r20*x793))+((r20*x792))+((r21*x790))+(((-1.0)*r21*x794))+(((-1.0)*r22*x791))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*py))+(((-1.0)*r11*x790))+(((-1.0)*r10*x792))+(((-1.0)*r10*x793))+((r11*x794))+((r12*x791))), (((r20*x793))+((r20*x792))+((r21*x790))+(((-1.0)*r21*x794))+(((-1.0)*r22*x791))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x795=((1.0)*pz);
IkReal x796=((0.14105)*cj5);
IkReal x797=((0.33655)*cj3);
IkReal x798=(cj4*sj5);
IkReal x799=((0.33655)*cj5);
IkReal x800=(r10*sj5);
IkReal x801=((0.33655)*sj3);
IkReal x802=(cj4*cj5);
IkReal x803=(r20*sj5);
IkReal x804=((0.33655)*cj4);
IkReal x805=((0.14105)*x800);
IkReal x806=((0.4445)*(IKsin(j1)));
IkReal x807=(r11*x796);
IkReal x808=(r21*x796);
IkReal x809=((0.14105)*x803);
IkReal x810=((0.4445)*(IKcos(j1)));
IkReal x811=((0.33655)*sj4*sj5);
IkReal x812=(x795+x810);
IkReal x813=(x809+x808);
IkReal x814=(x805+x807+x806);
evalcond[0]=((((-1.0)*r12*x804))+(((-1.0)*r11*x811))+(((-1.0)*py))+((r10*sj4*x799))+x814);
evalcond[1]=((((-1.0)*r22*x804))+(((-1.0)*x812))+((r20*sj4*x799))+x813+(((-1.0)*r21*x811)));
evalcond[2]=(((r22*sj4*x797))+(((-1.0)*r21*x797*x798))+((r20*x797*x802))+(((-1.0)*x814))+py+(((-1.0)*x801*x803))+(((-1.0)*r21*sj3*x799)));
evalcond[3]=(((r10*x797*x802))+(((-1.0)*r11*x797*x798))+(((-1.0)*x812))+((r12*sj4*x797))+(((-1.0)*x800*x801))+(((-1.0)*r11*sj3*x799))+x813);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x815=((1.0)*cj1);
IkReal x816=(sj4*sj5);
IkReal x817=(cj5*sj4);
IkReal x818=((1.0)*sj1);
IkReal x819=(sj1*x817);
IkReal x820=(cj4*x818);
if( IKabs((((r20*x819))+(((-1.0)*r11*x815*x816))+(((-1.0)*r22*x820))+(((-1.0)*r21*x816*x818))+((cj1*r10*x817))+(((-1.0)*cj4*r12*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x816))+(((-1.0)*r11*x816*x818))+(((-1.0)*r12*x820))+((r10*x819))+(((-1.0)*r20*x815*x817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x819))+(((-1.0)*r11*x815*x816))+(((-1.0)*r22*x820))+(((-1.0)*r21*x816*x818))+((cj1*r10*x817))+(((-1.0)*cj4*r12*x815))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x816))+(((-1.0)*r11*x816*x818))+(((-1.0)*r12*x820))+((r10*x819))+(((-1.0)*r20*x815*x817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x819))+(((-1.0)*r11*x815*x816))+(((-1.0)*r22*x820))+(((-1.0)*r21*x816*x818))+((cj1*r10*x817))+(((-1.0)*cj4*r12*x815))), (((cj1*cj4*r22))+((cj1*r21*x816))+(((-1.0)*r11*x816*x818))+(((-1.0)*r12*x820))+((r10*x819))+(((-1.0)*r20*x815*x817))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x821=IKcos(j2);
IkReal x822=IKsin(j2);
IkReal x823=(cj3*cj4);
IkReal x824=(r21*sj5);
IkReal x825=((0.33655)*sj1);
IkReal x826=((1.0)*sj4);
IkReal x827=((1.0)*cj5);
IkReal x828=((0.14105)*cj5);
IkReal x829=((1.0)*sj1);
IkReal x830=(cj5*sj4);
IkReal x831=((1.0)*cj4);
IkReal x832=(r10*sj5);
IkReal x833=(r11*sj5);
IkReal x834=(r20*sj5);
IkReal x835=(cj5*sj3);
IkReal x836=(cj1*x821);
IkReal x837=(cj1*x822);
IkReal x838=(x821*x829);
IkReal x839=((1.0)*x837);
IkReal x840=(x838+x839);
evalcond[0]=((((-1.0)*x822*x829))+(((-1.0)*x824*x826))+((r20*x830))+(((-1.0)*r22*x831))+x836);
evalcond[1]=((((-1.0)*x826*x833))+((r10*x830))+(((-1.0)*x840))+(((-1.0)*r12*x831)));
evalcond[2]=(((r21*x828))+(((0.14105)*x834))+(((-1.0)*pz))+((x822*x825))+(((-0.4445)*cj1))+(((-0.33655)*x836)));
evalcond[3]=(((x821*x825))+(((0.33655)*x837))+(((0.14105)*x832))+(((-1.0)*py))+(((0.4445)*sj1))+((r11*x828)));
evalcond[4]=(((sj1*x822))+(((-1.0)*r10*x823*x827))+((x823*x833))+(((-1.0)*x836))+(((-1.0)*cj3*r12*x826))+((r11*x835))+((sj3*x832)));
evalcond[5]=((((-1.0)*cj3*r22*x826))+(((-1.0)*r20*x823*x827))+(((-1.0)*x840))+((r21*x835))+((x823*x824))+((sj3*x834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x841=((1.0)*r11);
IkReal x842=((1.0)*sj5);
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x842))+(((-1.0)*cj5*x841)))),IkReal(((((-1.0)*cj4*sj5*x841))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x842))+(((-1.0)*cj4*r22)))),-1);
if(!x844.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x843.value)+(((1.5707963267949)*(x844.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x845=IKsin(j3);
IkReal x846=IKcos(j3);
IkReal x847=(r02*sj4);
IkReal x848=(cj4*cj5);
IkReal x849=(cj4*sj5);
IkReal x850=(cj5*r01);
IkReal x851=(r00*sj5);
IkReal x852=((1.0)*x846);
IkReal x853=((1.0)*x845);
evalcond[0]=(((x845*x850))+((x845*x851))+(((-1.0)*x847*x852))+(((-1.0)*r00*x848*x852))+((r01*x846*x849)));
evalcond[1]=((((-1.0)*r20*x848*x853))+(((-1.0)*cj5*r21*x852))+(((-1.0)*r22*sj4*x853))+((r21*x845*x849))+(((-1.0)*r20*sj5*x852)));
evalcond[2]=(((r11*x845*x849))+(((-1.0)*cj5*r11*x852))+(((-1.0)*r10*sj5*x852))+(((-1.0)*r10*x848*x853))+(((-1.0)*r12*sj4*x853)));
evalcond[3]=((1.0)+((r01*x845*x849))+(((-1.0)*x850*x852))+(((-1.0)*x847*x853))+(((-1.0)*r00*x848*x853))+(((-1.0)*x851*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x854=((0.317322834645669)*cj5);
IkReal x855=((0.757142857142857)*cj4);
IkReal x856=((0.317322834645669)*sj5);
IkReal x857=((0.757142857142857)*cj5*sj4);
IkReal x858=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x854))+(((2.24971878515186)*py))+((r12*x855))+((r11*x858))+(((-1.0)*r10*x857))+(((-1.0)*r10*x856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x855))+((r21*x854))+(((-1.0)*r21*x858))+((r20*x856))+((r20*x857))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x854))+(((2.24971878515186)*py))+((r12*x855))+((r11*x858))+(((-1.0)*r10*x857))+(((-1.0)*r10*x856))))+IKsqr(((((-1.0)*r22*x855))+((r21*x854))+(((-1.0)*r21*x858))+((r20*x856))+((r20*x857))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x854))+(((2.24971878515186)*py))+((r12*x855))+((r11*x858))+(((-1.0)*r10*x857))+(((-1.0)*r10*x856))), ((((-1.0)*r22*x855))+((r21*x854))+(((-1.0)*r21*x858))+((r20*x856))+((r20*x857))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x859=((1.0)*pz);
IkReal x860=((0.14105)*cj5);
IkReal x861=((0.33655)*cj3);
IkReal x862=(cj4*sj5);
IkReal x863=((0.33655)*cj5);
IkReal x864=(r10*sj5);
IkReal x865=((0.33655)*sj3);
IkReal x866=(cj4*cj5);
IkReal x867=(r20*sj5);
IkReal x868=((0.33655)*cj4);
IkReal x869=((0.14105)*x864);
IkReal x870=((0.4445)*(IKsin(j1)));
IkReal x871=(r11*x860);
IkReal x872=(r21*x860);
IkReal x873=((0.14105)*x867);
IkReal x874=((0.4445)*(IKcos(j1)));
IkReal x875=((0.33655)*sj4*sj5);
IkReal x876=(x859+x874);
IkReal x877=(x872+x873);
IkReal x878=(x869+x870+x871);
evalcond[0]=((((-1.0)*py))+x878+(((-1.0)*r11*x875))+((r10*sj4*x863))+(((-1.0)*r12*x868)));
evalcond[1]=((((-1.0)*r21*x875))+x877+((r20*sj4*x863))+(((-1.0)*r22*x868))+(((-1.0)*x876)));
evalcond[2]=((((-1.0)*x865*x867))+((r20*x861*x866))+((r22*sj4*x861))+(((-1.0)*r21*x861*x862))+py+(((-1.0)*r21*sj3*x863))+(((-1.0)*x878)));
evalcond[3]=(((r12*sj4*x861))+(((-1.0)*r11*x861*x862))+((r10*x861*x866))+(((-1.0)*x864*x865))+(((-1.0)*r11*sj3*x863))+x877+(((-1.0)*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x879=((1.0)*cj1);
IkReal x880=(sj4*sj5);
IkReal x881=(cj5*sj4);
IkReal x882=((1.0)*sj1);
IkReal x883=(sj1*x881);
IkReal x884=(cj4*x882);
if( IKabs((((r20*x883))+(((-1.0)*r21*x880*x882))+((cj1*r10*x881))+(((-1.0)*r22*x884))+(((-1.0)*r11*x879*x880))+(((-1.0)*cj4*r12*x879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x880))+((r10*x883))+(((-1.0)*r12*x884))+(((-1.0)*r11*x880*x882))+(((-1.0)*r20*x879*x881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x883))+(((-1.0)*r21*x880*x882))+((cj1*r10*x881))+(((-1.0)*r22*x884))+(((-1.0)*r11*x879*x880))+(((-1.0)*cj4*r12*x879))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x880))+((r10*x883))+(((-1.0)*r12*x884))+(((-1.0)*r11*x880*x882))+(((-1.0)*r20*x879*x881))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x883))+(((-1.0)*r21*x880*x882))+((cj1*r10*x881))+(((-1.0)*r22*x884))+(((-1.0)*r11*x879*x880))+(((-1.0)*cj4*r12*x879))), (((cj1*cj4*r22))+((cj1*r21*x880))+((r10*x883))+(((-1.0)*r12*x884))+(((-1.0)*r11*x880*x882))+(((-1.0)*r20*x879*x881))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x885=IKcos(j2);
IkReal x886=IKsin(j2);
IkReal x887=(cj3*cj4);
IkReal x888=(r21*sj5);
IkReal x889=((0.33655)*sj1);
IkReal x890=((1.0)*sj4);
IkReal x891=((1.0)*cj5);
IkReal x892=((0.14105)*cj5);
IkReal x893=((1.0)*sj1);
IkReal x894=(cj5*sj4);
IkReal x895=((1.0)*cj4);
IkReal x896=(r10*sj5);
IkReal x897=(r11*sj5);
IkReal x898=(r20*sj5);
IkReal x899=(cj5*sj3);
IkReal x900=(cj1*x885);
IkReal x901=(cj1*x886);
IkReal x902=(x885*x893);
IkReal x903=((1.0)*x901);
IkReal x904=(x902+x903);
evalcond[0]=(((r20*x894))+(((-1.0)*x888*x890))+(((-1.0)*r22*x895))+x900+(((-1.0)*x886*x893)));
evalcond[1]=((((-1.0)*x904))+((r10*x894))+(((-1.0)*r12*x895))+(((-1.0)*x890*x897)));
evalcond[2]=(((x886*x889))+(((0.14105)*x898))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x900))+((r21*x892)));
evalcond[3]=((((0.14105)*x896))+((r11*x892))+(((-1.0)*py))+(((0.4445)*sj1))+(((0.33655)*x901))+((x885*x889)));
evalcond[4]=(((sj1*x886))+((r11*x899))+((sj3*x896))+(((-1.0)*x900))+(((-1.0)*cj3*r12*x890))+(((-1.0)*r10*x887*x891))+((x887*x897)));
evalcond[5]=(((x887*x888))+(((-1.0)*x904))+(((-1.0)*cj3*r22*x890))+((sj3*x898))+((r21*x899))+(((-1.0)*r20*x887*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x905=((1.0)*r21);
CheckValue<IkReal> x906=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x905))+(((-1.0)*r20*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x905))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x906.value)))+(x907.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x908=IKsin(j3);
IkReal x909=IKcos(j3);
IkReal x910=(r02*sj4);
IkReal x911=(cj4*cj5);
IkReal x912=(cj4*sj5);
IkReal x913=(cj5*r01);
IkReal x914=(r00*sj5);
IkReal x915=((1.0)*x909);
IkReal x916=((1.0)*x908);
evalcond[0]=(((r01*x909*x912))+(((-1.0)*r00*x911*x915))+(((-1.0)*x910*x915))+((x908*x914))+((x908*x913)));
evalcond[1]=((((-1.0)*r20*sj5*x915))+(((-1.0)*cj5*r21*x915))+((r21*x908*x912))+(((-1.0)*r22*sj4*x916))+(((-1.0)*r20*x911*x916)));
evalcond[2]=((((-1.0)*cj5*r11*x915))+((r11*x908*x912))+(((-1.0)*r12*sj4*x916))+(((-1.0)*r10*sj5*x915))+(((-1.0)*r10*x911*x916)));
evalcond[3]=((1.0)+(((-1.0)*x913*x915))+(((-1.0)*r00*x911*x916))+(((-1.0)*x910*x916))+((r01*x908*x912))+(((-1.0)*x914*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x917=((0.317322834645669)*cj5);
IkReal x918=((0.757142857142857)*cj4);
IkReal x919=((0.317322834645669)*sj5);
IkReal x920=((0.757142857142857)*cj5*sj4);
IkReal x921=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r10*x920))+(((2.24971878515186)*py))+((r12*x918))+(((-1.0)*r11*x917))+((r11*x921))+(((-1.0)*r10*x919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x918))+(((-1.0)*r21*x921))+((r20*x919))+((r20*x920))+((r21*x917))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x920))+(((2.24971878515186)*py))+((r12*x918))+(((-1.0)*r11*x917))+((r11*x921))+(((-1.0)*r10*x919))))+IKsqr(((((-1.0)*r22*x918))+(((-1.0)*r21*x921))+((r20*x919))+((r20*x920))+((r21*x917))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x920))+(((2.24971878515186)*py))+((r12*x918))+(((-1.0)*r11*x917))+((r11*x921))+(((-1.0)*r10*x919))), ((((-1.0)*r22*x918))+(((-1.0)*r21*x921))+((r20*x919))+((r20*x920))+((r21*x917))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x922=((1.0)*pz);
IkReal x923=((0.14105)*cj5);
IkReal x924=((0.33655)*cj3);
IkReal x925=(cj4*sj5);
IkReal x926=((0.33655)*cj5);
IkReal x927=(r10*sj5);
IkReal x928=((0.33655)*sj3);
IkReal x929=(cj4*cj5);
IkReal x930=(r20*sj5);
IkReal x931=((0.33655)*cj4);
IkReal x932=((0.14105)*x927);
IkReal x933=((0.4445)*(IKsin(j1)));
IkReal x934=(r11*x923);
IkReal x935=(r21*x923);
IkReal x936=((0.14105)*x930);
IkReal x937=((0.4445)*(IKcos(j1)));
IkReal x938=((0.33655)*sj4*sj5);
IkReal x939=(x937+x922);
IkReal x940=(x935+x936);
IkReal x941=(x934+x933+x932);
evalcond[0]=((((-1.0)*r11*x938))+(((-1.0)*r12*x931))+(((-1.0)*py))+x941+((r10*sj4*x926)));
evalcond[1]=(((r20*sj4*x926))+(((-1.0)*r21*x938))+(((-1.0)*r22*x931))+x940+(((-1.0)*x939)));
evalcond[2]=((((-1.0)*x941))+(((-1.0)*r21*sj3*x926))+(((-1.0)*r21*x924*x925))+(((-1.0)*x928*x930))+py+((r22*sj4*x924))+((r20*x924*x929)));
evalcond[3]=(((r10*x924*x929))+(((-1.0)*r11*sj3*x926))+(((-1.0)*x927*x928))+(((-1.0)*r11*x924*x925))+x940+((r12*sj4*x924))+(((-1.0)*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x942=((1.0)*cj1);
IkReal x943=(sj4*sj5);
IkReal x944=(cj5*sj4);
IkReal x945=((1.0)*sj1);
IkReal x946=(sj1*x944);
IkReal x947=(cj4*x945);
if( IKabs((((cj1*r10*x944))+(((-1.0)*r11*x942*x943))+(((-1.0)*r21*x943*x945))+(((-1.0)*r22*x947))+(((-1.0)*cj4*r12*x942))+((r20*x946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r12*x947))+(((-1.0)*r11*x943*x945))+((cj1*r21*x943))+(((-1.0)*r20*x942*x944))+((r10*x946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x944))+(((-1.0)*r11*x942*x943))+(((-1.0)*r21*x943*x945))+(((-1.0)*r22*x947))+(((-1.0)*cj4*r12*x942))+((r20*x946))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r12*x947))+(((-1.0)*r11*x943*x945))+((cj1*r21*x943))+(((-1.0)*r20*x942*x944))+((r10*x946))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x944))+(((-1.0)*r11*x942*x943))+(((-1.0)*r21*x943*x945))+(((-1.0)*r22*x947))+(((-1.0)*cj4*r12*x942))+((r20*x946))), (((cj1*cj4*r22))+(((-1.0)*r12*x947))+(((-1.0)*r11*x943*x945))+((cj1*r21*x943))+(((-1.0)*r20*x942*x944))+((r10*x946))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x948=IKcos(j2);
IkReal x949=IKsin(j2);
IkReal x950=(cj3*cj4);
IkReal x951=(r21*sj5);
IkReal x952=((0.33655)*sj1);
IkReal x953=((1.0)*sj4);
IkReal x954=((1.0)*cj5);
IkReal x955=((0.14105)*cj5);
IkReal x956=((1.0)*sj1);
IkReal x957=(cj5*sj4);
IkReal x958=((1.0)*cj4);
IkReal x959=(r10*sj5);
IkReal x960=(r11*sj5);
IkReal x961=(r20*sj5);
IkReal x962=(cj5*sj3);
IkReal x963=(cj1*x948);
IkReal x964=(cj1*x949);
IkReal x965=(x948*x956);
IkReal x966=((1.0)*x964);
IkReal x967=(x966+x965);
evalcond[0]=(((r20*x957))+(((-1.0)*r22*x958))+(((-1.0)*x949*x956))+(((-1.0)*x951*x953))+x963);
evalcond[1]=((((-1.0)*x953*x960))+(((-1.0)*r12*x958))+(((-1.0)*x967))+((r10*x957)));
evalcond[2]=((((0.14105)*x961))+((x949*x952))+(((-0.33655)*x963))+(((-1.0)*pz))+((r21*x955))+(((-0.4445)*cj1)));
evalcond[3]=(((x948*x952))+(((-1.0)*py))+(((0.33655)*x964))+((r11*x955))+(((0.4445)*sj1))+(((0.14105)*x959)));
evalcond[4]=(((sj1*x949))+(((-1.0)*x963))+(((-1.0)*r10*x950*x954))+((r11*x962))+((sj3*x959))+(((-1.0)*cj3*r12*x953))+((x950*x960)));
evalcond[5]=((((-1.0)*r20*x950*x954))+(((-1.0)*cj3*r22*x953))+((r21*x962))+((sj3*x961))+(((-1.0)*x967))+((x950*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x968=((1.0)*sj0);
IkReal x969=(cj4*cj5);
IkReal x970=(cj0*r00);
IkReal x971=((1.0)*cj5);
IkReal x972=(cj4*sj5);
IkReal x973=(cj0*r01);
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x971)))),-1);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((((-1.0)*x971*x973))+(((-1.0)*sj5*x970))+(((-1.0)*cj5*r11*x968))+(((-1.0)*r10*sj5*x968)))),IkReal((((x969*x970))+((r12*sj0*sj4))+(((-1.0)*r11*x968*x972))+(((-1.0)*x972*x973))+((r10*sj0*x969))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x976=IKsin(j3);
IkReal x977=IKcos(j3);
IkReal x978=((1.0)*cj5);
IkReal x979=(cj4*x976);
IkReal x980=((1.0)*sj5*x977);
IkReal x981=((1.0)*sj4*x976);
evalcond[0]=((((-1.0)*r20*x980))+(((-1.0)*r21*x977*x978))+((r21*sj5*x979))+(((-1.0)*r20*x978*x979))+(((-1.0)*r22*x981)));
evalcond[1]=((((-1.0)*r10*x980))+(((-1.0)*r11*x977*x978))+cj0+((r11*sj5*x979))+(((-1.0)*r12*x981))+(((-1.0)*r10*x978*x979)));
evalcond[2]=((((-1.0)*r00*x980))+(((-1.0)*sj0))+((r01*sj5*x979))+(((-1.0)*r00*x978*x979))+(((-1.0)*r01*x977*x978))+(((-1.0)*r02*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x982=((0.317322834645669)*cj5);
IkReal x983=((0.757142857142857)*cj4);
IkReal x984=((0.317322834645669)*sj5);
IkReal x985=((0.757142857142857)*cj5*sj4);
IkReal x986=((0.757142857142857)*sj4*sj5);
if( IKabs((((r11*x982))+((r10*x984))+((r10*x985))+(((-1.0)*r12*x983))+(((-1.0)*r11*x986))+(((-2.24971878515186)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x986))+((r21*x982))+((r20*x984))+((r20*x985))+(((-1.0)*r22*x983))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x982))+((r10*x984))+((r10*x985))+(((-1.0)*r12*x983))+(((-1.0)*r11*x986))+(((-2.24971878515186)*py))))+IKsqr(((((-1.0)*r21*x986))+((r21*x982))+((r20*x984))+((r20*x985))+(((-1.0)*r22*x983))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x982))+((r10*x984))+((r10*x985))+(((-1.0)*r12*x983))+(((-1.0)*r11*x986))+(((-2.24971878515186)*py))), ((((-1.0)*r21*x986))+((r21*x982))+((r20*x984))+((r20*x985))+(((-1.0)*r22*x983))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x987=((0.14105)*cj5);
IkReal x988=((0.33655)*cj3);
IkReal x989=(cj4*sj5);
IkReal x990=((0.33655)*cj5);
IkReal x991=(r10*sj5);
IkReal x992=((0.33655)*sj3);
IkReal x993=(cj4*cj5);
IkReal x994=(r20*sj5);
IkReal x995=((0.33655)*cj4);
IkReal x996=((0.4445)*(IKsin(j1)));
IkReal x997=((0.14105)*x991);
IkReal x998=(r11*x987);
IkReal x999=((0.4445)*(IKcos(j1)));
IkReal x1000=(r21*x987);
IkReal x1001=((0.14105)*x994);
IkReal x1002=((0.33655)*sj4*sj5);
IkReal x1003=(py+x996);
IkReal x1004=(x1001+x1000);
IkReal x1005=(x997+x998);
evalcond[0]=(((r12*x995))+x1003+(((-1.0)*x1005))+(((-1.0)*r10*sj4*x990))+((r11*x1002)));
evalcond[1]=((((-1.0)*r22*x995))+x1004+((r20*sj4*x990))+(((-1.0)*r21*x1002))+(((-1.0)*pz))+(((-1.0)*x999)));
evalcond[2]=(x1003+(((-1.0)*x1005))+((x992*x994))+((r21*x988*x989))+(((-1.0)*r20*x988*x993))+((r21*sj3*x990))+(((-1.0)*r22*sj4*x988)));
evalcond[3]=(((r10*x988*x993))+(((-1.0)*r11*x988*x989))+(((-1.0)*x1004))+(((-1.0)*x991*x992))+(((-1.0)*r11*sj3*x990))+pz+((r12*sj4*x988))+x999);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1006=(cj4*r12);
IkReal x1007=(cj4*r22);
IkReal x1008=(cj1*sj4);
IkReal x1009=(r11*sj5);
IkReal x1010=(r21*sj5);
IkReal x1011=((1.0)*sj1);
IkReal x1012=(sj1*sj4);
IkReal x1013=(cj5*r20);
IkReal x1014=((1.0)*cj5*r10);
if( IKabs((((x1008*x1009))+(((-1.0)*x1008*x1014))+(((-1.0)*sj4*x1010*x1011))+((x1012*x1013))+((cj1*x1006))+(((-1.0)*x1007*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1009*x1012))+(((-1.0)*x1008*x1013))+((sj1*x1006))+(((-1.0)*cj5*r10*sj4*x1011))+((cj1*x1007))+((x1008*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1008*x1009))+(((-1.0)*x1008*x1014))+(((-1.0)*sj4*x1010*x1011))+((x1012*x1013))+((cj1*x1006))+(((-1.0)*x1007*x1011))))+IKsqr((((x1009*x1012))+(((-1.0)*x1008*x1013))+((sj1*x1006))+(((-1.0)*cj5*r10*sj4*x1011))+((cj1*x1007))+((x1008*x1010))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1008*x1009))+(((-1.0)*x1008*x1014))+(((-1.0)*sj4*x1010*x1011))+((x1012*x1013))+((cj1*x1006))+(((-1.0)*x1007*x1011))), (((x1009*x1012))+(((-1.0)*x1008*x1013))+((sj1*x1006))+(((-1.0)*cj5*r10*sj4*x1011))+((cj1*x1007))+((x1008*x1010))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1015=IKcos(j2);
IkReal x1016=IKsin(j2);
IkReal x1017=(cj3*cj4);
IkReal x1018=(r21*sj5);
IkReal x1019=((0.33655)*sj1);
IkReal x1020=((1.0)*sj4);
IkReal x1021=((1.0)*cj5);
IkReal x1022=((0.14105)*cj5);
IkReal x1023=((1.0)*sj1);
IkReal x1024=(cj5*sj4);
IkReal x1025=((1.0)*cj4);
IkReal x1026=((0.14105)*sj5);
IkReal x1027=(r11*sj5);
IkReal x1028=(cj5*sj3);
IkReal x1029=(sj3*sj5);
IkReal x1030=(cj1*x1015);
IkReal x1031=(cj1*x1016);
IkReal x1032=(x1016*x1023);
evalcond[0]=((((-1.0)*r12*x1025))+x1031+((sj1*x1015))+(((-1.0)*x1020*x1027))+((r10*x1024)));
evalcond[1]=((((-1.0)*r22*x1025))+((r20*x1024))+(((-1.0)*x1032))+x1030+(((-1.0)*x1018*x1020)));
evalcond[2]=(((r20*x1026))+((x1016*x1019))+((r21*x1022))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x1030)));
evalcond[3]=((((-0.4445)*sj1))+(((-1.0)*x1015*x1019))+(((-1.0)*py))+((r11*x1022))+(((-0.33655)*x1031))+((r10*x1026)));
evalcond[4]=(((x1017*x1027))+(((-1.0)*x1032))+x1030+(((-1.0)*r10*x1017*x1021))+((r11*x1028))+(((-1.0)*cj3*r12*x1020))+((r10*x1029)));
evalcond[5]=(((r20*x1029))+((r21*x1028))+(((-1.0)*x1031))+((x1017*x1018))+(((-1.0)*cj3*r22*x1020))+(((-1.0)*x1015*x1023))+(((-1.0)*r20*x1017*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1033=((0.317322834645669)*cj5);
IkReal x1034=((0.757142857142857)*cj4);
IkReal x1035=((0.317322834645669)*sj5);
IkReal x1036=((0.757142857142857)*cj5*sj4);
IkReal x1037=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r10*x1035))+(((-1.0)*r10*x1036))+(((2.24971878515186)*py))+(((-1.0)*r11*x1033))+((r11*x1037))+((r12*x1034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1037))+((r21*x1033))+((r20*x1036))+((r20*x1035))+(((-1.0)*r22*x1034))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1035))+(((-1.0)*r10*x1036))+(((2.24971878515186)*py))+(((-1.0)*r11*x1033))+((r11*x1037))+((r12*x1034))))+IKsqr(((((-1.0)*r21*x1037))+((r21*x1033))+((r20*x1036))+((r20*x1035))+(((-1.0)*r22*x1034))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1035))+(((-1.0)*r10*x1036))+(((2.24971878515186)*py))+(((-1.0)*r11*x1033))+((r11*x1037))+((r12*x1034))), ((((-1.0)*r21*x1037))+((r21*x1033))+((r20*x1036))+((r20*x1035))+(((-1.0)*r22*x1034))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1038=((1.0)*pz);
IkReal x1039=((0.14105)*cj5);
IkReal x1040=((0.33655)*cj3);
IkReal x1041=(cj4*sj5);
IkReal x1042=((0.33655)*cj5);
IkReal x1043=(r10*sj5);
IkReal x1044=((0.33655)*sj3);
IkReal x1045=(cj4*cj5);
IkReal x1046=(r20*sj5);
IkReal x1047=((0.33655)*cj4);
IkReal x1048=((0.14105)*x1043);
IkReal x1049=((0.4445)*(IKsin(j1)));
IkReal x1050=(r11*x1039);
IkReal x1051=(r21*x1039);
IkReal x1052=((0.14105)*x1046);
IkReal x1053=((0.4445)*(IKcos(j1)));
IkReal x1054=((0.33655)*sj4*sj5);
IkReal x1055=(x1053+x1038);
IkReal x1056=(x1051+x1052);
IkReal x1057=(x1050+x1049+x1048);
evalcond[0]=(x1057+((r10*sj4*x1042))+(((-1.0)*r12*x1047))+(((-1.0)*py))+(((-1.0)*r11*x1054)));
evalcond[1]=((((-1.0)*x1055))+((r20*sj4*x1042))+x1056+(((-1.0)*r22*x1047))+(((-1.0)*r21*x1054)));
evalcond[2]=((((-1.0)*x1057))+((r20*x1040*x1045))+(((-1.0)*x1044*x1046))+(((-1.0)*r21*sj3*x1042))+((r22*sj4*x1040))+py+(((-1.0)*r21*x1040*x1041)));
evalcond[3]=((((-1.0)*x1055))+x1056+((r10*x1040*x1045))+((r12*sj4*x1040))+(((-1.0)*x1043*x1044))+(((-1.0)*r11*sj3*x1042))+(((-1.0)*r11*x1040*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1058=((1.0)*cj1);
IkReal x1059=(sj4*sj5);
IkReal x1060=(cj5*sj4);
IkReal x1061=((1.0)*sj1);
IkReal x1062=(sj1*x1060);
IkReal x1063=(cj4*x1061);
if( IKabs(((((-1.0)*r22*x1063))+(((-1.0)*cj4*r12*x1058))+((r20*x1062))+(((-1.0)*r21*x1059*x1061))+((cj1*r10*x1060))+(((-1.0)*r11*x1058*x1059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x1059))+(((-1.0)*r12*x1063))+(((-1.0)*r20*x1058*x1060))+(((-1.0)*r11*x1059*x1061))+((r10*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1063))+(((-1.0)*cj4*r12*x1058))+((r20*x1062))+(((-1.0)*r21*x1059*x1061))+((cj1*r10*x1060))+(((-1.0)*r11*x1058*x1059))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x1059))+(((-1.0)*r12*x1063))+(((-1.0)*r20*x1058*x1060))+(((-1.0)*r11*x1059*x1061))+((r10*x1062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1063))+(((-1.0)*cj4*r12*x1058))+((r20*x1062))+(((-1.0)*r21*x1059*x1061))+((cj1*r10*x1060))+(((-1.0)*r11*x1058*x1059))), (((cj1*cj4*r22))+((cj1*r21*x1059))+(((-1.0)*r12*x1063))+(((-1.0)*r20*x1058*x1060))+(((-1.0)*r11*x1059*x1061))+((r10*x1062))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1064=IKcos(j2);
IkReal x1065=IKsin(j2);
IkReal x1066=(cj3*cj4);
IkReal x1067=(r21*sj5);
IkReal x1068=((0.33655)*sj1);
IkReal x1069=((1.0)*sj4);
IkReal x1070=((1.0)*cj5);
IkReal x1071=((0.14105)*cj5);
IkReal x1072=((1.0)*sj1);
IkReal x1073=(cj5*sj4);
IkReal x1074=((1.0)*cj4);
IkReal x1075=(r10*sj5);
IkReal x1076=(r11*sj5);
IkReal x1077=(r20*sj5);
IkReal x1078=(cj5*sj3);
IkReal x1079=(cj1*x1064);
IkReal x1080=(cj1*x1065);
IkReal x1081=(x1064*x1072);
IkReal x1082=((1.0)*x1080);
IkReal x1083=(x1082+x1081);
evalcond[0]=(x1079+(((-1.0)*r22*x1074))+((r20*x1073))+(((-1.0)*x1067*x1069))+(((-1.0)*x1065*x1072)));
evalcond[1]=((((-1.0)*r12*x1074))+((r10*x1073))+(((-1.0)*x1083))+(((-1.0)*x1069*x1076)));
evalcond[2]=((((-0.33655)*x1079))+(((-1.0)*pz))+(((-0.4445)*cj1))+((r21*x1071))+((x1065*x1068))+(((0.14105)*x1077)));
evalcond[3]=((((0.33655)*x1080))+(((-1.0)*py))+(((0.4445)*sj1))+((x1064*x1068))+((r11*x1071))+(((0.14105)*x1075)));
evalcond[4]=(((sj3*x1075))+((x1066*x1076))+(((-1.0)*cj3*r12*x1069))+((sj1*x1065))+(((-1.0)*x1079))+(((-1.0)*r10*x1066*x1070))+((r11*x1078)));
evalcond[5]=((((-1.0)*r20*x1066*x1070))+((sj3*x1077))+((x1066*x1067))+(((-1.0)*cj3*r22*x1069))+((r21*x1078))+(((-1.0)*x1083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1084=((0.757142857142857)*sj4);
IkReal x1085=((0.757142857142857)*cj4);
IkReal x1086=((0.317322834645669)*cj5);
IkReal x1087=((0.317322834645669)*sj5);
if( IKabs(((((-1.0)*r01*sj5*x1084))+((r00*x1087))+((r01*x1086))+(((-1.0)*r02*x1085))+((cj5*r00*x1084))+(((-2.24971878515186)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1087))+(((-1.0)*r21*sj5*x1084))+(((-1.0)*r22*x1085))+(((-2.24971878515186)*pz))+((r21*x1086))+((cj5*r20*x1084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1084))+((r00*x1087))+((r01*x1086))+(((-1.0)*r02*x1085))+((cj5*r00*x1084))+(((-2.24971878515186)*px))))+IKsqr((((r20*x1087))+(((-1.0)*r21*sj5*x1084))+(((-1.0)*r22*x1085))+(((-2.24971878515186)*pz))+((r21*x1086))+((cj5*r20*x1084))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*sj5*x1084))+((r00*x1087))+((r01*x1086))+(((-1.0)*r02*x1085))+((cj5*r00*x1084))+(((-2.24971878515186)*px))), (((r20*x1087))+(((-1.0)*r21*sj5*x1084))+(((-1.0)*r22*x1085))+(((-2.24971878515186)*pz))+((r21*x1086))+((cj5*r20*x1084))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1088=((0.14105)*cj5);
IkReal x1089=((0.33655)*sj4);
IkReal x1090=(r01*sj5);
IkReal x1091=(cj5*r20);
IkReal x1092=(cj5*r00);
IkReal x1093=((0.14105)*sj5);
IkReal x1094=((0.33655)*sj3);
IkReal x1095=(r21*sj5);
IkReal x1096=((0.33655)*cj4);
IkReal x1097=((0.4445)*(IKsin(j1)));
IkReal x1098=(r00*x1093);
IkReal x1099=(r01*x1088);
IkReal x1100=((0.4445)*(IKcos(j1)));
IkReal x1101=(r21*x1088);
IkReal x1102=(r20*x1093);
IkReal x1103=(cj3*x1096);
IkReal x1104=(x1097+px);
IkReal x1105=(x1102+x1101);
IkReal x1106=(x1098+x1099);
evalcond[0]=(x1104+((x1089*x1090))+((r02*x1096))+(((-1.0)*x1089*x1092))+(((-1.0)*x1106)));
evalcond[1]=(x1105+((x1089*x1091))+(((-1.0)*x1089*x1095))+(((-1.0)*pz))+(((-1.0)*x1100))+(((-1.0)*r22*x1096)));
evalcond[2]=((((-1.0)*x1091*x1103))+x1104+(((-1.0)*cj3*r22*x1089))+((cj5*r21*x1094))+(((-1.0)*x1106))+((r20*sj5*x1094))+((x1095*x1103)));
evalcond[3]=(x1100+((x1092*x1103))+(((-1.0)*x1090*x1103))+pz+(((-1.0)*cj5*r01*x1094))+(((-1.0)*r00*sj5*x1094))+(((-1.0)*x1105))+((cj3*r02*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1107=(cj4*sj1);
IkReal x1108=(cj1*sj4);
IkReal x1109=((1.0)*cj5);
IkReal x1110=(r21*sj5);
IkReal x1111=(cj1*cj4);
IkReal x1112=(sj1*sj4);
IkReal x1113=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x1110*x1112))+((r01*sj5*x1108))+(((-1.0)*r00*x1108*x1109))+((cj5*r20*x1112))+(((-1.0)*r22*x1107))+((r02*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1107))+(((-1.0)*r20*x1108*x1109))+((x1108*x1110))+((r01*sj5*x1112))+((r22*x1111))+(((-1.0)*r00*x1109*x1112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1110*x1112))+((r01*sj5*x1108))+(((-1.0)*r00*x1108*x1109))+((cj5*r20*x1112))+(((-1.0)*r22*x1107))+((r02*x1111))))+IKsqr((((r02*x1107))+(((-1.0)*r20*x1108*x1109))+((x1108*x1110))+((r01*sj5*x1112))+((r22*x1111))+(((-1.0)*r00*x1109*x1112))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1110*x1112))+((r01*sj5*x1108))+(((-1.0)*r00*x1108*x1109))+((cj5*r20*x1112))+(((-1.0)*r22*x1107))+((r02*x1111))), (((r02*x1107))+(((-1.0)*r20*x1108*x1109))+((x1108*x1110))+((r01*sj5*x1112))+((r22*x1111))+(((-1.0)*r00*x1109*x1112))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1114=IKcos(j2);
IkReal x1115=IKsin(j2);
IkReal x1116=(cj5*r01);
IkReal x1117=((1.0)*cj3);
IkReal x1118=(cj5*r00);
IkReal x1119=((0.33655)*sj1);
IkReal x1120=((1.0)*sj1);
IkReal x1121=(cj5*r21);
IkReal x1122=(r00*sj5);
IkReal x1123=(cj5*r20);
IkReal x1124=((1.0)*cj4);
IkReal x1125=(r20*sj5);
IkReal x1126=(cj1*x1114);
IkReal x1127=(cj3*cj4*sj5);
IkReal x1128=((1.0)*sj4*sj5);
IkReal x1129=(cj1*x1115);
IkReal x1130=(x1115*x1120);
evalcond[0]=(x1129+((sj4*x1118))+((sj1*x1114))+(((-1.0)*r02*x1124))+(((-1.0)*r01*x1128)));
evalcond[1]=(x1126+((sj4*x1123))+(((-1.0)*x1130))+(((-1.0)*r22*x1124))+(((-1.0)*r21*x1128)));
evalcond[2]=((((-0.33655)*x1126))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x1121))+(((0.14105)*x1125))+((x1115*x1119)));
evalcond[3]=((((-0.33655)*x1129))+(((-1.0)*x1114*x1119))+(((-0.4445)*sj1))+(((-1.0)*px))+(((0.14105)*x1116))+(((0.14105)*x1122)));
evalcond[4]=(x1126+((sj3*x1116))+((r01*x1127))+(((-1.0)*cj4*x1117*x1118))+(((-1.0)*x1130))+((sj3*x1122))+(((-1.0)*r02*sj4*x1117)));
evalcond[5]=((((-1.0)*x1114*x1120))+((r21*x1127))+(((-1.0)*r22*sj4*x1117))+(((-1.0)*x1129))+((sj3*x1121))+((sj3*x1125))+(((-1.0)*cj4*x1117*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1131=((0.757142857142857)*sj4);
IkReal x1132=((0.317322834645669)*sj5);
IkReal x1133=((0.317322834645669)*cj5);
IkReal x1134=((0.757142857142857)*cj4);
if( IKabs(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x1131))+((r02*x1134))+(((-1.0)*r01*x1133))+(((-1.0)*r00*x1132))+((r01*sj5*x1131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj5*x1131))+((r21*x1133))+((cj5*r20*x1131))+(((-1.0)*r22*x1134))+((r20*x1132))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x1131))+((r02*x1134))+(((-1.0)*r01*x1133))+(((-1.0)*r00*x1132))+((r01*sj5*x1131))))+IKsqr(((((-1.0)*r21*sj5*x1131))+((r21*x1133))+((cj5*r20*x1131))+(((-1.0)*r22*x1134))+((r20*x1132))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*px))+(((-1.0)*cj5*r00*x1131))+((r02*x1134))+(((-1.0)*r01*x1133))+(((-1.0)*r00*x1132))+((r01*sj5*x1131))), ((((-1.0)*r21*sj5*x1131))+((r21*x1133))+((cj5*r20*x1131))+(((-1.0)*r22*x1134))+((r20*x1132))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1135=((1.0)*pz);
IkReal x1136=((0.14105)*cj5);
IkReal x1137=((0.33655)*sj4);
IkReal x1138=(r01*sj5);
IkReal x1139=(cj5*r20);
IkReal x1140=(cj5*r00);
IkReal x1141=((0.14105)*sj5);
IkReal x1142=((0.33655)*sj3);
IkReal x1143=(r21*sj5);
IkReal x1144=((0.33655)*cj4);
IkReal x1145=(r00*x1141);
IkReal x1146=((0.4445)*(IKsin(j1)));
IkReal x1147=(r01*x1136);
IkReal x1148=(r21*x1136);
IkReal x1149=(r20*x1141);
IkReal x1150=((0.4445)*(IKcos(j1)));
IkReal x1151=(cj3*x1144);
IkReal x1152=(x1150+x1135);
IkReal x1153=(x1148+x1149);
IkReal x1154=(x1146+x1147+x1145);
evalcond[0]=(((x1137*x1140))+x1154+(((-1.0)*r02*x1144))+(((-1.0)*px))+(((-1.0)*x1137*x1138)));
evalcond[1]=(x1153+(((-1.0)*x1137*x1143))+(((-1.0)*x1152))+((x1137*x1139))+(((-1.0)*r22*x1144)));
evalcond[2]=(((cj3*r22*x1137))+(((-1.0)*x1154))+(((-1.0)*x1143*x1151))+px+(((-1.0)*r20*sj5*x1142))+(((-1.0)*cj5*r21*x1142))+((x1139*x1151)));
evalcond[3]=(x1153+(((-1.0)*x1138*x1151))+(((-1.0)*x1152))+((x1140*x1151))+(((-1.0)*cj5*r01*x1142))+(((-1.0)*r00*sj5*x1142))+((cj3*r02*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1155=((1.0)*r01);
IkReal x1156=(sj1*sj4);
IkReal x1157=(cj5*r00);
IkReal x1158=(cj1*cj4);
IkReal x1159=(cj5*r20);
IkReal x1160=(cj1*sj4);
IkReal x1161=(sj5*x1160);
IkReal x1162=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x1156))+((x1157*x1160))+(((-1.0)*r22*x1162))+(((-1.0)*r02*x1158))+(((-1.0)*x1155*x1161))+((x1156*x1159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1162))+((r22*x1158))+(((-1.0)*x1159*x1160))+((r21*x1161))+(((-1.0)*sj5*x1155*x1156))+((x1156*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x1156))+((x1157*x1160))+(((-1.0)*r22*x1162))+(((-1.0)*r02*x1158))+(((-1.0)*x1155*x1161))+((x1156*x1159))))+IKsqr(((((-1.0)*r02*x1162))+((r22*x1158))+(((-1.0)*x1159*x1160))+((r21*x1161))+(((-1.0)*sj5*x1155*x1156))+((x1156*x1157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x1156))+((x1157*x1160))+(((-1.0)*r22*x1162))+(((-1.0)*r02*x1158))+(((-1.0)*x1155*x1161))+((x1156*x1159))), ((((-1.0)*r02*x1162))+((r22*x1158))+(((-1.0)*x1159*x1160))+((r21*x1161))+(((-1.0)*sj5*x1155*x1156))+((x1156*x1157))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1163=IKcos(j2);
IkReal x1164=IKsin(j2);
IkReal x1165=(cj5*r01);
IkReal x1166=((1.0)*cj3);
IkReal x1167=(cj5*r00);
IkReal x1168=((0.33655)*sj1);
IkReal x1169=((1.0)*sj1);
IkReal x1170=(cj5*r21);
IkReal x1171=(r00*sj5);
IkReal x1172=(cj5*r20);
IkReal x1173=((1.0)*cj4);
IkReal x1174=(r20*sj5);
IkReal x1175=(cj1*x1163);
IkReal x1176=(cj3*cj4*sj5);
IkReal x1177=((1.0)*sj4*sj5);
IkReal x1178=(cj1*x1164);
IkReal x1179=(x1163*x1169);
IkReal x1180=((1.0)*x1178);
IkReal x1181=(x1180+x1179);
evalcond[0]=((((-1.0)*r21*x1177))+x1175+((sj4*x1172))+(((-1.0)*r22*x1173))+(((-1.0)*x1164*x1169)));
evalcond[1]=((((-1.0)*r02*x1173))+((sj4*x1167))+(((-1.0)*x1181))+(((-1.0)*r01*x1177)));
evalcond[2]=(((x1164*x1168))+(((-0.33655)*x1175))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x1174))+(((0.14105)*x1170)));
evalcond[3]=(((x1163*x1168))+(((0.33655)*x1178))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.14105)*x1171))+(((0.14105)*x1165)));
evalcond[4]=(((sj3*x1171))+((sj1*x1164))+(((-1.0)*r02*sj4*x1166))+((r01*x1176))+(((-1.0)*cj4*x1166*x1167))+((sj3*x1165))+(((-1.0)*x1175)));
evalcond[5]=(((sj3*x1174))+((sj3*x1170))+((r21*x1176))+(((-1.0)*r22*sj4*x1166))+(((-1.0)*x1181))+(((-1.0)*cj4*x1166*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1182=((0.33655)*cj0);
IkReal x1183=(cj5*sj4);
IkReal x1184=((0.14105)*cj0);
IkReal x1185=(sj4*sj5);
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(cj0,-2);
if(!x1186.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x1186.value)*((((cj4*r02*x1182))+(((-1.0)*r00*x1182*x1183))+(((-1.0)*r00*sj5*x1184))+(((-0.1016)*cj0*sj0))+(((-1.0)*cj5*r01*x1184))+((cj0*px))+((r01*x1182*x1185)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*r21*x1185))+(((-0.757142857142857)*cj4*r22))+(((0.317322834645669)*r20*sj5))+(((0.757142857142857)*r20*x1183))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x1186.value)*((((cj4*r02*x1182))+(((-1.0)*r00*x1182*x1183))+(((-1.0)*r00*sj5*x1184))+(((-0.1016)*cj0*sj0))+(((-1.0)*cj5*r01*x1184))+((cj0*px))+((r01*x1182*x1185))))))+IKsqr(((((-0.757142857142857)*r21*x1185))+(((-0.757142857142857)*cj4*r22))+(((0.317322834645669)*r20*sj5))+(((0.757142857142857)*r20*x1183))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x1186.value)*((((cj4*r02*x1182))+(((-1.0)*r00*x1182*x1183))+(((-1.0)*r00*sj5*x1184))+(((-0.1016)*cj0*sj0))+(((-1.0)*cj5*r01*x1184))+((cj0*px))+((r01*x1182*x1185))))), ((((-0.757142857142857)*r21*x1185))+(((-0.757142857142857)*cj4*r22))+(((0.317322834645669)*r20*sj5))+(((0.757142857142857)*r20*x1183))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1187=IKsin(j1);
IkReal x1188=IKcos(j1);
IkReal x1189=sj0*sj0;
IkReal x1190=cj0*cj0;
IkReal x1191=(cj3*r22);
IkReal x1192=((0.14105)*sj0);
IkReal x1193=(r20*sj5);
IkReal x1194=(cj5*r01);
IkReal x1195=(cj5*r10);
IkReal x1196=((0.33655)*sj4);
IkReal x1197=(cj5*sj0);
IkReal x1198=(r11*sj5);
IkReal x1199=((0.33655)*sj3);
IkReal x1200=(r21*sj5);
IkReal x1201=(r01*sj5);
IkReal x1202=(cj5*r00);
IkReal x1203=((0.14105)*cj5);
IkReal x1204=(cj5*r20);
IkReal x1205=(r10*sj5);
IkReal x1206=(r00*sj5);
IkReal x1207=(cj5*r11);
IkReal x1208=((0.1016)*sj0);
IkReal x1209=((0.33655)*cj4);
IkReal x1210=(cj5*r21);
IkReal x1211=((0.14105)*cj0);
IkReal x1212=(cj0*x1208);
IkReal x1213=(cj0*x1196);
IkReal x1214=((0.4445)*x1188);
IkReal x1215=(cj3*x1209);
IkReal x1216=(cj0*x1203);
IkReal x1217=((0.4445)*x1187);
IkReal x1218=(cj0*sj0*x1217);
evalcond[0]=((((-1.0)*x1196*x1200))+(((-1.0)*r22*x1209))+((r21*x1203))+(((-1.0)*pz))+(((0.14105)*x1193))+(((-1.0)*x1214))+((x1196*x1204)));
evalcond[1]=(x1212+((sj0*x1196*x1198))+((r12*sj0*x1209))+((x1189*x1217))+((py*sj0))+(((-1.0)*x1192*x1207))+(((-1.0)*x1192*x1205))+(((-1.0)*sj0*x1195*x1196)));
evalcond[2]=((((-1.0)*x1206*x1211))+((x1190*x1217))+(((-1.0)*x1202*x1213))+((x1201*x1213))+(((-1.0)*x1212))+((cj0*px))+((cj0*r02*x1209))+(((-1.0)*x1194*x1211)));
evalcond[3]=((((-1.0)*x1199*x1207))+(((-1.0)*x1199*x1205))+(((-1.0)*x1192*x1210))+(((-1.0)*x1198*x1215))+((cj3*r12*x1196))+((sj0*x1214))+((pz*sj0))+(((-1.0)*x1192*x1193))+((x1195*x1215)));
evalcond[4]=((((-1.0)*x1199*x1206))+(((-1.0)*x1194*x1199))+(((-1.0)*x1201*x1215))+((cj0*x1214))+((cj3*r02*x1196))+(((-1.0)*r21*x1216))+((cj0*pz))+((x1202*x1215))+(((-1.0)*x1193*x1211)));
evalcond[5]=((((-1.0)*sj0*x1191*x1196))+(((-0.14105)*x1205))+(((0.1016)*cj0))+py+((sj0*x1200*x1215))+((r21*x1197*x1199))+((sj0*x1217))+(((-1.0)*r11*x1203))+((sj0*x1193*x1199))+(((-1.0)*r20*x1197*x1215)));
evalcond[6]=(((cj0*x1200*x1215))+(((-0.14105)*x1206))+((cj0*x1217))+(((-1.0)*cj0*x1204*x1215))+((cj0*x1193*x1199))+px+((cj0*x1199*x1210))+(((-0.14105)*x1194))+(((-1.0)*x1208))+(((-1.0)*x1191*x1213)));
evalcond[7]=(x1218+(((-0.1016)*x1189))+((x1198*x1213))+((px*sj0))+(((-1.0)*x1195*x1213))+(((-1.0)*x1192*x1194))+(((-1.0)*x1192*x1206))+((cj0*r12*x1209)));
evalcond[8]=(x1218+(((-1.0)*r00*x1196*x1197))+((r02*sj0*x1209))+(((-1.0)*x1205*x1211))+((sj0*x1196*x1201))+(((0.1016)*x1190))+((cj0*py))+(((-1.0)*r11*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1219=(cj4*sj1);
IkReal x1220=(cj1*sj4);
IkReal x1221=((1.0)*cj5);
IkReal x1222=(r21*sj5);
IkReal x1223=(cj1*cj4);
IkReal x1224=(sj1*sj4);
IkReal x1225=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x1222*x1224))+((r01*sj5*x1220))+((r02*x1223))+(((-1.0)*r22*x1219))+(((-1.0)*r00*x1220*x1221))+((cj5*r20*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1220*x1221))+((r02*x1219))+((r01*sj5*x1224))+((x1220*x1222))+((r22*x1223))+(((-1.0)*r00*x1221*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1222*x1224))+((r01*sj5*x1220))+((r02*x1223))+(((-1.0)*r22*x1219))+(((-1.0)*r00*x1220*x1221))+((cj5*r20*x1224))))+IKsqr(((((-1.0)*r20*x1220*x1221))+((r02*x1219))+((r01*sj5*x1224))+((x1220*x1222))+((r22*x1223))+(((-1.0)*r00*x1221*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1222*x1224))+((r01*sj5*x1220))+((r02*x1223))+(((-1.0)*r22*x1219))+(((-1.0)*r00*x1220*x1221))+((cj5*r20*x1224))), ((((-1.0)*r20*x1220*x1221))+((r02*x1219))+((r01*sj5*x1224))+((x1220*x1222))+((r22*x1223))+(((-1.0)*r00*x1221*x1224))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j2);
IkReal x1227=IKsin(j2);
IkReal x1228=(cj5*r01);
IkReal x1229=((1.0)*cj3);
IkReal x1230=(cj5*r00);
IkReal x1231=((0.33655)*sj1);
IkReal x1232=((1.0)*sj1);
IkReal x1233=(cj5*r21);
IkReal x1234=(r00*sj5);
IkReal x1235=(cj5*r20);
IkReal x1236=((1.0)*cj4);
IkReal x1237=(r20*sj5);
IkReal x1238=(cj1*x1226);
IkReal x1239=(cj3*cj4*sj5);
IkReal x1240=((1.0)*sj4*sj5);
IkReal x1241=(cj1*x1227);
IkReal x1242=(x1227*x1232);
evalcond[0]=(((sj1*x1226))+x1241+((sj4*x1230))+(((-1.0)*r01*x1240))+(((-1.0)*r02*x1236)));
evalcond[1]=(x1238+(((-1.0)*r21*x1240))+(((-1.0)*x1242))+((sj4*x1235))+(((-1.0)*r22*x1236)));
evalcond[2]=((((-0.33655)*x1238))+(((0.14105)*x1237))+(((0.14105)*x1233))+(((-1.0)*pz))+(((-0.4445)*cj1))+((x1227*x1231)));
evalcond[3]=((((0.14105)*x1228))+(((-0.4445)*sj1))+(((-1.0)*x1226*x1231))+(((0.14105)*x1234))+(((-0.33655)*x1241))+(((-1.0)*px)));
evalcond[4]=(x1238+((sj3*x1234))+((r01*x1239))+((sj3*x1228))+(((-1.0)*x1242))+(((-1.0)*r02*sj4*x1229))+(((-1.0)*cj4*x1229*x1230)));
evalcond[5]=((((-1.0)*r22*sj4*x1229))+((sj3*x1237))+((sj3*x1233))+(((-1.0)*x1226*x1232))+(((-1.0)*x1241))+(((-1.0)*cj4*x1229*x1235))+((r21*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1243=((1.0)*r01);
IkReal x1244=(sj1*sj4);
IkReal x1245=(cj5*r00);
IkReal x1246=(cj1*cj4);
IkReal x1247=(cj5*r20);
IkReal x1248=(cj1*sj4);
IkReal x1249=(sj5*x1248);
IkReal x1250=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x1250))+(((-1.0)*x1243*x1249))+((x1244*x1247))+((x1245*x1248))+(((-1.0)*r02*x1246))+(((-1.0)*r21*sj5*x1244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x1243*x1244))+((x1244*x1245))+(((-1.0)*x1247*x1248))+(((-1.0)*r02*x1250))+((r21*x1249))+((r22*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1250))+(((-1.0)*x1243*x1249))+((x1244*x1247))+((x1245*x1248))+(((-1.0)*r02*x1246))+(((-1.0)*r21*sj5*x1244))))+IKsqr(((((-1.0)*sj5*x1243*x1244))+((x1244*x1245))+(((-1.0)*x1247*x1248))+(((-1.0)*r02*x1250))+((r21*x1249))+((r22*x1246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1250))+(((-1.0)*x1243*x1249))+((x1244*x1247))+((x1245*x1248))+(((-1.0)*r02*x1246))+(((-1.0)*r21*sj5*x1244))), ((((-1.0)*sj5*x1243*x1244))+((x1244*x1245))+(((-1.0)*x1247*x1248))+(((-1.0)*r02*x1250))+((r21*x1249))+((r22*x1246))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1251=IKcos(j2);
IkReal x1252=IKsin(j2);
IkReal x1253=(cj5*r01);
IkReal x1254=((1.0)*cj3);
IkReal x1255=(cj5*r00);
IkReal x1256=((0.33655)*sj1);
IkReal x1257=((1.0)*sj1);
IkReal x1258=(cj5*r21);
IkReal x1259=(r00*sj5);
IkReal x1260=(cj5*r20);
IkReal x1261=((1.0)*cj4);
IkReal x1262=(r20*sj5);
IkReal x1263=(cj1*x1251);
IkReal x1264=(cj3*cj4*sj5);
IkReal x1265=((1.0)*sj4*sj5);
IkReal x1266=(cj1*x1252);
IkReal x1267=(x1251*x1257);
IkReal x1268=((1.0)*x1266);
IkReal x1269=(x1268+x1267);
evalcond[0]=(x1263+(((-1.0)*r21*x1265))+(((-1.0)*r22*x1261))+((sj4*x1260))+(((-1.0)*x1252*x1257)));
evalcond[1]=(((sj4*x1255))+(((-1.0)*r01*x1265))+(((-1.0)*r02*x1261))+(((-1.0)*x1269)));
evalcond[2]=((((0.14105)*x1262))+(((0.14105)*x1258))+(((-1.0)*pz))+((x1252*x1256))+(((-0.4445)*cj1))+(((-0.33655)*x1263)));
evalcond[3]=((((0.14105)*x1253))+(((0.14105)*x1259))+(((-1.0)*px))+(((0.33655)*x1266))+(((0.4445)*sj1))+((x1251*x1256)));
evalcond[4]=((((-1.0)*r02*sj4*x1254))+(((-1.0)*cj4*x1254*x1255))+((sj1*x1252))+(((-1.0)*x1263))+((sj3*x1253))+((sj3*x1259))+((r01*x1264)));
evalcond[5]=((((-1.0)*cj4*x1254*x1260))+((r21*x1264))+(((-1.0)*r22*sj4*x1254))+((sj3*x1258))+((sj3*x1262))+(((-1.0)*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1270=(cj4*r12);
IkReal x1271=(cj4*r22);
IkReal x1272=(cj1*sj4);
IkReal x1273=(r11*sj5);
IkReal x1274=(r21*sj5);
IkReal x1275=((1.0)*sj1);
IkReal x1276=(sj1*sj4);
IkReal x1277=(cj5*r20);
IkReal x1278=((1.0)*cj5*r10);
if( IKabs((((x1276*x1277))+((x1272*x1273))+(((-1.0)*x1271*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1270))+(((-1.0)*sj4*x1274*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1270))+(((-1.0)*cj5*r10*sj4*x1275))+((x1272*x1274))+((x1273*x1276))+((cj1*x1271))+(((-1.0)*x1272*x1277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1276*x1277))+((x1272*x1273))+(((-1.0)*x1271*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1270))+(((-1.0)*sj4*x1274*x1275))))+IKsqr((((sj1*x1270))+(((-1.0)*cj5*r10*sj4*x1275))+((x1272*x1274))+((x1273*x1276))+((cj1*x1271))+(((-1.0)*x1272*x1277))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1276*x1277))+((x1272*x1273))+(((-1.0)*x1271*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1270))+(((-1.0)*sj4*x1274*x1275))), (((sj1*x1270))+(((-1.0)*cj5*r10*sj4*x1275))+((x1272*x1274))+((x1273*x1276))+((cj1*x1271))+(((-1.0)*x1272*x1277))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1279=IKcos(j2);
IkReal x1280=IKsin(j2);
IkReal x1281=(cj3*cj4);
IkReal x1282=(r21*sj5);
IkReal x1283=((0.33655)*sj1);
IkReal x1284=((1.0)*sj4);
IkReal x1285=((1.0)*cj5);
IkReal x1286=((0.14105)*cj5);
IkReal x1287=((1.0)*sj1);
IkReal x1288=(cj5*sj4);
IkReal x1289=((1.0)*cj4);
IkReal x1290=((0.14105)*sj5);
IkReal x1291=(r11*sj5);
IkReal x1292=(cj5*sj3);
IkReal x1293=(sj3*sj5);
IkReal x1294=(cj1*x1279);
IkReal x1295=(cj1*x1280);
IkReal x1296=(x1280*x1287);
evalcond[0]=((((-1.0)*x1284*x1291))+x1295+((sj1*x1279))+((r10*x1288))+(((-1.0)*r12*x1289)));
evalcond[1]=(x1294+(((-1.0)*x1296))+(((-1.0)*r22*x1289))+((r20*x1288))+(((-1.0)*x1282*x1284)));
evalcond[2]=(((r20*x1290))+(((-1.0)*pz))+(((-0.4445)*cj1))+((r21*x1286))+(((-0.33655)*x1294))+((x1280*x1283)));
evalcond[3]=(((r11*x1286))+(((-0.4445)*sj1))+(((-1.0)*py))+(((-0.33655)*x1295))+(((-1.0)*x1279*x1283))+((r10*x1290)));
evalcond[4]=(x1294+(((-1.0)*x1296))+(((-1.0)*cj3*r12*x1284))+((x1281*x1291))+((r11*x1292))+(((-1.0)*r10*x1281*x1285))+((r10*x1293)));
evalcond[5]=(((r20*x1293))+((r21*x1292))+(((-1.0)*r20*x1281*x1285))+(((-1.0)*cj3*r22*x1284))+(((-1.0)*x1295))+(((-1.0)*x1279*x1287))+((x1281*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1297=((1.0)*cj1);
IkReal x1298=(sj4*sj5);
IkReal x1299=(cj5*sj4);
IkReal x1300=((1.0)*sj1);
IkReal x1301=(sj1*x1299);
IkReal x1302=(cj4*x1300);
if( IKabs((((cj1*r10*x1299))+(((-1.0)*r22*x1302))+(((-1.0)*cj4*r12*x1297))+(((-1.0)*r21*x1298*x1300))+(((-1.0)*r11*x1297*x1298))+((r20*x1301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x1298))+((r10*x1301))+(((-1.0)*r12*x1302))+(((-1.0)*r11*x1298*x1300))+(((-1.0)*r20*x1297*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1299))+(((-1.0)*r22*x1302))+(((-1.0)*cj4*r12*x1297))+(((-1.0)*r21*x1298*x1300))+(((-1.0)*r11*x1297*x1298))+((r20*x1301))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x1298))+((r10*x1301))+(((-1.0)*r12*x1302))+(((-1.0)*r11*x1298*x1300))+(((-1.0)*r20*x1297*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1299))+(((-1.0)*r22*x1302))+(((-1.0)*cj4*r12*x1297))+(((-1.0)*r21*x1298*x1300))+(((-1.0)*r11*x1297*x1298))+((r20*x1301))), (((cj1*cj4*r22))+((cj1*r21*x1298))+((r10*x1301))+(((-1.0)*r12*x1302))+(((-1.0)*r11*x1298*x1300))+(((-1.0)*r20*x1297*x1299))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1303=IKcos(j2);
IkReal x1304=IKsin(j2);
IkReal x1305=(cj3*cj4);
IkReal x1306=(r21*sj5);
IkReal x1307=((0.33655)*sj1);
IkReal x1308=((1.0)*sj4);
IkReal x1309=((1.0)*cj5);
IkReal x1310=((0.14105)*cj5);
IkReal x1311=((1.0)*sj1);
IkReal x1312=(cj5*sj4);
IkReal x1313=((1.0)*cj4);
IkReal x1314=(r10*sj5);
IkReal x1315=(r11*sj5);
IkReal x1316=(r20*sj5);
IkReal x1317=(cj5*sj3);
IkReal x1318=(cj1*x1303);
IkReal x1319=(cj1*x1304);
IkReal x1320=(x1303*x1311);
IkReal x1321=((1.0)*x1319);
IkReal x1322=(x1320+x1321);
evalcond[0]=(x1318+(((-1.0)*x1304*x1311))+(((-1.0)*x1306*x1308))+(((-1.0)*r22*x1313))+((r20*x1312)));
evalcond[1]=((((-1.0)*x1308*x1315))+(((-1.0)*x1322))+((r10*x1312))+(((-1.0)*r12*x1313)));
evalcond[2]=((((-0.33655)*x1318))+(((-1.0)*pz))+((x1304*x1307))+(((-0.4445)*cj1))+((r21*x1310))+(((0.14105)*x1316)));
evalcond[3]=((((0.33655)*x1319))+((r11*x1310))+((x1303*x1307))+(((-1.0)*py))+(((0.4445)*sj1))+(((0.14105)*x1314)));
evalcond[4]=(((sj3*x1314))+((r11*x1317))+((x1305*x1315))+(((-1.0)*x1318))+(((-1.0)*cj3*r12*x1308))+(((-1.0)*r10*x1305*x1309))+((sj1*x1304)));
evalcond[5]=(((sj3*x1316))+(((-1.0)*r20*x1305*x1309))+((x1305*x1306))+(((-1.0)*x1322))+(((-1.0)*cj3*r22*x1308))+((r21*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1323=((1.0)*sj1);
IkReal x1324=(cj5*sj4);
IkReal x1325=(r20*sj0);
IkReal x1326=((1.0)*cj1);
IkReal x1327=(cj4*r12);
IkReal x1328=(cj4*r22*sj0);
IkReal x1329=(r11*sj4*sj5);
IkReal x1330=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332 = IKatan2WithCheck(IkReal(((((-1.0)*x1323*x1328))+(((-1.0)*x1323*x1330))+((cj1*x1327))+((cj1*x1329))+((sj1*x1324*x1325))+(((-1.0)*r10*x1324*x1326)))),IkReal((((cj1*x1330))+(((-1.0)*x1324*x1325*x1326))+((cj1*x1328))+(((-1.0)*r10*x1323*x1324))+((sj1*x1329))+((sj1*x1327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1332.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1331.value)))+(x1332.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1333=IKsin(j2);
IkReal x1334=IKcos(j2);
IkReal x1335=((1.0)*cj3);
IkReal x1336=(cj5*r00);
IkReal x1337=(r00*sj5);
IkReal x1338=(cj4*cj5);
IkReal x1339=(cj5*r01);
IkReal x1340=(cj0*sj1);
IkReal x1341=(cj5*r21);
IkReal x1342=(cj5*sj4);
IkReal x1343=((1.0)*cj4);
IkReal x1344=(r10*sj5);
IkReal x1345=(cj5*r11);
IkReal x1346=(r20*sj5);
IkReal x1347=((0.33655)*sj0);
IkReal x1348=(cj1*x1334);
IkReal x1349=(cj3*cj4*sj5);
IkReal x1350=(sj1*x1333);
IkReal x1351=((1.0)*sj4*sj5);
IkReal x1352=(cj1*x1333);
IkReal x1353=(sj1*x1334);
evalcond[0]=(x1348+(((-1.0)*x1350))+(((-1.0)*r21*x1351))+(((-1.0)*r22*x1343))+((r20*x1342)));
evalcond[1]=(((sj4*x1336))+(((-1.0)*r02*x1343))+((x1334*x1340))+(((-1.0)*r01*x1351))+((cj0*x1352)));
evalcond[2]=((((-1.0)*r11*x1351))+((sj0*x1352))+((sj0*x1353))+(((-1.0)*r12*x1343))+((r10*x1342)));
evalcond[3]=((((-1.0)*pz))+(((0.14105)*x1341))+(((0.14105)*x1346))+(((-0.4445)*cj1))+(((-0.33655)*x1348))+(((0.33655)*x1350)));
evalcond[4]=((((0.14105)*x1337))+(((0.14105)*x1339))+(((-1.0)*px))+(((-0.4445)*x1340))+(((-0.33655)*x1334*x1340))+(((0.1016)*sj0))+(((-0.33655)*cj0*x1352)));
evalcond[5]=((((-1.0)*x1347*x1352))+(((-1.0)*x1347*x1353))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((0.14105)*x1345))+(((0.14105)*x1344)));
evalcond[6]=((((-1.0)*x1353))+(((-1.0)*x1352))+(((-1.0)*r22*sj4*x1335))+((r21*x1349))+((sj3*x1341))+((sj3*x1346))+(((-1.0)*r20*x1335*x1338)));
evalcond[7]=((((-1.0)*x1333*x1340))+((sj3*x1337))+((sj3*x1339))+((cj0*x1348))+(((-1.0)*cj4*x1335*x1336))+(((-1.0)*r02*sj4*x1335))+((r01*x1349)));
evalcond[8]=((((-1.0)*r10*x1335*x1338))+((sj0*x1348))+(((-1.0)*r12*sj4*x1335))+(((-1.0)*sj0*x1350))+((r11*x1349))+((sj3*x1345))+((sj3*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1354=((1.0)*cj0);
IkReal x1355=(cj4*r02);
IkReal x1356=(cj1*sj4);
IkReal x1357=(cj4*r22);
IkReal x1358=(cj5*r20);
IkReal x1359=(sj1*sj4);
IkReal x1360=(sj5*x1359);
IkReal x1361=((1.0)*cj5*r00);
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1354*x1357))+((cj1*x1355))+((r01*sj5*x1356))+(((-1.0)*r21*x1354*x1360))+((cj0*x1358*x1359))+(((-1.0)*x1356*x1361)))),IkReal((((sj1*x1355))+(((-1.0)*x1359*x1361))+((r01*x1360))+(((-1.0)*x1354*x1356*x1358))+((cj0*r21*sj5*x1356))+((cj0*cj1*x1357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1362.value)))+(x1363.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1364=IKsin(j2);
IkReal x1365=IKcos(j2);
IkReal x1366=((1.0)*cj3);
IkReal x1367=(cj5*r00);
IkReal x1368=(r00*sj5);
IkReal x1369=(cj4*cj5);
IkReal x1370=(cj5*r01);
IkReal x1371=(cj0*sj1);
IkReal x1372=(cj5*r21);
IkReal x1373=(cj5*sj4);
IkReal x1374=((1.0)*cj4);
IkReal x1375=(r10*sj5);
IkReal x1376=(cj5*r11);
IkReal x1377=(r20*sj5);
IkReal x1378=((0.33655)*sj0);
IkReal x1379=(cj1*x1365);
IkReal x1380=(cj3*cj4*sj5);
IkReal x1381=(sj1*x1364);
IkReal x1382=((1.0)*sj4*sj5);
IkReal x1383=(cj1*x1364);
IkReal x1384=(sj1*x1365);
evalcond[0]=(x1379+(((-1.0)*r21*x1382))+(((-1.0)*r22*x1374))+(((-1.0)*x1381))+((r20*x1373)));
evalcond[1]=(((x1365*x1371))+((sj4*x1367))+(((-1.0)*r02*x1374))+(((-1.0)*r01*x1382))+((cj0*x1383)));
evalcond[2]=((((-1.0)*r11*x1382))+((r10*x1373))+((sj0*x1384))+((sj0*x1383))+(((-1.0)*r12*x1374)));
evalcond[3]=((((-0.33655)*x1379))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x1377))+(((0.14105)*x1372))+(((0.33655)*x1381)));
evalcond[4]=((((-0.33655)*x1365*x1371))+(((-0.4445)*x1371))+(((-1.0)*px))+(((0.14105)*x1368))+(((0.1016)*sj0))+(((0.14105)*x1370))+(((-0.33655)*cj0*x1383)));
evalcond[5]=((((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x1378*x1384))+(((-1.0)*x1378*x1383))+(((0.14105)*x1376))+(((0.14105)*x1375)));
evalcond[6]=((((-1.0)*r22*sj4*x1366))+((sj3*x1377))+((sj3*x1372))+((r21*x1380))+(((-1.0)*r20*x1366*x1369))+(((-1.0)*x1383))+(((-1.0)*x1384)));
evalcond[7]=(((sj3*x1370))+(((-1.0)*x1364*x1371))+(((-1.0)*r02*sj4*x1366))+((r01*x1380))+((cj0*x1379))+((sj3*x1368))+(((-1.0)*cj4*x1366*x1367)));
evalcond[8]=((((-1.0)*r10*x1366*x1369))+((sj3*x1376))+((sj3*x1375))+(((-1.0)*r12*sj4*x1366))+(((-1.0)*sj0*x1381))+((r11*x1380))+((sj0*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1385=(r10*sj0);
IkReal x1386=((0.33655)*sj4);
IkReal x1387=((0.757142857142857)*sj4);
IkReal x1388=(r11*sj0);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(sj0,-2);
if(!x1389.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x1389.value)*(((((-0.14105)*sj5*x1385))+(((0.33655)*cj4*r12*sj0))+((sj5*x1386*x1388))+(((-1.0)*cj5*x1385*x1386))+(((-0.14105)*cj5*x1388))+(((0.1016)*cj0*sj0))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*cj4*r22))+((cj5*r20*x1387))+(((-1.0)*r21*sj5*x1387))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x1389.value)*(((((-0.14105)*sj5*x1385))+(((0.33655)*cj4*r12*sj0))+((sj5*x1386*x1388))+(((-1.0)*cj5*x1385*x1386))+(((-0.14105)*cj5*x1388))+(((0.1016)*cj0*sj0))+((py*sj0))))))+IKsqr(((((-0.757142857142857)*cj4*r22))+((cj5*r20*x1387))+(((-1.0)*r21*sj5*x1387))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x1389.value)*(((((-0.14105)*sj5*x1385))+(((0.33655)*cj4*r12*sj0))+((sj5*x1386*x1388))+(((-1.0)*cj5*x1385*x1386))+(((-0.14105)*cj5*x1388))+(((0.1016)*cj0*sj0))+((py*sj0))))), ((((-0.757142857142857)*cj4*r22))+((cj5*r20*x1387))+(((-1.0)*r21*sj5*x1387))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1390=IKsin(j1);
IkReal x1391=IKcos(j1);
IkReal x1392=sj0*sj0;
IkReal x1393=cj0*cj0;
IkReal x1394=(cj3*r22);
IkReal x1395=((0.14105)*sj0);
IkReal x1396=(r20*sj5);
IkReal x1397=(cj5*r01);
IkReal x1398=(cj5*r10);
IkReal x1399=((0.33655)*sj4);
IkReal x1400=(cj5*sj0);
IkReal x1401=(r11*sj5);
IkReal x1402=((0.33655)*sj3);
IkReal x1403=(r21*sj5);
IkReal x1404=(r01*sj5);
IkReal x1405=(cj5*r00);
IkReal x1406=((0.14105)*cj5);
IkReal x1407=(cj5*r20);
IkReal x1408=(r10*sj5);
IkReal x1409=(r00*sj5);
IkReal x1410=(cj5*r11);
IkReal x1411=((0.1016)*sj0);
IkReal x1412=((0.33655)*cj4);
IkReal x1413=(cj5*r21);
IkReal x1414=((0.14105)*cj0);
IkReal x1415=(cj0*x1411);
IkReal x1416=(cj0*x1399);
IkReal x1417=((0.4445)*x1391);
IkReal x1418=(cj3*x1412);
IkReal x1419=(cj0*x1406);
IkReal x1420=((0.4445)*x1390);
IkReal x1421=(cj0*sj0*x1420);
evalcond[0]=((((-1.0)*x1417))+(((-1.0)*x1399*x1403))+(((-1.0)*r22*x1412))+(((0.14105)*x1396))+(((-1.0)*pz))+((r21*x1406))+((x1399*x1407)));
evalcond[1]=(((sj0*x1399*x1401))+(((-1.0)*sj0*x1398*x1399))+((r12*sj0*x1412))+((x1392*x1420))+x1415+((py*sj0))+(((-1.0)*x1395*x1408))+(((-1.0)*x1395*x1410)));
evalcond[2]=((((-1.0)*x1415))+((cj0*r02*x1412))+((x1404*x1416))+((x1393*x1420))+(((-1.0)*x1405*x1416))+(((-1.0)*x1409*x1414))+((cj0*px))+(((-1.0)*x1397*x1414)));
evalcond[3]=(((cj3*r12*x1399))+(((-1.0)*x1395*x1396))+((x1398*x1418))+(((-1.0)*x1401*x1418))+(((-1.0)*x1402*x1408))+(((-1.0)*x1402*x1410))+((pz*sj0))+(((-1.0)*x1395*x1413))+((sj0*x1417)));
evalcond[4]=(((cj0*x1417))+(((-1.0)*x1404*x1418))+((x1405*x1418))+(((-1.0)*x1402*x1409))+(((-1.0)*r21*x1419))+((cj0*pz))+((cj3*r02*x1399))+(((-1.0)*x1396*x1414))+(((-1.0)*x1397*x1402)));
evalcond[5]=(((r21*x1400*x1402))+((sj0*x1403*x1418))+(((-1.0)*r11*x1406))+(((-1.0)*sj0*x1394*x1399))+((sj0*x1396*x1402))+(((0.1016)*cj0))+(((-1.0)*r20*x1400*x1418))+py+(((-0.14105)*x1408))+((sj0*x1420)));
evalcond[6]=((((-1.0)*x1411))+(((-1.0)*cj0*x1407*x1418))+((cj0*x1403*x1418))+(((-0.14105)*x1397))+((cj0*x1396*x1402))+px+(((-1.0)*x1394*x1416))+((cj0*x1402*x1413))+(((-0.14105)*x1409))+((cj0*x1420)));
evalcond[7]=((((-1.0)*x1395*x1397))+((x1401*x1416))+(((-1.0)*x1398*x1416))+x1421+((px*sj0))+((cj0*r12*x1412))+(((-0.1016)*x1392))+(((-1.0)*x1395*x1409)));
evalcond[8]=(((sj0*x1399*x1404))+(((0.1016)*x1393))+(((-1.0)*x1408*x1414))+(((-1.0)*r11*x1419))+x1421+(((-1.0)*r00*x1399*x1400))+((r02*sj0*x1412))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1422=(cj4*sj1);
IkReal x1423=(cj1*sj4);
IkReal x1424=((1.0)*cj5);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj1*cj4);
IkReal x1427=(sj1*sj4);
IkReal x1428=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x1425*x1427))+((r01*sj5*x1423))+((cj5*r20*x1427))+(((-1.0)*r00*x1423*x1424))+((r02*x1426))+(((-1.0)*r22*x1422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1423*x1424))+((x1423*x1425))+((r22*x1426))+((r01*sj5*x1427))+((r02*x1422))+(((-1.0)*r00*x1424*x1427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1425*x1427))+((r01*sj5*x1423))+((cj5*r20*x1427))+(((-1.0)*r00*x1423*x1424))+((r02*x1426))+(((-1.0)*r22*x1422))))+IKsqr(((((-1.0)*r20*x1423*x1424))+((x1423*x1425))+((r22*x1426))+((r01*sj5*x1427))+((r02*x1422))+(((-1.0)*r00*x1424*x1427))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1425*x1427))+((r01*sj5*x1423))+((cj5*r20*x1427))+(((-1.0)*r00*x1423*x1424))+((r02*x1426))+(((-1.0)*r22*x1422))), ((((-1.0)*r20*x1423*x1424))+((x1423*x1425))+((r22*x1426))+((r01*sj5*x1427))+((r02*x1422))+(((-1.0)*r00*x1424*x1427))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1429=IKcos(j2);
IkReal x1430=IKsin(j2);
IkReal x1431=(cj5*r01);
IkReal x1432=((1.0)*cj3);
IkReal x1433=(cj5*r00);
IkReal x1434=((0.33655)*sj1);
IkReal x1435=((1.0)*sj1);
IkReal x1436=(cj5*r21);
IkReal x1437=(r00*sj5);
IkReal x1438=(cj5*r20);
IkReal x1439=((1.0)*cj4);
IkReal x1440=(r20*sj5);
IkReal x1441=(cj1*x1429);
IkReal x1442=(cj3*cj4*sj5);
IkReal x1443=((1.0)*sj4*sj5);
IkReal x1444=(cj1*x1430);
IkReal x1445=(x1430*x1435);
evalcond[0]=(((sj1*x1429))+(((-1.0)*r01*x1443))+(((-1.0)*r02*x1439))+x1444+((sj4*x1433)));
evalcond[1]=((((-1.0)*r21*x1443))+(((-1.0)*r22*x1439))+x1441+(((-1.0)*x1445))+((sj4*x1438)));
evalcond[2]=((((0.14105)*x1436))+(((-0.33655)*x1441))+((x1430*x1434))+(((0.14105)*x1440))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[3]=((((0.14105)*x1437))+(((0.14105)*x1431))+(((-0.33655)*x1444))+(((-1.0)*x1429*x1434))+(((-0.4445)*sj1))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*r02*sj4*x1432))+((sj3*x1437))+((sj3*x1431))+(((-1.0)*cj4*x1432*x1433))+x1441+(((-1.0)*x1445))+((r01*x1442)));
evalcond[5]=((((-1.0)*r22*sj4*x1432))+(((-1.0)*x1429*x1435))+((r21*x1442))+(((-1.0)*x1444))+((sj3*x1436))+(((-1.0)*cj4*x1432*x1438))+((sj3*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1446=((1.0)*r01);
IkReal x1447=(sj1*sj4);
IkReal x1448=(cj5*r00);
IkReal x1449=(cj1*cj4);
IkReal x1450=(cj5*r20);
IkReal x1451=(cj1*sj4);
IkReal x1452=(sj5*x1451);
IkReal x1453=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x1453))+((x1447*x1450))+((x1448*x1451))+(((-1.0)*r02*x1449))+(((-1.0)*r21*sj5*x1447))+(((-1.0)*x1446*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1449))+(((-1.0)*x1450*x1451))+(((-1.0)*r02*x1453))+((r21*x1452))+(((-1.0)*sj5*x1446*x1447))+((x1447*x1448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1453))+((x1447*x1450))+((x1448*x1451))+(((-1.0)*r02*x1449))+(((-1.0)*r21*sj5*x1447))+(((-1.0)*x1446*x1452))))+IKsqr((((r22*x1449))+(((-1.0)*x1450*x1451))+(((-1.0)*r02*x1453))+((r21*x1452))+(((-1.0)*sj5*x1446*x1447))+((x1447*x1448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1453))+((x1447*x1450))+((x1448*x1451))+(((-1.0)*r02*x1449))+(((-1.0)*r21*sj5*x1447))+(((-1.0)*x1446*x1452))), (((r22*x1449))+(((-1.0)*x1450*x1451))+(((-1.0)*r02*x1453))+((r21*x1452))+(((-1.0)*sj5*x1446*x1447))+((x1447*x1448))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1454=IKcos(j2);
IkReal x1455=IKsin(j2);
IkReal x1456=(cj5*r01);
IkReal x1457=((1.0)*cj3);
IkReal x1458=(cj5*r00);
IkReal x1459=((0.33655)*sj1);
IkReal x1460=((1.0)*sj1);
IkReal x1461=(cj5*r21);
IkReal x1462=(r00*sj5);
IkReal x1463=(cj5*r20);
IkReal x1464=((1.0)*cj4);
IkReal x1465=(r20*sj5);
IkReal x1466=(cj1*x1454);
IkReal x1467=(cj3*cj4*sj5);
IkReal x1468=((1.0)*sj4*sj5);
IkReal x1469=(cj1*x1455);
IkReal x1470=(x1454*x1460);
IkReal x1471=((1.0)*x1469);
IkReal x1472=(x1470+x1471);
evalcond[0]=((((-1.0)*r22*x1464))+(((-1.0)*x1455*x1460))+(((-1.0)*r21*x1468))+x1466+((sj4*x1463)));
evalcond[1]=((((-1.0)*r02*x1464))+(((-1.0)*r01*x1468))+(((-1.0)*x1472))+((sj4*x1458)));
evalcond[2]=(((x1455*x1459))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x1466))+(((0.14105)*x1465))+(((0.14105)*x1461)));
evalcond[3]=(((x1454*x1459))+(((0.14105)*x1456))+(((0.33655)*x1469))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.14105)*x1462)));
evalcond[4]=((((-1.0)*r02*sj4*x1457))+((sj3*x1462))+((r01*x1467))+((sj3*x1456))+((sj1*x1455))+(((-1.0)*x1466))+(((-1.0)*cj4*x1457*x1458)));
evalcond[5]=((((-1.0)*cj4*x1457*x1463))+((sj3*x1465))+((sj3*x1461))+(((-1.0)*r22*sj4*x1457))+(((-1.0)*x1472))+((r21*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1473=(cj4*r12);
IkReal x1474=(cj4*r22);
IkReal x1475=(cj1*sj4);
IkReal x1476=(r11*sj5);
IkReal x1477=(r21*sj5);
IkReal x1478=((1.0)*sj1);
IkReal x1479=(sj1*sj4);
IkReal x1480=(cj5*r20);
IkReal x1481=((1.0)*cj5*r10);
if( IKabs((((cj1*x1473))+(((-1.0)*sj4*x1477*x1478))+(((-1.0)*x1474*x1478))+(((-1.0)*x1475*x1481))+((x1475*x1476))+((x1479*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1474))+((sj1*x1473))+(((-1.0)*cj5*r10*sj4*x1478))+((x1476*x1479))+(((-1.0)*x1475*x1480))+((x1475*x1477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1473))+(((-1.0)*sj4*x1477*x1478))+(((-1.0)*x1474*x1478))+(((-1.0)*x1475*x1481))+((x1475*x1476))+((x1479*x1480))))+IKsqr((((cj1*x1474))+((sj1*x1473))+(((-1.0)*cj5*r10*sj4*x1478))+((x1476*x1479))+(((-1.0)*x1475*x1480))+((x1475*x1477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1473))+(((-1.0)*sj4*x1477*x1478))+(((-1.0)*x1474*x1478))+(((-1.0)*x1475*x1481))+((x1475*x1476))+((x1479*x1480))), (((cj1*x1474))+((sj1*x1473))+(((-1.0)*cj5*r10*sj4*x1478))+((x1476*x1479))+(((-1.0)*x1475*x1480))+((x1475*x1477))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1482=IKcos(j2);
IkReal x1483=IKsin(j2);
IkReal x1484=(cj3*cj4);
IkReal x1485=(r21*sj5);
IkReal x1486=((0.33655)*sj1);
IkReal x1487=((1.0)*sj4);
IkReal x1488=((1.0)*cj5);
IkReal x1489=((0.14105)*cj5);
IkReal x1490=((1.0)*sj1);
IkReal x1491=(cj5*sj4);
IkReal x1492=((1.0)*cj4);
IkReal x1493=((0.14105)*sj5);
IkReal x1494=(r11*sj5);
IkReal x1495=(cj5*sj3);
IkReal x1496=(sj3*sj5);
IkReal x1497=(cj1*x1482);
IkReal x1498=(cj1*x1483);
IkReal x1499=(x1483*x1490);
evalcond[0]=(((r10*x1491))+(((-1.0)*r12*x1492))+(((-1.0)*x1487*x1494))+((sj1*x1482))+x1498);
evalcond[1]=(((r20*x1491))+(((-1.0)*x1499))+(((-1.0)*x1485*x1487))+x1497+(((-1.0)*r22*x1492)));
evalcond[2]=(((r20*x1493))+((r21*x1489))+(((-1.0)*pz))+((x1483*x1486))+(((-0.4445)*cj1))+(((-0.33655)*x1497)));
evalcond[3]=((((-1.0)*x1482*x1486))+((r10*x1493))+(((-0.4445)*sj1))+((r11*x1489))+(((-1.0)*py))+(((-0.33655)*x1498)));
evalcond[4]=(((r10*x1496))+(((-1.0)*x1499))+((r11*x1495))+((x1484*x1494))+(((-1.0)*cj3*r12*x1487))+x1497+(((-1.0)*r10*x1484*x1488)));
evalcond[5]=((((-1.0)*x1482*x1490))+((r20*x1496))+((r21*x1495))+(((-1.0)*x1498))+(((-1.0)*r20*x1484*x1488))+((x1484*x1485))+(((-1.0)*cj3*r22*x1487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1500=((1.0)*cj1);
IkReal x1501=(sj4*sj5);
IkReal x1502=(cj5*sj4);
IkReal x1503=((1.0)*sj1);
IkReal x1504=(sj1*x1502);
IkReal x1505=(cj4*x1503);
if( IKabs(((((-1.0)*cj4*r12*x1500))+(((-1.0)*r22*x1505))+(((-1.0)*r11*x1500*x1501))+((r20*x1504))+(((-1.0)*r21*x1501*x1503))+((cj1*r10*x1502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r10*x1504))+(((-1.0)*r20*x1500*x1502))+((cj1*r21*x1501))+(((-1.0)*r12*x1505))+(((-1.0)*r11*x1501*x1503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1500))+(((-1.0)*r22*x1505))+(((-1.0)*r11*x1500*x1501))+((r20*x1504))+(((-1.0)*r21*x1501*x1503))+((cj1*r10*x1502))))+IKsqr((((cj1*cj4*r22))+((r10*x1504))+(((-1.0)*r20*x1500*x1502))+((cj1*r21*x1501))+(((-1.0)*r12*x1505))+(((-1.0)*r11*x1501*x1503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1500))+(((-1.0)*r22*x1505))+(((-1.0)*r11*x1500*x1501))+((r20*x1504))+(((-1.0)*r21*x1501*x1503))+((cj1*r10*x1502))), (((cj1*cj4*r22))+((r10*x1504))+(((-1.0)*r20*x1500*x1502))+((cj1*r21*x1501))+(((-1.0)*r12*x1505))+(((-1.0)*r11*x1501*x1503))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1506=IKcos(j2);
IkReal x1507=IKsin(j2);
IkReal x1508=(cj3*cj4);
IkReal x1509=(r21*sj5);
IkReal x1510=((0.33655)*sj1);
IkReal x1511=((1.0)*sj4);
IkReal x1512=((1.0)*cj5);
IkReal x1513=((0.14105)*cj5);
IkReal x1514=((1.0)*sj1);
IkReal x1515=(cj5*sj4);
IkReal x1516=((1.0)*cj4);
IkReal x1517=(r10*sj5);
IkReal x1518=(r11*sj5);
IkReal x1519=(r20*sj5);
IkReal x1520=(cj5*sj3);
IkReal x1521=(cj1*x1506);
IkReal x1522=(cj1*x1507);
IkReal x1523=(x1506*x1514);
IkReal x1524=((1.0)*x1522);
IkReal x1525=(x1524+x1523);
evalcond[0]=((((-1.0)*r22*x1516))+((r20*x1515))+(((-1.0)*x1507*x1514))+x1521+(((-1.0)*x1509*x1511)));
evalcond[1]=((((-1.0)*x1525))+((r10*x1515))+(((-1.0)*x1511*x1518))+(((-1.0)*r12*x1516)));
evalcond[2]=((((-0.33655)*x1521))+((x1507*x1510))+(((-1.0)*pz))+(((0.14105)*x1519))+(((-0.4445)*cj1))+((r21*x1513)));
evalcond[3]=(((r11*x1513))+((x1506*x1510))+(((-1.0)*py))+(((0.14105)*x1517))+(((0.4445)*sj1))+(((0.33655)*x1522)));
evalcond[4]=(((sj3*x1517))+((x1508*x1518))+((r11*x1520))+((sj1*x1507))+(((-1.0)*r10*x1508*x1512))+(((-1.0)*cj3*r12*x1511))+(((-1.0)*x1521)));
evalcond[5]=(((sj3*x1519))+((x1508*x1509))+(((-1.0)*x1525))+(((-1.0)*r20*x1508*x1512))+(((-1.0)*cj3*r22*x1511))+((r21*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1526=((1.0)*sj1);
IkReal x1527=(cj5*sj4);
IkReal x1528=(r20*sj0);
IkReal x1529=((1.0)*cj1);
IkReal x1530=(cj4*r12);
IkReal x1531=(cj4*r22*sj0);
IkReal x1532=(r11*sj4*sj5);
IkReal x1533=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal((((cj1*x1532))+((cj1*x1530))+((sj1*x1527*x1528))+(((-1.0)*r10*x1527*x1529))+(((-1.0)*x1526*x1531))+(((-1.0)*x1526*x1533)))),IkReal((((cj1*x1531))+((cj1*x1533))+((sj1*x1530))+((sj1*x1532))+(((-1.0)*r10*x1526*x1527))+(((-1.0)*x1527*x1528*x1529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
CheckValue<IkReal> x1535=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1535.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1534.value)+(((1.5707963267949)*(x1535.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1536=IKsin(j2);
IkReal x1537=IKcos(j2);
IkReal x1538=((1.0)*cj3);
IkReal x1539=(cj5*r00);
IkReal x1540=(r00*sj5);
IkReal x1541=(cj4*cj5);
IkReal x1542=(cj5*r01);
IkReal x1543=(cj0*sj1);
IkReal x1544=(cj5*r21);
IkReal x1545=(cj5*sj4);
IkReal x1546=((1.0)*cj4);
IkReal x1547=(r10*sj5);
IkReal x1548=(cj5*r11);
IkReal x1549=(r20*sj5);
IkReal x1550=((0.33655)*sj0);
IkReal x1551=(cj1*x1537);
IkReal x1552=(cj3*cj4*sj5);
IkReal x1553=(sj1*x1536);
IkReal x1554=((1.0)*sj4*sj5);
IkReal x1555=(cj1*x1536);
IkReal x1556=(sj1*x1537);
evalcond[0]=((((-1.0)*x1553))+(((-1.0)*r22*x1546))+x1551+(((-1.0)*r21*x1554))+((r20*x1545)));
evalcond[1]=((((-1.0)*r02*x1546))+((x1537*x1543))+((cj0*x1555))+((sj4*x1539))+(((-1.0)*r01*x1554)));
evalcond[2]=((((-1.0)*r11*x1554))+((sj0*x1555))+((sj0*x1556))+((r10*x1545))+(((-1.0)*r12*x1546)));
evalcond[3]=((((0.14105)*x1544))+(((0.14105)*x1549))+(((-1.0)*pz))+(((-0.33655)*x1551))+(((-0.4445)*cj1))+(((0.33655)*x1553)));
evalcond[4]=((((-0.33655)*x1537*x1543))+(((0.14105)*x1540))+(((0.14105)*x1542))+(((-0.4445)*x1543))+(((-1.0)*px))+(((0.1016)*sj0))+(((-0.33655)*cj0*x1555)));
evalcond[5]=((((0.14105)*x1547))+(((0.14105)*x1548))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x1550*x1555))+(((-1.0)*x1550*x1556)));
evalcond[6]=((((-1.0)*x1556))+(((-1.0)*x1555))+(((-1.0)*r22*sj4*x1538))+(((-1.0)*r20*x1538*x1541))+((r21*x1552))+((sj3*x1544))+((sj3*x1549)));
evalcond[7]=(((r01*x1552))+(((-1.0)*r02*sj4*x1538))+((cj0*x1551))+(((-1.0)*x1536*x1543))+(((-1.0)*cj4*x1538*x1539))+((sj3*x1540))+((sj3*x1542)));
evalcond[8]=((((-1.0)*r10*x1538*x1541))+(((-1.0)*r12*sj4*x1538))+((r11*x1552))+((sj0*x1551))+((sj3*x1547))+((sj3*x1548))+(((-1.0)*sj0*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1557=((1.0)*cj0);
IkReal x1558=(cj4*r02);
IkReal x1559=(cj1*sj4);
IkReal x1560=(cj4*r22);
IkReal x1561=(cj5*r20);
IkReal x1562=(sj1*sj4);
IkReal x1563=(sj5*x1562);
IkReal x1564=((1.0)*cj5*r00);
CheckValue<IkReal> x1565=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1565.valid){
continue;
}
CheckValue<IkReal> x1566 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1557*x1563))+(((-1.0)*x1559*x1564))+((cj1*x1558))+(((-1.0)*sj1*x1557*x1560))+((r01*sj5*x1559))+((cj0*x1561*x1562)))),IkReal(((((-1.0)*x1562*x1564))+((cj0*cj1*x1560))+((sj1*x1558))+((cj0*r21*sj5*x1559))+(((-1.0)*x1557*x1559*x1561))+((r01*x1563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1566.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1565.value)))+(x1566.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1567=IKsin(j2);
IkReal x1568=IKcos(j2);
IkReal x1569=((1.0)*cj3);
IkReal x1570=(cj5*r00);
IkReal x1571=(r00*sj5);
IkReal x1572=(cj4*cj5);
IkReal x1573=(cj5*r01);
IkReal x1574=(cj0*sj1);
IkReal x1575=(cj5*r21);
IkReal x1576=(cj5*sj4);
IkReal x1577=((1.0)*cj4);
IkReal x1578=(r10*sj5);
IkReal x1579=(cj5*r11);
IkReal x1580=(r20*sj5);
IkReal x1581=((0.33655)*sj0);
IkReal x1582=(cj1*x1568);
IkReal x1583=(cj3*cj4*sj5);
IkReal x1584=(sj1*x1567);
IkReal x1585=((1.0)*sj4*sj5);
IkReal x1586=(cj1*x1567);
IkReal x1587=(sj1*x1568);
evalcond[0]=(((r20*x1576))+(((-1.0)*r22*x1577))+x1582+(((-1.0)*r21*x1585))+(((-1.0)*x1584)));
evalcond[1]=((((-1.0)*r02*x1577))+((sj4*x1570))+(((-1.0)*r01*x1585))+((x1568*x1574))+((cj0*x1586)));
evalcond[2]=((((-1.0)*r11*x1585))+((sj0*x1587))+((sj0*x1586))+(((-1.0)*r12*x1577))+((r10*x1576)));
evalcond[3]=((((0.14105)*x1575))+(((0.14105)*x1580))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.33655)*x1584))+(((-0.33655)*x1582)));
evalcond[4]=((((0.14105)*x1573))+(((0.14105)*x1571))+(((-0.4445)*x1574))+(((-1.0)*px))+(((-0.33655)*cj0*x1586))+(((0.1016)*sj0))+(((-0.33655)*x1568*x1574)));
evalcond[5]=((((0.14105)*x1579))+(((0.14105)*x1578))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x1581*x1587))+(((-1.0)*x1581*x1586)));
evalcond[6]=(((sj3*x1580))+(((-1.0)*r20*x1569*x1572))+(((-1.0)*r22*sj4*x1569))+((r21*x1583))+(((-1.0)*x1586))+(((-1.0)*x1587))+((sj3*x1575)));
evalcond[7]=(((r01*x1583))+(((-1.0)*x1567*x1574))+(((-1.0)*cj4*x1569*x1570))+((cj0*x1582))+(((-1.0)*r02*sj4*x1569))+((sj3*x1571))+((sj3*x1573)));
evalcond[8]=(((r11*x1583))+(((-1.0)*r12*sj4*x1569))+((sj0*x1582))+(((-1.0)*sj0*x1584))+(((-1.0)*r10*x1569*x1572))+((sj3*x1578))+((sj3*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1588=((1.0)*sj0);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1588))+(((-1.0)*r20*sj5*x1588)))),IkReal((((cj4*cj5*r20*sj0))+((r22*sj0*sj4))+(((-1.0)*cj4*r21*sj5*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x1590.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1591=IKsin(j3);
IkReal x1592=IKcos(j3);
IkReal x1593=((1.0)*cj5);
IkReal x1594=(cj4*x1591);
IkReal x1595=((1.0)*sj5*x1592);
IkReal x1596=((1.0)*sj4*x1591);
evalcond[0]=(((r21*sj5*x1594))+(((-1.0)*r21*x1592*x1593))+(((-1.0)*r20*x1593*x1594))+(((-1.0)*r22*x1596))+(((-1.0)*r20*x1595)));
evalcond[1]=(cj0+(((-1.0)*r10*x1593*x1594))+(((-1.0)*r11*x1592*x1593))+((r11*sj5*x1594))+(((-1.0)*r10*x1595))+(((-1.0)*r12*x1596)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1596))+((r01*sj5*x1594))+(((-1.0)*r00*x1595))+(((-1.0)*r01*x1592*x1593))+(((-1.0)*r00*x1593*x1594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1597=((0.317322834645669)*cj5);
IkReal x1598=((0.757142857142857)*cj4);
IkReal x1599=((0.317322834645669)*sj5);
IkReal x1600=((0.757142857142857)*cj5*sj4);
IkReal x1601=((0.757142857142857)*sj4*sj5);
if( IKabs((((r11*x1597))+((r10*x1599))+((r10*x1600))+(((-2.24971878515186)*py))+(((-1.0)*r12*x1598))+(((-1.0)*r11*x1601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1599))+(((-1.0)*r21*x1601))+(((-1.0)*r22*x1598))+((r21*x1597))+(((-2.24971878515186)*pz))+((r20*x1600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1597))+((r10*x1599))+((r10*x1600))+(((-2.24971878515186)*py))+(((-1.0)*r12*x1598))+(((-1.0)*r11*x1601))))+IKsqr((((r20*x1599))+(((-1.0)*r21*x1601))+(((-1.0)*r22*x1598))+((r21*x1597))+(((-2.24971878515186)*pz))+((r20*x1600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x1597))+((r10*x1599))+((r10*x1600))+(((-2.24971878515186)*py))+(((-1.0)*r12*x1598))+(((-1.0)*r11*x1601))), (((r20*x1599))+(((-1.0)*r21*x1601))+(((-1.0)*r22*x1598))+((r21*x1597))+(((-2.24971878515186)*pz))+((r20*x1600))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1602=((0.14105)*cj5);
IkReal x1603=((0.33655)*cj3);
IkReal x1604=(cj4*sj5);
IkReal x1605=((0.33655)*cj5);
IkReal x1606=(r10*sj5);
IkReal x1607=((0.33655)*sj3);
IkReal x1608=(cj4*cj5);
IkReal x1609=(r20*sj5);
IkReal x1610=((0.33655)*cj4);
IkReal x1611=((0.4445)*(IKsin(j1)));
IkReal x1612=((0.14105)*x1606);
IkReal x1613=(r11*x1602);
IkReal x1614=((0.4445)*(IKcos(j1)));
IkReal x1615=(r21*x1602);
IkReal x1616=((0.14105)*x1609);
IkReal x1617=((0.33655)*sj4*sj5);
IkReal x1618=(x1611+py);
IkReal x1619=(x1616+x1615);
IkReal x1620=(x1612+x1613);
evalcond[0]=(x1618+(((-1.0)*x1620))+((r12*x1610))+((r11*x1617))+(((-1.0)*r10*sj4*x1605)));
evalcond[1]=((((-1.0)*r21*x1617))+x1619+(((-1.0)*x1614))+(((-1.0)*pz))+(((-1.0)*r22*x1610))+((r20*sj4*x1605)));
evalcond[2]=(x1618+(((-1.0)*r22*sj4*x1603))+(((-1.0)*x1620))+((r21*x1603*x1604))+((x1607*x1609))+((r21*sj3*x1605))+(((-1.0)*r20*x1603*x1608)));
evalcond[3]=((((-1.0)*r11*x1603*x1604))+x1614+(((-1.0)*x1619))+(((-1.0)*r11*sj3*x1605))+((r12*sj4*x1603))+pz+(((-1.0)*x1606*x1607))+((r10*x1603*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1621=(cj4*r12);
IkReal x1622=(cj4*r22);
IkReal x1623=(cj1*sj4);
IkReal x1624=(r11*sj5);
IkReal x1625=(r21*sj5);
IkReal x1626=((1.0)*sj1);
IkReal x1627=(sj1*sj4);
IkReal x1628=(cj5*r20);
IkReal x1629=((1.0)*cj5*r10);
if( IKabs((((x1627*x1628))+((x1623*x1624))+(((-1.0)*x1623*x1629))+(((-1.0)*x1622*x1626))+(((-1.0)*sj4*x1625*x1626))+((cj1*x1621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1623*x1625))+((sj1*x1621))+(((-1.0)*cj5*r10*sj4*x1626))+(((-1.0)*x1623*x1628))+((x1624*x1627))+((cj1*x1622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1627*x1628))+((x1623*x1624))+(((-1.0)*x1623*x1629))+(((-1.0)*x1622*x1626))+(((-1.0)*sj4*x1625*x1626))+((cj1*x1621))))+IKsqr((((x1623*x1625))+((sj1*x1621))+(((-1.0)*cj5*r10*sj4*x1626))+(((-1.0)*x1623*x1628))+((x1624*x1627))+((cj1*x1622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1627*x1628))+((x1623*x1624))+(((-1.0)*x1623*x1629))+(((-1.0)*x1622*x1626))+(((-1.0)*sj4*x1625*x1626))+((cj1*x1621))), (((x1623*x1625))+((sj1*x1621))+(((-1.0)*cj5*r10*sj4*x1626))+(((-1.0)*x1623*x1628))+((x1624*x1627))+((cj1*x1622))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1630=IKcos(j2);
IkReal x1631=IKsin(j2);
IkReal x1632=(cj3*cj4);
IkReal x1633=(r21*sj5);
IkReal x1634=((0.33655)*sj1);
IkReal x1635=((1.0)*sj4);
IkReal x1636=((1.0)*cj5);
IkReal x1637=((0.14105)*cj5);
IkReal x1638=((1.0)*sj1);
IkReal x1639=(cj5*sj4);
IkReal x1640=((1.0)*cj4);
IkReal x1641=((0.14105)*sj5);
IkReal x1642=(r11*sj5);
IkReal x1643=(cj5*sj3);
IkReal x1644=(sj3*sj5);
IkReal x1645=(cj1*x1630);
IkReal x1646=(cj1*x1631);
IkReal x1647=(x1631*x1638);
evalcond[0]=((((-1.0)*x1635*x1642))+(((-1.0)*r12*x1640))+((sj1*x1630))+x1646+((r10*x1639)));
evalcond[1]=(((r20*x1639))+(((-1.0)*r22*x1640))+x1645+(((-1.0)*x1633*x1635))+(((-1.0)*x1647)));
evalcond[2]=(((r21*x1637))+((r20*x1641))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x1645))+((x1631*x1634)));
evalcond[3]=(((r10*x1641))+((r11*x1637))+(((-0.4445)*sj1))+(((-1.0)*py))+(((-1.0)*x1630*x1634))+(((-0.33655)*x1646)));
evalcond[4]=(((r11*x1643))+(((-1.0)*cj3*r12*x1635))+((r10*x1644))+x1645+(((-1.0)*x1647))+(((-1.0)*r10*x1632*x1636))+((x1632*x1642)));
evalcond[5]=(((r21*x1643))+((r20*x1644))+(((-1.0)*x1646))+(((-1.0)*cj3*r22*x1635))+((x1632*x1633))+(((-1.0)*x1630*x1638))+(((-1.0)*r20*x1632*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1648=((0.317322834645669)*cj5);
IkReal x1649=((0.757142857142857)*cj4);
IkReal x1650=((0.317322834645669)*sj5);
IkReal x1651=((0.757142857142857)*cj5*sj4);
IkReal x1652=((0.757142857142857)*sj4*sj5);
if( IKabs(((((2.24971878515186)*py))+(((-1.0)*r11*x1648))+(((-1.0)*r10*x1651))+(((-1.0)*r10*x1650))+((r11*x1652))+((r12*x1649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1648))+(((-1.0)*r22*x1649))+((r20*x1651))+((r20*x1650))+(((-1.0)*r21*x1652))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*py))+(((-1.0)*r11*x1648))+(((-1.0)*r10*x1651))+(((-1.0)*r10*x1650))+((r11*x1652))+((r12*x1649))))+IKsqr((((r21*x1648))+(((-1.0)*r22*x1649))+((r20*x1651))+((r20*x1650))+(((-1.0)*r21*x1652))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*py))+(((-1.0)*r11*x1648))+(((-1.0)*r10*x1651))+(((-1.0)*r10*x1650))+((r11*x1652))+((r12*x1649))), (((r21*x1648))+(((-1.0)*r22*x1649))+((r20*x1651))+((r20*x1650))+(((-1.0)*r21*x1652))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1653=((1.0)*pz);
IkReal x1654=((0.14105)*cj5);
IkReal x1655=((0.33655)*cj3);
IkReal x1656=(cj4*sj5);
IkReal x1657=((0.33655)*cj5);
IkReal x1658=(r10*sj5);
IkReal x1659=((0.33655)*sj3);
IkReal x1660=(cj4*cj5);
IkReal x1661=(r20*sj5);
IkReal x1662=((0.33655)*cj4);
IkReal x1663=((0.14105)*x1658);
IkReal x1664=((0.4445)*(IKsin(j1)));
IkReal x1665=(r11*x1654);
IkReal x1666=(r21*x1654);
IkReal x1667=((0.14105)*x1661);
IkReal x1668=((0.4445)*(IKcos(j1)));
IkReal x1669=((0.33655)*sj4*sj5);
IkReal x1670=(x1668+x1653);
IkReal x1671=(x1667+x1666);
IkReal x1672=(x1665+x1664+x1663);
evalcond[0]=(x1672+(((-1.0)*r12*x1662))+(((-1.0)*r11*x1669))+(((-1.0)*py))+((r10*sj4*x1657)));
evalcond[1]=(x1671+((r20*sj4*x1657))+(((-1.0)*r22*x1662))+(((-1.0)*r21*x1669))+(((-1.0)*x1670)));
evalcond[2]=((((-1.0)*r21*x1655*x1656))+(((-1.0)*r21*sj3*x1657))+((r22*sj4*x1655))+((r20*x1655*x1660))+py+(((-1.0)*x1672))+(((-1.0)*x1659*x1661)));
evalcond[3]=(((r10*x1655*x1660))+x1671+((r12*sj4*x1655))+(((-1.0)*r11*x1655*x1656))+(((-1.0)*x1658*x1659))+(((-1.0)*x1670))+(((-1.0)*r11*sj3*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1673=((1.0)*cj1);
IkReal x1674=(sj4*sj5);
IkReal x1675=(cj5*sj4);
IkReal x1676=((1.0)*sj1);
IkReal x1677=(sj1*x1675);
IkReal x1678=(cj4*x1676);
if( IKabs(((((-1.0)*cj4*r12*x1673))+((cj1*r10*x1675))+(((-1.0)*r21*x1674*x1676))+((r20*x1677))+(((-1.0)*r11*x1673*x1674))+(((-1.0)*r22*x1678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x1674*x1676))+(((-1.0)*r12*x1678))+((cj1*r21*x1674))+((r10*x1677))+(((-1.0)*r20*x1673*x1675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1673))+((cj1*r10*x1675))+(((-1.0)*r21*x1674*x1676))+((r20*x1677))+(((-1.0)*r11*x1673*x1674))+(((-1.0)*r22*x1678))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x1674*x1676))+(((-1.0)*r12*x1678))+((cj1*r21*x1674))+((r10*x1677))+(((-1.0)*r20*x1673*x1675))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1673))+((cj1*r10*x1675))+(((-1.0)*r21*x1674*x1676))+((r20*x1677))+(((-1.0)*r11*x1673*x1674))+(((-1.0)*r22*x1678))), (((cj1*cj4*r22))+(((-1.0)*r11*x1674*x1676))+(((-1.0)*r12*x1678))+((cj1*r21*x1674))+((r10*x1677))+(((-1.0)*r20*x1673*x1675))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1679=IKcos(j2);
IkReal x1680=IKsin(j2);
IkReal x1681=(cj3*cj4);
IkReal x1682=(r21*sj5);
IkReal x1683=((0.33655)*sj1);
IkReal x1684=((1.0)*sj4);
IkReal x1685=((1.0)*cj5);
IkReal x1686=((0.14105)*cj5);
IkReal x1687=((1.0)*sj1);
IkReal x1688=(cj5*sj4);
IkReal x1689=((1.0)*cj4);
IkReal x1690=(r10*sj5);
IkReal x1691=(r11*sj5);
IkReal x1692=(r20*sj5);
IkReal x1693=(cj5*sj3);
IkReal x1694=(cj1*x1679);
IkReal x1695=(cj1*x1680);
IkReal x1696=(x1679*x1687);
IkReal x1697=((1.0)*x1695);
IkReal x1698=(x1696+x1697);
evalcond[0]=((((-1.0)*x1682*x1684))+x1694+(((-1.0)*r22*x1689))+(((-1.0)*x1680*x1687))+((r20*x1688)));
evalcond[1]=((((-1.0)*r12*x1689))+(((-1.0)*x1698))+((r10*x1688))+(((-1.0)*x1684*x1691)));
evalcond[2]=((((-0.33655)*x1694))+((x1680*x1683))+((r21*x1686))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x1692)));
evalcond[3]=(((r11*x1686))+(((-1.0)*py))+(((0.33655)*x1695))+((x1679*x1683))+(((0.4445)*sj1))+(((0.14105)*x1690)));
evalcond[4]=(((sj3*x1690))+(((-1.0)*cj3*r12*x1684))+(((-1.0)*r10*x1681*x1685))+(((-1.0)*x1694))+((r11*x1693))+((sj1*x1680))+((x1681*x1691)));
evalcond[5]=(((x1681*x1682))+((r21*x1693))+((sj3*x1692))+(((-1.0)*x1698))+(((-1.0)*cj3*r22*x1684))+(((-1.0)*r20*x1681*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1699=((0.757142857142857)*sj4);
IkReal x1700=((0.757142857142857)*cj4);
IkReal x1701=((0.317322834645669)*cj5);
IkReal x1702=((0.317322834645669)*sj5);
if( IKabs((((cj5*r00*x1699))+((r01*x1701))+((r00*x1702))+(((-1.0)*r02*x1700))+(((-1.0)*r01*sj5*x1699))+(((-2.24971878515186)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1702))+((r21*x1701))+(((-1.0)*r22*x1700))+((cj5*r20*x1699))+(((-1.0)*r21*sj5*x1699))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*x1699))+((r01*x1701))+((r00*x1702))+(((-1.0)*r02*x1700))+(((-1.0)*r01*sj5*x1699))+(((-2.24971878515186)*px))))+IKsqr((((r20*x1702))+((r21*x1701))+(((-1.0)*r22*x1700))+((cj5*r20*x1699))+(((-1.0)*r21*sj5*x1699))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r00*x1699))+((r01*x1701))+((r00*x1702))+(((-1.0)*r02*x1700))+(((-1.0)*r01*sj5*x1699))+(((-2.24971878515186)*px))), (((r20*x1702))+((r21*x1701))+(((-1.0)*r22*x1700))+((cj5*r20*x1699))+(((-1.0)*r21*sj5*x1699))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1703=((0.14105)*cj5);
IkReal x1704=((0.33655)*sj4);
IkReal x1705=(r01*sj5);
IkReal x1706=(cj5*r20);
IkReal x1707=(cj5*r00);
IkReal x1708=((0.14105)*sj5);
IkReal x1709=((0.33655)*sj3);
IkReal x1710=(r21*sj5);
IkReal x1711=((0.33655)*cj4);
IkReal x1712=((0.4445)*(IKsin(j1)));
IkReal x1713=(r00*x1708);
IkReal x1714=(r01*x1703);
IkReal x1715=((0.4445)*(IKcos(j1)));
IkReal x1716=(r21*x1703);
IkReal x1717=(r20*x1708);
IkReal x1718=(cj3*x1711);
IkReal x1719=(x1712+px);
IkReal x1720=(x1717+x1716);
IkReal x1721=(x1713+x1714);
evalcond[0]=(((r02*x1711))+x1719+(((-1.0)*x1704*x1707))+((x1704*x1705))+(((-1.0)*x1721)));
evalcond[1]=(x1720+(((-1.0)*x1715))+((x1704*x1706))+(((-1.0)*pz))+(((-1.0)*r22*x1711))+(((-1.0)*x1704*x1710)));
evalcond[2]=(((x1710*x1718))+x1719+((r20*sj5*x1709))+((cj5*r21*x1709))+(((-1.0)*cj3*r22*x1704))+(((-1.0)*x1706*x1718))+(((-1.0)*x1721)));
evalcond[3]=(((cj3*r02*x1704))+x1715+(((-1.0)*r00*sj5*x1709))+pz+(((-1.0)*x1705*x1718))+(((-1.0)*x1720))+((x1707*x1718))+(((-1.0)*cj5*r01*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1722=(cj4*sj1);
IkReal x1723=(cj1*sj4);
IkReal x1724=((1.0)*cj5);
IkReal x1725=(r21*sj5);
IkReal x1726=(cj1*cj4);
IkReal x1727=(sj1*sj4);
IkReal x1728=(r01*sj4*sj5);
if( IKabs((((cj5*r20*x1727))+(((-1.0)*r22*x1722))+((r02*x1726))+(((-1.0)*r00*x1723*x1724))+(((-1.0)*x1725*x1727))+((r01*sj5*x1723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1723*x1725))+((r02*x1722))+((r22*x1726))+(((-1.0)*r20*x1723*x1724))+(((-1.0)*r00*x1724*x1727))+((r01*sj5*x1727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*x1727))+(((-1.0)*r22*x1722))+((r02*x1726))+(((-1.0)*r00*x1723*x1724))+(((-1.0)*x1725*x1727))+((r01*sj5*x1723))))+IKsqr((((x1723*x1725))+((r02*x1722))+((r22*x1726))+(((-1.0)*r20*x1723*x1724))+(((-1.0)*r00*x1724*x1727))+((r01*sj5*x1727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*x1727))+(((-1.0)*r22*x1722))+((r02*x1726))+(((-1.0)*r00*x1723*x1724))+(((-1.0)*x1725*x1727))+((r01*sj5*x1723))), (((x1723*x1725))+((r02*x1722))+((r22*x1726))+(((-1.0)*r20*x1723*x1724))+(((-1.0)*r00*x1724*x1727))+((r01*sj5*x1727))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1729=IKcos(j2);
IkReal x1730=IKsin(j2);
IkReal x1731=(cj5*r01);
IkReal x1732=((1.0)*cj3);
IkReal x1733=(cj5*r00);
IkReal x1734=((0.33655)*sj1);
IkReal x1735=((1.0)*sj1);
IkReal x1736=(cj5*r21);
IkReal x1737=(r00*sj5);
IkReal x1738=(cj5*r20);
IkReal x1739=((1.0)*cj4);
IkReal x1740=(r20*sj5);
IkReal x1741=(cj1*x1729);
IkReal x1742=(cj3*cj4*sj5);
IkReal x1743=((1.0)*sj4*sj5);
IkReal x1744=(cj1*x1730);
IkReal x1745=(x1730*x1735);
evalcond[0]=(x1744+((sj1*x1729))+((sj4*x1733))+(((-1.0)*r01*x1743))+(((-1.0)*r02*x1739)));
evalcond[1]=(x1741+((sj4*x1738))+(((-1.0)*x1745))+(((-1.0)*r21*x1743))+(((-1.0)*r22*x1739)));
evalcond[2]=(((x1730*x1734))+(((0.14105)*x1740))+(((-1.0)*pz))+(((0.14105)*x1736))+(((-0.33655)*x1741))+(((-0.4445)*cj1)));
evalcond[3]=((((-0.4445)*sj1))+(((-1.0)*x1729*x1734))+(((-1.0)*px))+(((0.14105)*x1737))+(((0.14105)*x1731))+(((-0.33655)*x1744)));
evalcond[4]=(x1741+(((-1.0)*r02*sj4*x1732))+(((-1.0)*x1745))+(((-1.0)*cj4*x1732*x1733))+((r01*x1742))+((sj3*x1737))+((sj3*x1731)));
evalcond[5]=((((-1.0)*x1729*x1735))+((r21*x1742))+(((-1.0)*x1744))+(((-1.0)*cj4*x1732*x1738))+((sj3*x1740))+(((-1.0)*r22*sj4*x1732))+((sj3*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1746=((0.757142857142857)*sj4);
IkReal x1747=((0.317322834645669)*sj5);
IkReal x1748=((0.317322834645669)*cj5);
IkReal x1749=((0.757142857142857)*cj4);
if( IKabs((((r01*sj5*x1746))+(((2.24971878515186)*px))+((r02*x1749))+(((-1.0)*cj5*r00*x1746))+(((-1.0)*r00*x1747))+(((-1.0)*r01*x1748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj5*x1746))+(((-1.0)*r22*x1749))+((r21*x1748))+((r20*x1747))+((cj5*r20*x1746))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x1746))+(((2.24971878515186)*px))+((r02*x1749))+(((-1.0)*cj5*r00*x1746))+(((-1.0)*r00*x1747))+(((-1.0)*r01*x1748))))+IKsqr(((((-1.0)*r21*sj5*x1746))+(((-1.0)*r22*x1749))+((r21*x1748))+((r20*x1747))+((cj5*r20*x1746))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*sj5*x1746))+(((2.24971878515186)*px))+((r02*x1749))+(((-1.0)*cj5*r00*x1746))+(((-1.0)*r00*x1747))+(((-1.0)*r01*x1748))), ((((-1.0)*r21*sj5*x1746))+(((-1.0)*r22*x1749))+((r21*x1748))+((r20*x1747))+((cj5*r20*x1746))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1750=((1.0)*pz);
IkReal x1751=((0.14105)*cj5);
IkReal x1752=((0.33655)*sj4);
IkReal x1753=(r01*sj5);
IkReal x1754=(cj5*r20);
IkReal x1755=(cj5*r00);
IkReal x1756=((0.14105)*sj5);
IkReal x1757=((0.33655)*sj3);
IkReal x1758=(r21*sj5);
IkReal x1759=((0.33655)*cj4);
IkReal x1760=(r00*x1756);
IkReal x1761=((0.4445)*(IKsin(j1)));
IkReal x1762=(r01*x1751);
IkReal x1763=(r21*x1751);
IkReal x1764=(r20*x1756);
IkReal x1765=((0.4445)*(IKcos(j1)));
IkReal x1766=(cj3*x1759);
IkReal x1767=(x1765+x1750);
IkReal x1768=(x1763+x1764);
IkReal x1769=(x1762+x1760+x1761);
evalcond[0]=(((x1752*x1755))+x1769+(((-1.0)*px))+(((-1.0)*x1752*x1753))+(((-1.0)*r02*x1759)));
evalcond[1]=(((x1752*x1754))+(((-1.0)*x1767))+x1768+(((-1.0)*r22*x1759))+(((-1.0)*x1752*x1758)));
evalcond[2]=((((-1.0)*x1769))+(((-1.0)*cj5*r21*x1757))+((cj3*r22*x1752))+((x1754*x1766))+px+(((-1.0)*x1758*x1766))+(((-1.0)*r20*sj5*x1757)));
evalcond[3]=((((-1.0)*r00*sj5*x1757))+(((-1.0)*x1753*x1766))+(((-1.0)*x1767))+x1768+(((-1.0)*cj5*r01*x1757))+((x1755*x1766))+((cj3*r02*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1770=((1.0)*r01);
IkReal x1771=(sj1*sj4);
IkReal x1772=(cj5*r00);
IkReal x1773=(cj1*cj4);
IkReal x1774=(cj5*r20);
IkReal x1775=(cj1*sj4);
IkReal x1776=(sj5*x1775);
IkReal x1777=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x1771))+((x1771*x1774))+(((-1.0)*x1770*x1776))+(((-1.0)*r22*x1777))+((x1772*x1775))+(((-1.0)*r02*x1773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1773))+((x1771*x1772))+(((-1.0)*sj5*x1770*x1771))+(((-1.0)*r02*x1777))+(((-1.0)*x1774*x1775))+((r21*x1776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x1771))+((x1771*x1774))+(((-1.0)*x1770*x1776))+(((-1.0)*r22*x1777))+((x1772*x1775))+(((-1.0)*r02*x1773))))+IKsqr((((r22*x1773))+((x1771*x1772))+(((-1.0)*sj5*x1770*x1771))+(((-1.0)*r02*x1777))+(((-1.0)*x1774*x1775))+((r21*x1776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x1771))+((x1771*x1774))+(((-1.0)*x1770*x1776))+(((-1.0)*r22*x1777))+((x1772*x1775))+(((-1.0)*r02*x1773))), (((r22*x1773))+((x1771*x1772))+(((-1.0)*sj5*x1770*x1771))+(((-1.0)*r02*x1777))+(((-1.0)*x1774*x1775))+((r21*x1776))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1778=IKcos(j2);
IkReal x1779=IKsin(j2);
IkReal x1780=(cj5*r01);
IkReal x1781=((1.0)*cj3);
IkReal x1782=(cj5*r00);
IkReal x1783=((0.33655)*sj1);
IkReal x1784=((1.0)*sj1);
IkReal x1785=(cj5*r21);
IkReal x1786=(r00*sj5);
IkReal x1787=(cj5*r20);
IkReal x1788=((1.0)*cj4);
IkReal x1789=(r20*sj5);
IkReal x1790=(cj1*x1778);
IkReal x1791=(cj3*cj4*sj5);
IkReal x1792=((1.0)*sj4*sj5);
IkReal x1793=(cj1*x1779);
IkReal x1794=(x1778*x1784);
IkReal x1795=((1.0)*x1793);
IkReal x1796=(x1795+x1794);
evalcond[0]=(x1790+(((-1.0)*r22*x1788))+((sj4*x1787))+(((-1.0)*r21*x1792))+(((-1.0)*x1779*x1784)));
evalcond[1]=((((-1.0)*x1796))+(((-1.0)*r01*x1792))+((sj4*x1782))+(((-1.0)*r02*x1788)));
evalcond[2]=((((-0.33655)*x1790))+((x1779*x1783))+(((0.14105)*x1785))+(((0.14105)*x1789))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[3]=(((x1778*x1783))+(((0.14105)*x1780))+(((0.14105)*x1786))+(((-1.0)*px))+(((0.33655)*x1793))+(((0.4445)*sj1)));
evalcond[4]=(((sj3*x1780))+((sj3*x1786))+(((-1.0)*cj4*x1781*x1782))+(((-1.0)*r02*sj4*x1781))+(((-1.0)*x1790))+((sj1*x1779))+((r01*x1791)));
evalcond[5]=((((-1.0)*x1796))+((sj3*x1785))+((sj3*x1789))+((r21*x1791))+(((-1.0)*cj4*x1781*x1787))+(((-1.0)*r22*sj4*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1797=((0.33655)*cj0);
IkReal x1798=(cj5*sj4);
IkReal x1799=((0.14105)*cj0);
IkReal x1800=(sj4*sj5);
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(cj0,-2);
if(!x1801.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x1801.value)*(((((-1.0)*r00*x1797*x1798))+(((-1.0)*cj5*r01*x1799))+(((-0.1016)*cj0*sj0))+((cj4*r02*x1797))+((r01*x1797*x1800))+((cj0*px))+(((-1.0)*r00*sj5*x1799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*cj4*r22))+(((-0.757142857142857)*r21*x1800))+(((0.757142857142857)*r20*x1798))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x1801.value)*(((((-1.0)*r00*x1797*x1798))+(((-1.0)*cj5*r01*x1799))+(((-0.1016)*cj0*sj0))+((cj4*r02*x1797))+((r01*x1797*x1800))+((cj0*px))+(((-1.0)*r00*sj5*x1799))))))+IKsqr(((((-0.757142857142857)*cj4*r22))+(((-0.757142857142857)*r21*x1800))+(((0.757142857142857)*r20*x1798))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x1801.value)*(((((-1.0)*r00*x1797*x1798))+(((-1.0)*cj5*r01*x1799))+(((-0.1016)*cj0*sj0))+((cj4*r02*x1797))+((r01*x1797*x1800))+((cj0*px))+(((-1.0)*r00*sj5*x1799))))), ((((-0.757142857142857)*cj4*r22))+(((-0.757142857142857)*r21*x1800))+(((0.757142857142857)*r20*x1798))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1802=IKsin(j1);
IkReal x1803=IKcos(j1);
IkReal x1804=sj0*sj0;
IkReal x1805=cj0*cj0;
IkReal x1806=(cj3*r22);
IkReal x1807=((0.14105)*sj0);
IkReal x1808=(r20*sj5);
IkReal x1809=(cj5*r01);
IkReal x1810=(cj5*r10);
IkReal x1811=((0.33655)*sj4);
IkReal x1812=(cj5*sj0);
IkReal x1813=(r11*sj5);
IkReal x1814=((0.33655)*sj3);
IkReal x1815=(r21*sj5);
IkReal x1816=(r01*sj5);
IkReal x1817=(cj5*r00);
IkReal x1818=((0.14105)*cj5);
IkReal x1819=(cj5*r20);
IkReal x1820=(r10*sj5);
IkReal x1821=(r00*sj5);
IkReal x1822=(cj5*r11);
IkReal x1823=((0.1016)*sj0);
IkReal x1824=((0.33655)*cj4);
IkReal x1825=(cj5*r21);
IkReal x1826=((0.14105)*cj0);
IkReal x1827=(cj0*x1823);
IkReal x1828=(cj0*x1811);
IkReal x1829=((0.4445)*x1803);
IkReal x1830=(cj3*x1824);
IkReal x1831=(cj0*x1818);
IkReal x1832=((0.4445)*x1802);
IkReal x1833=(cj0*sj0*x1832);
evalcond[0]=((((-1.0)*x1829))+(((0.14105)*x1808))+(((-1.0)*x1811*x1815))+(((-1.0)*pz))+(((-1.0)*r22*x1824))+((r21*x1818))+((x1811*x1819)));
evalcond[1]=(((x1804*x1832))+(((-1.0)*sj0*x1810*x1811))+x1827+(((-1.0)*x1807*x1820))+(((-1.0)*x1807*x1822))+((py*sj0))+((r12*sj0*x1824))+((sj0*x1811*x1813)));
evalcond[2]=((((-1.0)*x1827))+(((-1.0)*x1821*x1826))+((cj0*r02*x1824))+(((-1.0)*x1817*x1828))+(((-1.0)*x1809*x1826))+((x1816*x1828))+((cj0*px))+((x1805*x1832)));
evalcond[3]=((((-1.0)*x1813*x1830))+((sj0*x1829))+((x1810*x1830))+(((-1.0)*x1807*x1825))+((pz*sj0))+(((-1.0)*x1814*x1822))+(((-1.0)*x1814*x1820))+((cj3*r12*x1811))+(((-1.0)*x1807*x1808)));
evalcond[4]=(((cj0*x1829))+(((-1.0)*r21*x1831))+(((-1.0)*x1809*x1814))+(((-1.0)*x1808*x1826))+(((-1.0)*x1816*x1830))+((cj3*r02*x1811))+((cj0*pz))+((x1817*x1830))+(((-1.0)*x1814*x1821)));
evalcond[5]=((((-0.14105)*x1820))+((sj0*x1808*x1814))+(((-1.0)*sj0*x1806*x1811))+((sj0*x1832))+(((-1.0)*r11*x1818))+((sj0*x1815*x1830))+((r21*x1812*x1814))+(((0.1016)*cj0))+(((-1.0)*r20*x1812*x1830))+py);
evalcond[6]=((((-1.0)*x1823))+(((-1.0)*x1806*x1828))+(((-0.14105)*x1821))+((cj0*x1808*x1814))+((cj0*x1815*x1830))+((cj0*x1814*x1825))+(((-0.14105)*x1809))+((cj0*x1832))+px+(((-1.0)*cj0*x1819*x1830)));
evalcond[7]=((((-1.0)*x1810*x1828))+((cj0*r12*x1824))+(((-0.1016)*x1804))+x1833+((px*sj0))+(((-1.0)*x1807*x1821))+(((-1.0)*x1807*x1809))+((x1813*x1828)));
evalcond[8]=((((-1.0)*r00*x1811*x1812))+(((0.1016)*x1805))+x1833+((r02*sj0*x1824))+(((-1.0)*x1820*x1826))+((cj0*py))+(((-1.0)*r11*x1831))+((sj0*x1811*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1834=(cj4*sj1);
IkReal x1835=(cj1*sj4);
IkReal x1836=((1.0)*cj5);
IkReal x1837=(r21*sj5);
IkReal x1838=(cj1*cj4);
IkReal x1839=(sj1*sj4);
IkReal x1840=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x1834))+((cj5*r20*x1839))+(((-1.0)*x1837*x1839))+(((-1.0)*r00*x1835*x1836))+((r02*x1838))+((r01*sj5*x1835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1838))+((x1835*x1837))+((r02*x1834))+(((-1.0)*r20*x1835*x1836))+(((-1.0)*r00*x1836*x1839))+((r01*sj5*x1839)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1834))+((cj5*r20*x1839))+(((-1.0)*x1837*x1839))+(((-1.0)*r00*x1835*x1836))+((r02*x1838))+((r01*sj5*x1835))))+IKsqr((((r22*x1838))+((x1835*x1837))+((r02*x1834))+(((-1.0)*r20*x1835*x1836))+(((-1.0)*r00*x1836*x1839))+((r01*sj5*x1839))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1834))+((cj5*r20*x1839))+(((-1.0)*x1837*x1839))+(((-1.0)*r00*x1835*x1836))+((r02*x1838))+((r01*sj5*x1835))), (((r22*x1838))+((x1835*x1837))+((r02*x1834))+(((-1.0)*r20*x1835*x1836))+(((-1.0)*r00*x1836*x1839))+((r01*sj5*x1839))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1841=IKcos(j2);
IkReal x1842=IKsin(j2);
IkReal x1843=(cj5*r01);
IkReal x1844=((1.0)*cj3);
IkReal x1845=(cj5*r00);
IkReal x1846=((0.33655)*sj1);
IkReal x1847=((1.0)*sj1);
IkReal x1848=(cj5*r21);
IkReal x1849=(r00*sj5);
IkReal x1850=(cj5*r20);
IkReal x1851=((1.0)*cj4);
IkReal x1852=(r20*sj5);
IkReal x1853=(cj1*x1841);
IkReal x1854=(cj3*cj4*sj5);
IkReal x1855=((1.0)*sj4*sj5);
IkReal x1856=(cj1*x1842);
IkReal x1857=(x1842*x1847);
evalcond[0]=(((sj1*x1841))+(((-1.0)*r01*x1855))+(((-1.0)*r02*x1851))+x1856+((sj4*x1845)));
evalcond[1]=(((sj4*x1850))+(((-1.0)*r22*x1851))+x1853+(((-1.0)*r21*x1855))+(((-1.0)*x1857)));
evalcond[2]=((((0.14105)*x1852))+(((-0.33655)*x1853))+(((-1.0)*pz))+(((-0.4445)*cj1))+((x1842*x1846))+(((0.14105)*x1848)));
evalcond[3]=((((-1.0)*x1841*x1846))+(((-0.4445)*sj1))+(((-0.33655)*x1856))+(((-1.0)*px))+(((0.14105)*x1849))+(((0.14105)*x1843)));
evalcond[4]=((((-1.0)*cj4*x1844*x1845))+((r01*x1854))+((sj3*x1849))+((sj3*x1843))+x1853+(((-1.0)*r02*sj4*x1844))+(((-1.0)*x1857)));
evalcond[5]=((((-1.0)*cj4*x1844*x1850))+(((-1.0)*x1841*x1847))+((sj3*x1848))+(((-1.0)*x1856))+((r21*x1854))+((sj3*x1852))+(((-1.0)*r22*sj4*x1844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1858=((1.0)*r01);
IkReal x1859=(sj1*sj4);
IkReal x1860=(cj5*r00);
IkReal x1861=(cj1*cj4);
IkReal x1862=(cj5*r20);
IkReal x1863=(cj1*sj4);
IkReal x1864=(sj5*x1863);
IkReal x1865=((1.0)*cj4*sj1);
if( IKabs((((x1860*x1863))+(((-1.0)*r21*sj5*x1859))+((x1859*x1862))+(((-1.0)*x1858*x1864))+(((-1.0)*r02*x1861))+(((-1.0)*r22*x1865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1865))+((r22*x1861))+((x1859*x1860))+(((-1.0)*sj5*x1858*x1859))+(((-1.0)*x1862*x1863))+((r21*x1864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1860*x1863))+(((-1.0)*r21*sj5*x1859))+((x1859*x1862))+(((-1.0)*x1858*x1864))+(((-1.0)*r02*x1861))+(((-1.0)*r22*x1865))))+IKsqr(((((-1.0)*r02*x1865))+((r22*x1861))+((x1859*x1860))+(((-1.0)*sj5*x1858*x1859))+(((-1.0)*x1862*x1863))+((r21*x1864))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1860*x1863))+(((-1.0)*r21*sj5*x1859))+((x1859*x1862))+(((-1.0)*x1858*x1864))+(((-1.0)*r02*x1861))+(((-1.0)*r22*x1865))), ((((-1.0)*r02*x1865))+((r22*x1861))+((x1859*x1860))+(((-1.0)*sj5*x1858*x1859))+(((-1.0)*x1862*x1863))+((r21*x1864))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1866=IKcos(j2);
IkReal x1867=IKsin(j2);
IkReal x1868=(cj5*r01);
IkReal x1869=((1.0)*cj3);
IkReal x1870=(cj5*r00);
IkReal x1871=((0.33655)*sj1);
IkReal x1872=((1.0)*sj1);
IkReal x1873=(cj5*r21);
IkReal x1874=(r00*sj5);
IkReal x1875=(cj5*r20);
IkReal x1876=((1.0)*cj4);
IkReal x1877=(r20*sj5);
IkReal x1878=(cj1*x1866);
IkReal x1879=(cj3*cj4*sj5);
IkReal x1880=((1.0)*sj4*sj5);
IkReal x1881=(cj1*x1867);
IkReal x1882=(x1866*x1872);
IkReal x1883=((1.0)*x1881);
IkReal x1884=(x1883+x1882);
evalcond[0]=((((-1.0)*r22*x1876))+(((-1.0)*x1867*x1872))+x1878+(((-1.0)*r21*x1880))+((sj4*x1875)));
evalcond[1]=((((-1.0)*r02*x1876))+(((-1.0)*x1884))+(((-1.0)*r01*x1880))+((sj4*x1870)));
evalcond[2]=((((-0.33655)*x1878))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.14105)*x1877))+(((0.14105)*x1873))+((x1867*x1871)));
evalcond[3]=(((x1866*x1871))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.14105)*x1874))+(((0.14105)*x1868))+(((0.33655)*x1881)));
evalcond[4]=((((-1.0)*cj4*x1869*x1870))+((sj3*x1874))+(((-1.0)*r02*sj4*x1869))+((r01*x1879))+((sj3*x1868))+(((-1.0)*x1878))+((sj1*x1867)));
evalcond[5]=((((-1.0)*cj4*x1869*x1875))+((sj3*x1877))+((sj3*x1873))+(((-1.0)*r22*sj4*x1869))+((r21*x1879))+(((-1.0)*x1884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1885=(cj4*r12);
IkReal x1886=(cj4*r22);
IkReal x1887=(cj1*sj4);
IkReal x1888=(r11*sj5);
IkReal x1889=(r21*sj5);
IkReal x1890=((1.0)*sj1);
IkReal x1891=(sj1*sj4);
IkReal x1892=(cj5*r20);
IkReal x1893=((1.0)*cj5*r10);
if( IKabs((((x1887*x1888))+(((-1.0)*sj4*x1889*x1890))+((cj1*x1885))+((x1891*x1892))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1887*x1892))+((x1887*x1889))+((x1888*x1891))+((cj1*x1886))+(((-1.0)*cj5*r10*sj4*x1890))+((sj1*x1885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1887*x1888))+(((-1.0)*sj4*x1889*x1890))+((cj1*x1885))+((x1891*x1892))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1893))))+IKsqr(((((-1.0)*x1887*x1892))+((x1887*x1889))+((x1888*x1891))+((cj1*x1886))+(((-1.0)*cj5*r10*sj4*x1890))+((sj1*x1885))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1887*x1888))+(((-1.0)*sj4*x1889*x1890))+((cj1*x1885))+((x1891*x1892))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1893))), ((((-1.0)*x1887*x1892))+((x1887*x1889))+((x1888*x1891))+((cj1*x1886))+(((-1.0)*cj5*r10*sj4*x1890))+((sj1*x1885))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1894=IKcos(j2);
IkReal x1895=IKsin(j2);
IkReal x1896=(cj3*cj4);
IkReal x1897=(r21*sj5);
IkReal x1898=((0.33655)*sj1);
IkReal x1899=((1.0)*sj4);
IkReal x1900=((1.0)*cj5);
IkReal x1901=((0.14105)*cj5);
IkReal x1902=((1.0)*sj1);
IkReal x1903=(cj5*sj4);
IkReal x1904=((1.0)*cj4);
IkReal x1905=((0.14105)*sj5);
IkReal x1906=(r11*sj5);
IkReal x1907=(cj5*sj3);
IkReal x1908=(sj3*sj5);
IkReal x1909=(cj1*x1894);
IkReal x1910=(cj1*x1895);
IkReal x1911=(x1895*x1902);
evalcond[0]=((((-1.0)*x1899*x1906))+x1910+(((-1.0)*r12*x1904))+((sj1*x1894))+((r10*x1903)));
evalcond[1]=((((-1.0)*x1897*x1899))+(((-1.0)*r22*x1904))+x1909+((r20*x1903))+(((-1.0)*x1911)));
evalcond[2]=((((-0.33655)*x1909))+((r21*x1901))+(((-1.0)*pz))+(((-0.4445)*cj1))+((x1895*x1898))+((r20*x1905)));
evalcond[3]=((((-0.33655)*x1910))+(((-0.4445)*sj1))+(((-1.0)*py))+(((-1.0)*x1894*x1898))+((r11*x1901))+((r10*x1905)));
evalcond[4]=((((-1.0)*cj3*r12*x1899))+x1909+((r11*x1907))+(((-1.0)*r10*x1896*x1900))+(((-1.0)*x1911))+((r10*x1908))+((x1896*x1906)));
evalcond[5]=(((x1896*x1897))+((r21*x1907))+(((-1.0)*x1894*x1902))+(((-1.0)*x1910))+(((-1.0)*r20*x1896*x1900))+((r20*x1908))+(((-1.0)*cj3*r22*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1912=((1.0)*cj1);
IkReal x1913=(sj4*sj5);
IkReal x1914=(cj5*sj4);
IkReal x1915=((1.0)*sj1);
IkReal x1916=(sj1*x1914);
IkReal x1917=(cj4*x1915);
if( IKabs(((((-1.0)*r11*x1912*x1913))+(((-1.0)*r22*x1917))+(((-1.0)*r21*x1913*x1915))+((cj1*r10*x1914))+((r20*x1916))+(((-1.0)*cj4*r12*x1912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1916))+((cj1*cj4*r22))+(((-1.0)*r11*x1913*x1915))+(((-1.0)*r12*x1917))+(((-1.0)*r20*x1912*x1914))+((cj1*r21*x1913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1912*x1913))+(((-1.0)*r22*x1917))+(((-1.0)*r21*x1913*x1915))+((cj1*r10*x1914))+((r20*x1916))+(((-1.0)*cj4*r12*x1912))))+IKsqr((((r10*x1916))+((cj1*cj4*r22))+(((-1.0)*r11*x1913*x1915))+(((-1.0)*r12*x1917))+(((-1.0)*r20*x1912*x1914))+((cj1*r21*x1913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1912*x1913))+(((-1.0)*r22*x1917))+(((-1.0)*r21*x1913*x1915))+((cj1*r10*x1914))+((r20*x1916))+(((-1.0)*cj4*r12*x1912))), (((r10*x1916))+((cj1*cj4*r22))+(((-1.0)*r11*x1913*x1915))+(((-1.0)*r12*x1917))+(((-1.0)*r20*x1912*x1914))+((cj1*r21*x1913))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1918=IKcos(j2);
IkReal x1919=IKsin(j2);
IkReal x1920=(cj3*cj4);
IkReal x1921=(r21*sj5);
IkReal x1922=((0.33655)*sj1);
IkReal x1923=((1.0)*sj4);
IkReal x1924=((1.0)*cj5);
IkReal x1925=((0.14105)*cj5);
IkReal x1926=((1.0)*sj1);
IkReal x1927=(cj5*sj4);
IkReal x1928=((1.0)*cj4);
IkReal x1929=(r10*sj5);
IkReal x1930=(r11*sj5);
IkReal x1931=(r20*sj5);
IkReal x1932=(cj5*sj3);
IkReal x1933=(cj1*x1918);
IkReal x1934=(cj1*x1919);
IkReal x1935=(x1918*x1926);
IkReal x1936=((1.0)*x1934);
IkReal x1937=(x1936+x1935);
evalcond[0]=(((r20*x1927))+(((-1.0)*r22*x1928))+x1933+(((-1.0)*x1919*x1926))+(((-1.0)*x1921*x1923)));
evalcond[1]=((((-1.0)*r12*x1928))+(((-1.0)*x1923*x1930))+((r10*x1927))+(((-1.0)*x1937)));
evalcond[2]=((((-0.33655)*x1933))+(((-1.0)*pz))+(((-0.4445)*cj1))+((x1919*x1922))+((r21*x1925))+(((0.14105)*x1931)));
evalcond[3]=((((0.33655)*x1934))+((x1918*x1922))+(((-1.0)*py))+(((0.4445)*sj1))+(((0.14105)*x1929))+((r11*x1925)));
evalcond[4]=((((-1.0)*x1933))+(((-1.0)*cj3*r12*x1923))+((r11*x1932))+((sj3*x1929))+((sj1*x1919))+(((-1.0)*r10*x1920*x1924))+((x1920*x1930)));
evalcond[5]=((((-1.0)*cj3*r22*x1923))+((r21*x1932))+((x1920*x1921))+(((-1.0)*r20*x1920*x1924))+((sj3*x1931))+(((-1.0)*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1938=((1.0)*sj1);
IkReal x1939=(cj5*sj4);
IkReal x1940=(r20*sj0);
IkReal x1941=((1.0)*cj1);
IkReal x1942=(cj4*r12);
IkReal x1943=(cj4*r22*sj0);
IkReal x1944=(r11*sj4*sj5);
IkReal x1945=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1946.valid){
continue;
}
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1939*x1941))+((cj1*x1942))+((cj1*x1944))+(((-1.0)*x1938*x1945))+(((-1.0)*x1938*x1943))+((sj1*x1939*x1940)))),IkReal((((cj1*x1945))+((cj1*x1943))+(((-1.0)*r10*x1938*x1939))+((sj1*x1944))+((sj1*x1942))+(((-1.0)*x1939*x1940*x1941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1946.value)))+(x1947.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1948=IKsin(j2);
IkReal x1949=IKcos(j2);
IkReal x1950=((1.0)*cj3);
IkReal x1951=(cj5*r00);
IkReal x1952=(r00*sj5);
IkReal x1953=(cj4*cj5);
IkReal x1954=(cj5*r01);
IkReal x1955=(cj0*sj1);
IkReal x1956=(cj5*r21);
IkReal x1957=(cj5*sj4);
IkReal x1958=((1.0)*cj4);
IkReal x1959=(r10*sj5);
IkReal x1960=(cj5*r11);
IkReal x1961=(r20*sj5);
IkReal x1962=((0.33655)*sj0);
IkReal x1963=(cj1*x1949);
IkReal x1964=(cj3*cj4*sj5);
IkReal x1965=(sj1*x1948);
IkReal x1966=((1.0)*sj4*sj5);
IkReal x1967=(cj1*x1948);
IkReal x1968=(sj1*x1949);
evalcond[0]=((((-1.0)*r22*x1958))+((r20*x1957))+(((-1.0)*x1965))+x1963+(((-1.0)*r21*x1966)));
evalcond[1]=(((cj0*x1967))+(((-1.0)*r02*x1958))+(((-1.0)*r01*x1966))+((sj4*x1951))+((x1949*x1955)));
evalcond[2]=(((sj0*x1968))+((sj0*x1967))+((r10*x1957))+(((-1.0)*r12*x1958))+(((-1.0)*r11*x1966)));
evalcond[3]=((((0.14105)*x1961))+(((0.14105)*x1956))+(((-0.33655)*x1963))+(((0.33655)*x1965))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[4]=((((-0.33655)*cj0*x1967))+(((-0.4445)*x1955))+(((0.14105)*x1952))+(((0.14105)*x1954))+(((-1.0)*px))+(((0.1016)*sj0))+(((-0.33655)*x1949*x1955)));
evalcond[5]=((((0.14105)*x1960))+(((0.14105)*x1959))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x1962*x1968))+(((-1.0)*x1962*x1967)));
evalcond[6]=(((sj3*x1956))+((sj3*x1961))+(((-1.0)*r22*sj4*x1950))+(((-1.0)*x1967))+(((-1.0)*x1968))+((r21*x1964))+(((-1.0)*r20*x1950*x1953)));
evalcond[7]=(((cj0*x1963))+((sj3*x1952))+((sj3*x1954))+(((-1.0)*x1948*x1955))+((r01*x1964))+(((-1.0)*cj4*x1950*x1951))+(((-1.0)*r02*sj4*x1950)));
evalcond[8]=(((sj3*x1959))+((sj3*x1960))+((r11*x1964))+((sj0*x1963))+(((-1.0)*r10*x1950*x1953))+(((-1.0)*r12*sj4*x1950))+(((-1.0)*sj0*x1965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1969=((1.0)*cj0);
IkReal x1970=(cj4*r02);
IkReal x1971=(cj1*sj4);
IkReal x1972=(cj4*r22);
IkReal x1973=(cj5*r20);
IkReal x1974=(sj1*sj4);
IkReal x1975=(sj5*x1974);
IkReal x1976=((1.0)*cj5*r00);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1969*x1975))+((cj1*x1970))+(((-1.0)*sj1*x1969*x1972))+(((-1.0)*x1971*x1976))+((cj0*x1973*x1974))+((r01*sj5*x1971)))),IkReal((((cj0*cj1*x1972))+(((-1.0)*x1974*x1976))+((sj1*x1970))+((r01*x1975))+((cj0*r21*sj5*x1971))+(((-1.0)*x1969*x1971*x1973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1977.value)))+(x1978.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1979=IKsin(j2);
IkReal x1980=IKcos(j2);
IkReal x1981=((1.0)*cj3);
IkReal x1982=(cj5*r00);
IkReal x1983=(r00*sj5);
IkReal x1984=(cj4*cj5);
IkReal x1985=(cj5*r01);
IkReal x1986=(cj0*sj1);
IkReal x1987=(cj5*r21);
IkReal x1988=(cj5*sj4);
IkReal x1989=((1.0)*cj4);
IkReal x1990=(r10*sj5);
IkReal x1991=(cj5*r11);
IkReal x1992=(r20*sj5);
IkReal x1993=((0.33655)*sj0);
IkReal x1994=(cj1*x1980);
IkReal x1995=(cj3*cj4*sj5);
IkReal x1996=(sj1*x1979);
IkReal x1997=((1.0)*sj4*sj5);
IkReal x1998=(cj1*x1979);
IkReal x1999=(sj1*x1980);
evalcond[0]=((((-1.0)*r21*x1997))+x1994+(((-1.0)*x1996))+(((-1.0)*r22*x1989))+((r20*x1988)));
evalcond[1]=(((cj0*x1998))+(((-1.0)*r02*x1989))+(((-1.0)*r01*x1997))+((x1980*x1986))+((sj4*x1982)));
evalcond[2]=(((sj0*x1998))+((sj0*x1999))+((r10*x1988))+(((-1.0)*r12*x1989))+(((-1.0)*r11*x1997)));
evalcond[3]=((((0.14105)*x1987))+(((0.14105)*x1992))+(((-1.0)*pz))+(((-0.33655)*x1994))+(((-0.4445)*cj1))+(((0.33655)*x1996)));
evalcond[4]=((((-0.33655)*cj0*x1998))+(((-0.4445)*x1986))+(((0.14105)*x1983))+(((0.14105)*x1985))+(((-0.33655)*x1980*x1986))+(((-1.0)*px))+(((0.1016)*sj0)));
evalcond[5]=((((-1.0)*x1993*x1998))+(((-1.0)*x1993*x1999))+(((-0.1016)*cj0))+(((0.14105)*x1990))+(((0.14105)*x1991))+(((-1.0)*py))+(((-0.4445)*sj0*sj1)));
evalcond[6]=(((sj3*x1987))+(((-1.0)*r22*sj4*x1981))+((r21*x1995))+((sj3*x1992))+(((-1.0)*r20*x1981*x1984))+(((-1.0)*x1998))+(((-1.0)*x1999)));
evalcond[7]=(((sj3*x1983))+((sj3*x1985))+(((-1.0)*cj4*x1981*x1982))+((cj0*x1994))+(((-1.0)*x1979*x1986))+((r01*x1995))+(((-1.0)*r02*sj4*x1981)));
evalcond[8]=(((sj0*x1994))+((r11*x1995))+(((-1.0)*r12*sj4*x1981))+(((-1.0)*r10*x1981*x1984))+((sj3*x1990))+((sj3*x1991))+(((-1.0)*sj0*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2000=(r10*sj0);
IkReal x2001=((0.33655)*sj4);
IkReal x2002=((0.757142857142857)*sj4);
IkReal x2003=(r11*sj0);
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(sj0,-2);
if(!x2004.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x2004.value)*(((((-1.0)*cj5*x2000*x2001))+(((-0.14105)*sj5*x2000))+((sj5*x2001*x2003))+(((0.33655)*cj4*r12*sj0))+(((-0.14105)*cj5*x2003))+(((0.1016)*cj0*sj0))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*cj4*r22))+((cj5*r20*x2002))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-1.0)*r21*sj5*x2002))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x2004.value)*(((((-1.0)*cj5*x2000*x2001))+(((-0.14105)*sj5*x2000))+((sj5*x2001*x2003))+(((0.33655)*cj4*r12*sj0))+(((-0.14105)*cj5*x2003))+(((0.1016)*cj0*sj0))+((py*sj0))))))+IKsqr(((((-0.757142857142857)*cj4*r22))+((cj5*r20*x2002))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-1.0)*r21*sj5*x2002))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x2004.value)*(((((-1.0)*cj5*x2000*x2001))+(((-0.14105)*sj5*x2000))+((sj5*x2001*x2003))+(((0.33655)*cj4*r12*sj0))+(((-0.14105)*cj5*x2003))+(((0.1016)*cj0*sj0))+((py*sj0))))), ((((-0.757142857142857)*cj4*r22))+((cj5*r20*x2002))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-1.0)*r21*sj5*x2002))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2005=IKsin(j1);
IkReal x2006=IKcos(j1);
IkReal x2007=sj0*sj0;
IkReal x2008=cj0*cj0;
IkReal x2009=(cj3*r22);
IkReal x2010=((0.14105)*sj0);
IkReal x2011=(r20*sj5);
IkReal x2012=(cj5*r01);
IkReal x2013=(cj5*r10);
IkReal x2014=((0.33655)*sj4);
IkReal x2015=(cj5*sj0);
IkReal x2016=(r11*sj5);
IkReal x2017=((0.33655)*sj3);
IkReal x2018=(r21*sj5);
IkReal x2019=(r01*sj5);
IkReal x2020=(cj5*r00);
IkReal x2021=((0.14105)*cj5);
IkReal x2022=(cj5*r20);
IkReal x2023=(r10*sj5);
IkReal x2024=(r00*sj5);
IkReal x2025=(cj5*r11);
IkReal x2026=((0.1016)*sj0);
IkReal x2027=((0.33655)*cj4);
IkReal x2028=(cj5*r21);
IkReal x2029=((0.14105)*cj0);
IkReal x2030=(cj0*x2026);
IkReal x2031=(cj0*x2014);
IkReal x2032=((0.4445)*x2006);
IkReal x2033=(cj3*x2027);
IkReal x2034=(cj0*x2021);
IkReal x2035=((0.4445)*x2005);
IkReal x2036=(cj0*sj0*x2035);
evalcond[0]=((((-1.0)*r22*x2027))+(((-1.0)*x2014*x2018))+(((-1.0)*pz))+(((0.14105)*x2011))+(((-1.0)*x2032))+((r21*x2021))+((x2014*x2022)));
evalcond[1]=(((r12*sj0*x2027))+x2030+((x2007*x2035))+(((-1.0)*x2010*x2023))+(((-1.0)*x2010*x2025))+(((-1.0)*sj0*x2013*x2014))+((py*sj0))+((sj0*x2014*x2016)));
evalcond[2]=((((-1.0)*x2020*x2031))+((x2019*x2031))+((x2008*x2035))+((cj0*r02*x2027))+(((-1.0)*x2024*x2029))+(((-1.0)*x2030))+((cj0*px))+(((-1.0)*x2012*x2029)));
evalcond[3]=((((-1.0)*x2016*x2033))+(((-1.0)*x2010*x2011))+(((-1.0)*x2017*x2023))+(((-1.0)*x2017*x2025))+(((-1.0)*x2010*x2028))+((cj3*r12*x2014))+((sj0*x2032))+((pz*sj0))+((x2013*x2033)));
evalcond[4]=((((-1.0)*x2011*x2029))+(((-1.0)*x2017*x2024))+((cj3*r02*x2014))+((cj0*x2032))+(((-1.0)*x2012*x2017))+(((-1.0)*x2019*x2033))+((x2020*x2033))+((cj0*pz))+(((-1.0)*r21*x2034)));
evalcond[5]=((((-1.0)*sj0*x2009*x2014))+((r21*x2015*x2017))+(((-1.0)*r20*x2015*x2033))+((sj0*x2011*x2017))+(((-0.14105)*x2023))+(((-1.0)*r11*x2021))+(((0.1016)*cj0))+py+((sj0*x2035))+((sj0*x2018*x2033)));
evalcond[6]=((((-0.14105)*x2012))+((cj0*x2017*x2028))+((cj0*x2018*x2033))+(((-0.14105)*x2024))+(((-1.0)*x2009*x2031))+((cj0*x2035))+px+(((-1.0)*cj0*x2022*x2033))+(((-1.0)*x2026))+((cj0*x2011*x2017)));
evalcond[7]=((((-1.0)*x2010*x2012))+x2036+(((-1.0)*x2010*x2024))+(((-0.1016)*x2007))+(((-1.0)*x2013*x2031))+((px*sj0))+((cj0*r12*x2027))+((x2016*x2031)));
evalcond[8]=((((-1.0)*x2023*x2029))+x2036+(((-1.0)*r11*x2034))+((r02*sj0*x2027))+(((-1.0)*r00*x2014*x2015))+((cj0*py))+((sj0*x2014*x2019))+(((0.1016)*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2037=(cj4*sj1);
IkReal x2038=(cj1*sj4);
IkReal x2039=((1.0)*cj5);
IkReal x2040=(r21*sj5);
IkReal x2041=(cj1*cj4);
IkReal x2042=(sj1*sj4);
IkReal x2043=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x2037))+(((-1.0)*r00*x2038*x2039))+(((-1.0)*x2040*x2042))+((r02*x2041))+((cj5*r20*x2042))+((r01*sj5*x2038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2038*x2039))+((r22*x2041))+((r01*sj5*x2042))+(((-1.0)*r00*x2039*x2042))+((r02*x2037))+((x2038*x2040)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2037))+(((-1.0)*r00*x2038*x2039))+(((-1.0)*x2040*x2042))+((r02*x2041))+((cj5*r20*x2042))+((r01*sj5*x2038))))+IKsqr(((((-1.0)*r20*x2038*x2039))+((r22*x2041))+((r01*sj5*x2042))+(((-1.0)*r00*x2039*x2042))+((r02*x2037))+((x2038*x2040))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2037))+(((-1.0)*r00*x2038*x2039))+(((-1.0)*x2040*x2042))+((r02*x2041))+((cj5*r20*x2042))+((r01*sj5*x2038))), ((((-1.0)*r20*x2038*x2039))+((r22*x2041))+((r01*sj5*x2042))+(((-1.0)*r00*x2039*x2042))+((r02*x2037))+((x2038*x2040))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2044=IKcos(j2);
IkReal x2045=IKsin(j2);
IkReal x2046=(cj5*r01);
IkReal x2047=((1.0)*cj3);
IkReal x2048=(cj5*r00);
IkReal x2049=((0.33655)*sj1);
IkReal x2050=((1.0)*sj1);
IkReal x2051=(cj5*r21);
IkReal x2052=(r00*sj5);
IkReal x2053=(cj5*r20);
IkReal x2054=((1.0)*cj4);
IkReal x2055=(r20*sj5);
IkReal x2056=(cj1*x2044);
IkReal x2057=(cj3*cj4*sj5);
IkReal x2058=((1.0)*sj4*sj5);
IkReal x2059=(cj1*x2045);
IkReal x2060=(x2045*x2050);
evalcond[0]=((((-1.0)*r01*x2058))+x2059+((sj4*x2048))+(((-1.0)*r02*x2054))+((sj1*x2044)));
evalcond[1]=(x2056+(((-1.0)*r22*x2054))+(((-1.0)*x2060))+(((-1.0)*r21*x2058))+((sj4*x2053)));
evalcond[2]=((((-0.33655)*x2056))+(((0.14105)*x2051))+(((0.14105)*x2055))+(((-1.0)*pz))+((x2045*x2049))+(((-0.4445)*cj1)));
evalcond[3]=((((0.14105)*x2046))+(((-0.33655)*x2059))+(((-0.4445)*sj1))+(((0.14105)*x2052))+(((-1.0)*x2044*x2049))+(((-1.0)*px)));
evalcond[4]=(((r01*x2057))+x2056+((sj3*x2052))+(((-1.0)*x2060))+(((-1.0)*r02*sj4*x2047))+(((-1.0)*cj4*x2047*x2048))+((sj3*x2046)));
evalcond[5]=((((-1.0)*x2044*x2050))+((sj3*x2051))+((sj3*x2055))+(((-1.0)*r22*sj4*x2047))+(((-1.0)*x2059))+(((-1.0)*cj4*x2047*x2053))+((r21*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2061=((1.0)*r01);
IkReal x2062=(sj1*sj4);
IkReal x2063=(cj5*r00);
IkReal x2064=(cj1*cj4);
IkReal x2065=(cj5*r20);
IkReal x2066=(cj1*sj4);
IkReal x2067=(sj5*x2066);
IkReal x2068=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r02*x2064))+(((-1.0)*r21*sj5*x2062))+(((-1.0)*r22*x2068))+(((-1.0)*x2061*x2067))+((x2062*x2065))+((x2063*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2064))+((r21*x2067))+(((-1.0)*r02*x2068))+(((-1.0)*sj5*x2061*x2062))+((x2062*x2063))+(((-1.0)*x2065*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2064))+(((-1.0)*r21*sj5*x2062))+(((-1.0)*r22*x2068))+(((-1.0)*x2061*x2067))+((x2062*x2065))+((x2063*x2066))))+IKsqr((((r22*x2064))+((r21*x2067))+(((-1.0)*r02*x2068))+(((-1.0)*sj5*x2061*x2062))+((x2062*x2063))+(((-1.0)*x2065*x2066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x2064))+(((-1.0)*r21*sj5*x2062))+(((-1.0)*r22*x2068))+(((-1.0)*x2061*x2067))+((x2062*x2065))+((x2063*x2066))), (((r22*x2064))+((r21*x2067))+(((-1.0)*r02*x2068))+(((-1.0)*sj5*x2061*x2062))+((x2062*x2063))+(((-1.0)*x2065*x2066))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2069=IKcos(j2);
IkReal x2070=IKsin(j2);
IkReal x2071=(cj5*r01);
IkReal x2072=((1.0)*cj3);
IkReal x2073=(cj5*r00);
IkReal x2074=((0.33655)*sj1);
IkReal x2075=((1.0)*sj1);
IkReal x2076=(cj5*r21);
IkReal x2077=(r00*sj5);
IkReal x2078=(cj5*r20);
IkReal x2079=((1.0)*cj4);
IkReal x2080=(r20*sj5);
IkReal x2081=(cj1*x2069);
IkReal x2082=(cj3*cj4*sj5);
IkReal x2083=((1.0)*sj4*sj5);
IkReal x2084=(cj1*x2070);
IkReal x2085=(x2069*x2075);
IkReal x2086=((1.0)*x2084);
IkReal x2087=(x2086+x2085);
evalcond[0]=((((-1.0)*r21*x2083))+(((-1.0)*x2070*x2075))+x2081+(((-1.0)*r22*x2079))+((sj4*x2078)));
evalcond[1]=((((-1.0)*r02*x2079))+(((-1.0)*x2087))+((sj4*x2073))+(((-1.0)*r01*x2083)));
evalcond[2]=((((-0.33655)*x2081))+((x2070*x2074))+(((-1.0)*pz))+(((0.14105)*x2080))+(((-0.4445)*cj1))+(((0.14105)*x2076)));
evalcond[3]=(((x2069*x2074))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.14105)*x2071))+(((0.14105)*x2077))+(((0.33655)*x2084)));
evalcond[4]=(((sj3*x2077))+((sj3*x2071))+(((-1.0)*x2081))+(((-1.0)*cj4*x2072*x2073))+((sj1*x2070))+((r01*x2082))+(((-1.0)*r02*sj4*x2072)));
evalcond[5]=(((sj3*x2076))+(((-1.0)*r22*sj4*x2072))+(((-1.0)*cj4*x2072*x2078))+(((-1.0)*x2087))+((r21*x2082))+((sj3*x2080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2088=(cj4*r12);
IkReal x2089=(cj4*r22);
IkReal x2090=(cj1*sj4);
IkReal x2091=(r11*sj5);
IkReal x2092=(r21*sj5);
IkReal x2093=((1.0)*sj1);
IkReal x2094=(sj1*sj4);
IkReal x2095=(cj5*r20);
IkReal x2096=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2090*x2096))+(((-1.0)*sj4*x2092*x2093))+((x2094*x2095))+((cj1*x2088))+(((-1.0)*x2089*x2093))+((x2090*x2091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2091*x2094))+((sj1*x2088))+((cj1*x2089))+((x2090*x2092))+(((-1.0)*x2090*x2095))+(((-1.0)*cj5*r10*sj4*x2093)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2090*x2096))+(((-1.0)*sj4*x2092*x2093))+((x2094*x2095))+((cj1*x2088))+(((-1.0)*x2089*x2093))+((x2090*x2091))))+IKsqr((((x2091*x2094))+((sj1*x2088))+((cj1*x2089))+((x2090*x2092))+(((-1.0)*x2090*x2095))+(((-1.0)*cj5*r10*sj4*x2093))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2090*x2096))+(((-1.0)*sj4*x2092*x2093))+((x2094*x2095))+((cj1*x2088))+(((-1.0)*x2089*x2093))+((x2090*x2091))), (((x2091*x2094))+((sj1*x2088))+((cj1*x2089))+((x2090*x2092))+(((-1.0)*x2090*x2095))+(((-1.0)*cj5*r10*sj4*x2093))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2097=IKcos(j2);
IkReal x2098=IKsin(j2);
IkReal x2099=(cj3*cj4);
IkReal x2100=(r21*sj5);
IkReal x2101=((0.33655)*sj1);
IkReal x2102=((1.0)*sj4);
IkReal x2103=((1.0)*cj5);
IkReal x2104=((0.14105)*cj5);
IkReal x2105=((1.0)*sj1);
IkReal x2106=(cj5*sj4);
IkReal x2107=((1.0)*cj4);
IkReal x2108=((0.14105)*sj5);
IkReal x2109=(r11*sj5);
IkReal x2110=(cj5*sj3);
IkReal x2111=(sj3*sj5);
IkReal x2112=(cj1*x2097);
IkReal x2113=(cj1*x2098);
IkReal x2114=(x2098*x2105);
evalcond[0]=((((-1.0)*r12*x2107))+(((-1.0)*x2102*x2109))+((sj1*x2097))+x2113+((r10*x2106)));
evalcond[1]=(((r20*x2106))+(((-1.0)*r22*x2107))+(((-1.0)*x2100*x2102))+x2112+(((-1.0)*x2114)));
evalcond[2]=(((x2098*x2101))+((r20*x2108))+((r21*x2104))+(((-0.33655)*x2112))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[3]=(((r11*x2104))+(((-0.4445)*sj1))+(((-1.0)*x2097*x2101))+(((-0.33655)*x2113))+((r10*x2108))+(((-1.0)*py)));
evalcond[4]=(((x2099*x2109))+(((-1.0)*r10*x2099*x2103))+(((-1.0)*cj3*r12*x2102))+x2112+(((-1.0)*x2114))+((r10*x2111))+((r11*x2110)));
evalcond[5]=(((x2099*x2100))+((r21*x2110))+(((-1.0)*x2097*x2105))+(((-1.0)*cj3*r22*x2102))+((r20*x2111))+(((-1.0)*r20*x2099*x2103))+(((-1.0)*x2113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2115=((1.0)*cj1);
IkReal x2116=(sj4*sj5);
IkReal x2117=(cj5*sj4);
IkReal x2118=((1.0)*sj1);
IkReal x2119=(sj1*x2117);
IkReal x2120=(cj4*x2118);
if( IKabs(((((-1.0)*r22*x2120))+((cj1*r10*x2117))+((r20*x2119))+(((-1.0)*cj4*r12*x2115))+(((-1.0)*r21*x2116*x2118))+(((-1.0)*r11*x2115*x2116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x2116))+(((-1.0)*r11*x2116*x2118))+(((-1.0)*r20*x2115*x2117))+(((-1.0)*r12*x2120))+((r10*x2119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2120))+((cj1*r10*x2117))+((r20*x2119))+(((-1.0)*cj4*r12*x2115))+(((-1.0)*r21*x2116*x2118))+(((-1.0)*r11*x2115*x2116))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x2116))+(((-1.0)*r11*x2116*x2118))+(((-1.0)*r20*x2115*x2117))+(((-1.0)*r12*x2120))+((r10*x2119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2120))+((cj1*r10*x2117))+((r20*x2119))+(((-1.0)*cj4*r12*x2115))+(((-1.0)*r21*x2116*x2118))+(((-1.0)*r11*x2115*x2116))), (((cj1*cj4*r22))+((cj1*r21*x2116))+(((-1.0)*r11*x2116*x2118))+(((-1.0)*r20*x2115*x2117))+(((-1.0)*r12*x2120))+((r10*x2119))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2121=IKcos(j2);
IkReal x2122=IKsin(j2);
IkReal x2123=(cj3*cj4);
IkReal x2124=(r21*sj5);
IkReal x2125=((0.33655)*sj1);
IkReal x2126=((1.0)*sj4);
IkReal x2127=((1.0)*cj5);
IkReal x2128=((0.14105)*cj5);
IkReal x2129=((1.0)*sj1);
IkReal x2130=(cj5*sj4);
IkReal x2131=((1.0)*cj4);
IkReal x2132=(r10*sj5);
IkReal x2133=(r11*sj5);
IkReal x2134=(r20*sj5);
IkReal x2135=(cj5*sj3);
IkReal x2136=(cj1*x2121);
IkReal x2137=(cj1*x2122);
IkReal x2138=(x2121*x2129);
IkReal x2139=((1.0)*x2137);
IkReal x2140=(x2138+x2139);
evalcond[0]=((((-1.0)*r22*x2131))+(((-1.0)*x2122*x2129))+x2136+(((-1.0)*x2124*x2126))+((r20*x2130)));
evalcond[1]=((((-1.0)*r12*x2131))+(((-1.0)*x2140))+((r10*x2130))+(((-1.0)*x2126*x2133)));
evalcond[2]=((((0.14105)*x2134))+((x2122*x2125))+(((-0.33655)*x2136))+((r21*x2128))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[3]=((((0.14105)*x2132))+(((0.33655)*x2137))+((r11*x2128))+((x2121*x2125))+(((-1.0)*py))+(((0.4445)*sj1)));
evalcond[4]=(((r11*x2135))+((sj1*x2122))+(((-1.0)*cj3*r12*x2126))+(((-1.0)*r10*x2123*x2127))+((sj3*x2132))+(((-1.0)*x2136))+((x2123*x2133)));
evalcond[5]=(((r21*x2135))+((x2123*x2124))+(((-1.0)*x2140))+((sj3*x2134))+(((-1.0)*r20*x2123*x2127))+(((-1.0)*cj3*r22*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2141=((1.0)*sj1);
IkReal x2142=(cj5*sj4);
IkReal x2143=(r20*sj0);
IkReal x2144=((1.0)*cj1);
IkReal x2145=(cj4*r12);
IkReal x2146=(cj4*r22*sj0);
IkReal x2147=(r11*sj4*sj5);
IkReal x2148=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2149.valid){
continue;
}
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal((((cj1*x2147))+((cj1*x2145))+(((-1.0)*r10*x2142*x2144))+((sj1*x2142*x2143))+(((-1.0)*x2141*x2148))+(((-1.0)*x2141*x2146)))),IkReal((((cj1*x2146))+((cj1*x2148))+(((-1.0)*x2142*x2143*x2144))+((sj1*x2145))+((sj1*x2147))+(((-1.0)*r10*x2141*x2142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2149.value)))+(x2150.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2151=IKsin(j2);
IkReal x2152=IKcos(j2);
IkReal x2153=((1.0)*cj3);
IkReal x2154=(cj5*r00);
IkReal x2155=(r00*sj5);
IkReal x2156=(cj4*cj5);
IkReal x2157=(cj5*r01);
IkReal x2158=(cj0*sj1);
IkReal x2159=(cj5*r21);
IkReal x2160=(cj5*sj4);
IkReal x2161=((1.0)*cj4);
IkReal x2162=(r10*sj5);
IkReal x2163=(cj5*r11);
IkReal x2164=(r20*sj5);
IkReal x2165=((0.33655)*sj0);
IkReal x2166=(cj1*x2152);
IkReal x2167=(cj3*cj4*sj5);
IkReal x2168=(sj1*x2151);
IkReal x2169=((1.0)*sj4*sj5);
IkReal x2170=(cj1*x2151);
IkReal x2171=(sj1*x2152);
evalcond[0]=((((-1.0)*r21*x2169))+x2166+((r20*x2160))+(((-1.0)*r22*x2161))+(((-1.0)*x2168)));
evalcond[1]=((((-1.0)*r01*x2169))+((cj0*x2170))+((x2152*x2158))+((sj4*x2154))+(((-1.0)*r02*x2161)));
evalcond[2]=(((r10*x2160))+(((-1.0)*r12*x2161))+(((-1.0)*r11*x2169))+((sj0*x2171))+((sj0*x2170)));
evalcond[3]=((((-0.33655)*x2166))+(((0.14105)*x2159))+(((0.14105)*x2164))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.33655)*x2168)));
evalcond[4]=((((-0.33655)*cj0*x2170))+(((0.14105)*x2155))+(((0.14105)*x2157))+(((-1.0)*px))+(((-0.4445)*x2158))+(((0.1016)*sj0))+(((-0.33655)*x2152*x2158)));
evalcond[5]=((((-0.1016)*cj0))+(((0.14105)*x2163))+(((0.14105)*x2162))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x2165*x2170))+(((-1.0)*x2165*x2171)));
evalcond[6]=(((sj3*x2164))+(((-1.0)*r22*sj4*x2153))+(((-1.0)*r20*x2153*x2156))+((r21*x2167))+(((-1.0)*x2170))+(((-1.0)*x2171))+((sj3*x2159)));
evalcond[7]=(((r01*x2167))+(((-1.0)*r02*sj4*x2153))+((cj0*x2166))+(((-1.0)*x2151*x2158))+((sj3*x2155))+((sj3*x2157))+(((-1.0)*cj4*x2153*x2154)));
evalcond[8]=(((sj0*x2166))+((sj3*x2162))+((sj3*x2163))+(((-1.0)*r12*sj4*x2153))+(((-1.0)*r10*x2153*x2156))+((r11*x2167))+(((-1.0)*sj0*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2172=((1.0)*cj0);
IkReal x2173=(cj4*r02);
IkReal x2174=(cj1*sj4);
IkReal x2175=(cj4*r22);
IkReal x2176=(cj5*r20);
IkReal x2177=(sj1*sj4);
IkReal x2178=(sj5*x2177);
IkReal x2179=((1.0)*cj5*r00);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((((-1.0)*x2174*x2179))+((cj1*x2173))+((cj0*x2176*x2177))+(((-1.0)*sj1*x2172*x2175))+((r01*sj5*x2174))+(((-1.0)*r21*x2172*x2178)))),IkReal((((sj1*x2173))+((r01*x2178))+((cj0*cj1*x2175))+((cj0*r21*sj5*x2174))+(((-1.0)*x2172*x2174*x2176))+(((-1.0)*x2177*x2179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2181.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2182=IKsin(j2);
IkReal x2183=IKcos(j2);
IkReal x2184=((1.0)*cj3);
IkReal x2185=(cj5*r00);
IkReal x2186=(r00*sj5);
IkReal x2187=(cj4*cj5);
IkReal x2188=(cj5*r01);
IkReal x2189=(cj0*sj1);
IkReal x2190=(cj5*r21);
IkReal x2191=(cj5*sj4);
IkReal x2192=((1.0)*cj4);
IkReal x2193=(r10*sj5);
IkReal x2194=(cj5*r11);
IkReal x2195=(r20*sj5);
IkReal x2196=((0.33655)*sj0);
IkReal x2197=(cj1*x2183);
IkReal x2198=(cj3*cj4*sj5);
IkReal x2199=(sj1*x2182);
IkReal x2200=((1.0)*sj4*sj5);
IkReal x2201=(cj1*x2182);
IkReal x2202=(sj1*x2183);
evalcond[0]=((((-1.0)*x2199))+x2197+((r20*x2191))+(((-1.0)*r21*x2200))+(((-1.0)*r22*x2192)));
evalcond[1]=(((x2183*x2189))+((cj0*x2201))+(((-1.0)*r02*x2192))+((sj4*x2185))+(((-1.0)*r01*x2200)));
evalcond[2]=((((-1.0)*r11*x2200))+(((-1.0)*r12*x2192))+((sj0*x2202))+((sj0*x2201))+((r10*x2191)));
evalcond[3]=((((-1.0)*pz))+(((0.33655)*x2199))+(((0.14105)*x2190))+(((0.14105)*x2195))+(((-0.4445)*cj1))+(((-0.33655)*x2197)));
evalcond[4]=((((-0.33655)*cj0*x2201))+(((-0.4445)*x2189))+(((-0.33655)*x2183*x2189))+(((-1.0)*px))+(((0.14105)*x2188))+(((0.14105)*x2186))+(((0.1016)*sj0)));
evalcond[5]=((((-1.0)*x2196*x2201))+(((-1.0)*x2196*x2202))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((0.14105)*x2194))+(((0.14105)*x2193)));
evalcond[6]=((((-1.0)*x2201))+(((-1.0)*x2202))+(((-1.0)*r20*x2184*x2187))+((sj3*x2190))+((sj3*x2195))+(((-1.0)*r22*sj4*x2184))+((r21*x2198)));
evalcond[7]=(((sj3*x2188))+((sj3*x2186))+(((-1.0)*cj4*x2184*x2185))+(((-1.0)*r02*sj4*x2184))+((cj0*x2197))+(((-1.0)*x2182*x2189))+((r01*x2198)));
evalcond[8]=((((-1.0)*r12*sj4*x2184))+((sj3*x2194))+((sj3*x2193))+((sj0*x2197))+(((-1.0)*r10*x2184*x2187))+((r11*x2198))+(((-1.0)*sj0*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2203=((1.0)*cj0);
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2203))+(((-1.0)*r20*sj5*x2203)))),IkReal((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x2203))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2204.value)))+(x2205.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2206=IKsin(j3);
IkReal x2207=IKcos(j3);
IkReal x2208=((1.0)*cj5);
IkReal x2209=(cj4*x2206);
IkReal x2210=((1.0)*sj5*x2207);
IkReal x2211=((1.0)*sj4*x2206);
evalcond[0]=((((-1.0)*r22*x2211))+(((-1.0)*r21*x2207*x2208))+(((-1.0)*r20*x2210))+((r21*sj5*x2209))+(((-1.0)*r20*x2208*x2209)));
evalcond[1]=(cj0+(((-1.0)*r11*x2207*x2208))+(((-1.0)*r10*x2210))+(((-1.0)*r12*x2211))+(((-1.0)*r10*x2208*x2209))+((r11*sj5*x2209)));
evalcond[2]=((((-1.0)*sj0))+((r01*sj5*x2209))+(((-1.0)*r02*x2211))+(((-1.0)*r01*x2207*x2208))+(((-1.0)*r00*x2210))+(((-1.0)*r00*x2208*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2212=((0.317322834645669)*cj5);
IkReal x2213=((0.757142857142857)*cj4);
IkReal x2214=((0.317322834645669)*sj5);
IkReal x2215=((0.757142857142857)*cj5*sj4);
IkReal x2216=((0.757142857142857)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x2216))+(((-1.0)*r12*x2213))+((r11*x2212))+((r10*x2215))+((r10*x2214))+(((-2.24971878515186)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2215))+((r20*x2214))+(((-1.0)*r22*x2213))+(((-1.0)*r21*x2216))+((r21*x2212))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2216))+(((-1.0)*r12*x2213))+((r11*x2212))+((r10*x2215))+((r10*x2214))+(((-2.24971878515186)*py))))+IKsqr((((r20*x2215))+((r20*x2214))+(((-1.0)*r22*x2213))+(((-1.0)*r21*x2216))+((r21*x2212))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x2216))+(((-1.0)*r12*x2213))+((r11*x2212))+((r10*x2215))+((r10*x2214))+(((-2.24971878515186)*py))), (((r20*x2215))+((r20*x2214))+(((-1.0)*r22*x2213))+(((-1.0)*r21*x2216))+((r21*x2212))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2217=((0.14105)*cj5);
IkReal x2218=((0.33655)*cj3);
IkReal x2219=(cj4*sj5);
IkReal x2220=((0.33655)*cj5);
IkReal x2221=(r10*sj5);
IkReal x2222=((0.33655)*sj3);
IkReal x2223=(cj4*cj5);
IkReal x2224=(r20*sj5);
IkReal x2225=((0.33655)*cj4);
IkReal x2226=((0.4445)*(IKsin(j1)));
IkReal x2227=((0.14105)*x2221);
IkReal x2228=(r11*x2217);
IkReal x2229=((0.4445)*(IKcos(j1)));
IkReal x2230=(r21*x2217);
IkReal x2231=((0.14105)*x2224);
IkReal x2232=((0.33655)*sj4*sj5);
IkReal x2233=(x2226+py);
IkReal x2234=(x2231+x2230);
IkReal x2235=(x2228+x2227);
evalcond[0]=(((r12*x2225))+x2233+(((-1.0)*r10*sj4*x2220))+(((-1.0)*x2235))+((r11*x2232)));
evalcond[1]=((((-1.0)*r21*x2232))+x2234+(((-1.0)*pz))+(((-1.0)*x2229))+(((-1.0)*r22*x2225))+((r20*sj4*x2220)));
evalcond[2]=((((-1.0)*r22*sj4*x2218))+((r21*x2218*x2219))+x2233+((r21*sj3*x2220))+((x2222*x2224))+(((-1.0)*r20*x2218*x2223))+(((-1.0)*x2235)));
evalcond[3]=(x2229+(((-1.0)*x2221*x2222))+((r12*sj4*x2218))+((r10*x2218*x2223))+(((-1.0)*x2234))+pz+(((-1.0)*r11*x2218*x2219))+(((-1.0)*r11*sj3*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2236=(cj4*r12);
IkReal x2237=(cj4*r22);
IkReal x2238=(cj1*sj4);
IkReal x2239=(r11*sj5);
IkReal x2240=(r21*sj5);
IkReal x2241=((1.0)*sj1);
IkReal x2242=(sj1*sj4);
IkReal x2243=(cj5*r20);
IkReal x2244=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2237*x2241))+((x2238*x2239))+(((-1.0)*x2238*x2244))+(((-1.0)*sj4*x2240*x2241))+((cj1*x2236))+((x2242*x2243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*sj4*x2241))+((sj1*x2236))+(((-1.0)*x2238*x2243))+((x2239*x2242))+((x2238*x2240))+((cj1*x2237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2237*x2241))+((x2238*x2239))+(((-1.0)*x2238*x2244))+(((-1.0)*sj4*x2240*x2241))+((cj1*x2236))+((x2242*x2243))))+IKsqr(((((-1.0)*cj5*r10*sj4*x2241))+((sj1*x2236))+(((-1.0)*x2238*x2243))+((x2239*x2242))+((x2238*x2240))+((cj1*x2237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2237*x2241))+((x2238*x2239))+(((-1.0)*x2238*x2244))+(((-1.0)*sj4*x2240*x2241))+((cj1*x2236))+((x2242*x2243))), ((((-1.0)*cj5*r10*sj4*x2241))+((sj1*x2236))+(((-1.0)*x2238*x2243))+((x2239*x2242))+((x2238*x2240))+((cj1*x2237))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2245=IKcos(j2);
IkReal x2246=IKsin(j2);
IkReal x2247=(cj3*cj4);
IkReal x2248=(r21*sj5);
IkReal x2249=((0.33655)*sj1);
IkReal x2250=((1.0)*sj4);
IkReal x2251=((1.0)*cj5);
IkReal x2252=((0.14105)*cj5);
IkReal x2253=((1.0)*sj1);
IkReal x2254=(cj5*sj4);
IkReal x2255=((1.0)*cj4);
IkReal x2256=((0.14105)*sj5);
IkReal x2257=(r11*sj5);
IkReal x2258=(cj5*sj3);
IkReal x2259=(sj3*sj5);
IkReal x2260=(cj1*x2245);
IkReal x2261=(cj1*x2246);
IkReal x2262=(x2246*x2253);
evalcond[0]=(((r10*x2254))+x2261+(((-1.0)*r12*x2255))+((sj1*x2245))+(((-1.0)*x2250*x2257)));
evalcond[1]=(x2260+(((-1.0)*r22*x2255))+((r20*x2254))+(((-1.0)*x2248*x2250))+(((-1.0)*x2262)));
evalcond[2]=(((x2246*x2249))+((r20*x2256))+(((-1.0)*pz))+(((-0.33655)*x2260))+(((-0.4445)*cj1))+((r21*x2252)));
evalcond[3]=(((r10*x2256))+(((-0.4445)*sj1))+(((-1.0)*py))+(((-0.33655)*x2261))+(((-1.0)*x2245*x2249))+((r11*x2252)));
evalcond[4]=(((r10*x2259))+x2260+(((-1.0)*cj3*r12*x2250))+((x2247*x2257))+(((-1.0)*x2262))+(((-1.0)*r10*x2247*x2251))+((r11*x2258)));
evalcond[5]=((((-1.0)*r20*x2247*x2251))+(((-1.0)*cj3*r22*x2250))+((x2247*x2248))+((r20*x2259))+(((-1.0)*x2245*x2253))+((r21*x2258))+(((-1.0)*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2263=((0.317322834645669)*cj5);
IkReal x2264=((0.757142857142857)*cj4);
IkReal x2265=((0.317322834645669)*sj5);
IkReal x2266=((0.757142857142857)*cj5*sj4);
IkReal x2267=((0.757142857142857)*sj4*sj5);
if( IKabs(((((2.24971878515186)*py))+((r11*x2267))+((r12*x2264))+(((-1.0)*r10*x2266))+(((-1.0)*r10*x2265))+(((-1.0)*r11*x2263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2263))+(((-1.0)*r21*x2267))+(((-1.0)*r22*x2264))+((r20*x2266))+((r20*x2265))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*py))+((r11*x2267))+((r12*x2264))+(((-1.0)*r10*x2266))+(((-1.0)*r10*x2265))+(((-1.0)*r11*x2263))))+IKsqr((((r21*x2263))+(((-1.0)*r21*x2267))+(((-1.0)*r22*x2264))+((r20*x2266))+((r20*x2265))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*py))+((r11*x2267))+((r12*x2264))+(((-1.0)*r10*x2266))+(((-1.0)*r10*x2265))+(((-1.0)*r11*x2263))), (((r21*x2263))+(((-1.0)*r21*x2267))+(((-1.0)*r22*x2264))+((r20*x2266))+((r20*x2265))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2268=((1.0)*pz);
IkReal x2269=((0.14105)*cj5);
IkReal x2270=((0.33655)*cj3);
IkReal x2271=(cj4*sj5);
IkReal x2272=((0.33655)*cj5);
IkReal x2273=(r10*sj5);
IkReal x2274=((0.33655)*sj3);
IkReal x2275=(cj4*cj5);
IkReal x2276=(r20*sj5);
IkReal x2277=((0.33655)*cj4);
IkReal x2278=((0.14105)*x2273);
IkReal x2279=((0.4445)*(IKsin(j1)));
IkReal x2280=(r11*x2269);
IkReal x2281=(r21*x2269);
IkReal x2282=((0.14105)*x2276);
IkReal x2283=((0.4445)*(IKcos(j1)));
IkReal x2284=((0.33655)*sj4*sj5);
IkReal x2285=(x2283+x2268);
IkReal x2286=(x2281+x2282);
IkReal x2287=(x2280+x2279+x2278);
evalcond[0]=(x2287+(((-1.0)*r11*x2284))+(((-1.0)*py))+((r10*sj4*x2272))+(((-1.0)*r12*x2277)));
evalcond[1]=(x2286+(((-1.0)*x2285))+(((-1.0)*r22*x2277))+(((-1.0)*r21*x2284))+((r20*sj4*x2272)));
evalcond[2]=((((-1.0)*x2274*x2276))+(((-1.0)*r21*sj3*x2272))+(((-1.0)*x2287))+py+((r20*x2270*x2275))+(((-1.0)*r21*x2270*x2271))+((r22*sj4*x2270)));
evalcond[3]=(x2286+(((-1.0)*x2285))+(((-1.0)*x2273*x2274))+((r10*x2270*x2275))+((r12*sj4*x2270))+(((-1.0)*r11*x2270*x2271))+(((-1.0)*r11*sj3*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2288=((1.0)*cj1);
IkReal x2289=(sj4*sj5);
IkReal x2290=(cj5*sj4);
IkReal x2291=((1.0)*sj1);
IkReal x2292=(sj1*x2290);
IkReal x2293=(cj4*x2291);
if( IKabs(((((-1.0)*r21*x2289*x2291))+(((-1.0)*r11*x2288*x2289))+((cj1*r10*x2290))+((r20*x2292))+(((-1.0)*r22*x2293))+(((-1.0)*cj4*r12*x2288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((r10*x2292))+((cj1*r21*x2289))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2289*x2291))+(((-1.0)*r20*x2288*x2290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2289*x2291))+(((-1.0)*r11*x2288*x2289))+((cj1*r10*x2290))+((r20*x2292))+(((-1.0)*r22*x2293))+(((-1.0)*cj4*r12*x2288))))+IKsqr((((cj1*cj4*r22))+((r10*x2292))+((cj1*r21*x2289))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2289*x2291))+(((-1.0)*r20*x2288*x2290))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2289*x2291))+(((-1.0)*r11*x2288*x2289))+((cj1*r10*x2290))+((r20*x2292))+(((-1.0)*r22*x2293))+(((-1.0)*cj4*r12*x2288))), (((cj1*cj4*r22))+((r10*x2292))+((cj1*r21*x2289))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2289*x2291))+(((-1.0)*r20*x2288*x2290))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2294=IKcos(j2);
IkReal x2295=IKsin(j2);
IkReal x2296=(cj3*cj4);
IkReal x2297=(r21*sj5);
IkReal x2298=((0.33655)*sj1);
IkReal x2299=((1.0)*sj4);
IkReal x2300=((1.0)*cj5);
IkReal x2301=((0.14105)*cj5);
IkReal x2302=((1.0)*sj1);
IkReal x2303=(cj5*sj4);
IkReal x2304=((1.0)*cj4);
IkReal x2305=(r10*sj5);
IkReal x2306=(r11*sj5);
IkReal x2307=(r20*sj5);
IkReal x2308=(cj5*sj3);
IkReal x2309=(cj1*x2294);
IkReal x2310=(cj1*x2295);
IkReal x2311=(x2294*x2302);
IkReal x2312=((1.0)*x2310);
IkReal x2313=(x2312+x2311);
evalcond[0]=((((-1.0)*r22*x2304))+x2309+((r20*x2303))+(((-1.0)*x2295*x2302))+(((-1.0)*x2297*x2299)));
evalcond[1]=(((r10*x2303))+(((-1.0)*x2299*x2306))+(((-1.0)*x2313))+(((-1.0)*r12*x2304)));
evalcond[2]=(((x2295*x2298))+(((-1.0)*pz))+(((0.14105)*x2307))+(((-0.4445)*cj1))+(((-0.33655)*x2309))+((r21*x2301)));
evalcond[3]=(((r11*x2301))+(((0.33655)*x2310))+(((-1.0)*py))+(((0.14105)*x2305))+(((0.4445)*sj1))+((x2294*x2298)));
evalcond[4]=(((sj1*x2295))+(((-1.0)*x2309))+((r11*x2308))+((sj3*x2305))+((x2296*x2306))+(((-1.0)*cj3*r12*x2299))+(((-1.0)*r10*x2296*x2300)));
evalcond[5]=(((x2296*x2297))+((sj3*x2307))+(((-1.0)*r20*x2296*x2300))+(((-1.0)*cj3*r22*x2299))+((r21*x2308))+(((-1.0)*x2313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2314=((0.757142857142857)*sj4);
IkReal x2315=((0.757142857142857)*cj4);
IkReal x2316=((0.317322834645669)*cj5);
IkReal x2317=((0.317322834645669)*sj5);
if( IKabs((((cj5*r00*x2314))+(((-1.0)*r01*sj5*x2314))+((r01*x2316))+((r00*x2317))+(((-1.0)*r02*x2315))+(((-2.24971878515186)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2315))+((r21*x2316))+((cj5*r20*x2314))+((r20*x2317))+(((-1.0)*r21*sj5*x2314))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*x2314))+(((-1.0)*r01*sj5*x2314))+((r01*x2316))+((r00*x2317))+(((-1.0)*r02*x2315))+(((-2.24971878515186)*px))))+IKsqr(((((-1.0)*r22*x2315))+((r21*x2316))+((cj5*r20*x2314))+((r20*x2317))+(((-1.0)*r21*sj5*x2314))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r00*x2314))+(((-1.0)*r01*sj5*x2314))+((r01*x2316))+((r00*x2317))+(((-1.0)*r02*x2315))+(((-2.24971878515186)*px))), ((((-1.0)*r22*x2315))+((r21*x2316))+((cj5*r20*x2314))+((r20*x2317))+(((-1.0)*r21*sj5*x2314))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2318=((0.14105)*cj5);
IkReal x2319=((0.33655)*sj4);
IkReal x2320=(r01*sj5);
IkReal x2321=(cj5*r20);
IkReal x2322=(cj5*r00);
IkReal x2323=((0.14105)*sj5);
IkReal x2324=((0.33655)*sj3);
IkReal x2325=(r21*sj5);
IkReal x2326=((0.33655)*cj4);
IkReal x2327=((0.4445)*(IKsin(j1)));
IkReal x2328=(r00*x2323);
IkReal x2329=(r01*x2318);
IkReal x2330=((0.4445)*(IKcos(j1)));
IkReal x2331=(r21*x2318);
IkReal x2332=(r20*x2323);
IkReal x2333=(cj3*x2326);
IkReal x2334=(x2327+px);
IkReal x2335=(x2331+x2332);
IkReal x2336=(x2329+x2328);
evalcond[0]=(((r02*x2326))+(((-1.0)*x2336))+((x2319*x2320))+x2334+(((-1.0)*x2319*x2322)));
evalcond[1]=((((-1.0)*x2330))+(((-1.0)*r22*x2326))+((x2319*x2321))+x2335+(((-1.0)*x2319*x2325))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x2336))+x2334+(((-1.0)*x2321*x2333))+((cj5*r21*x2324))+((x2325*x2333))+(((-1.0)*cj3*r22*x2319))+((r20*sj5*x2324)));
evalcond[3]=((((-1.0)*x2335))+x2330+(((-1.0)*x2320*x2333))+(((-1.0)*r00*sj5*x2324))+(((-1.0)*cj5*r01*x2324))+((x2322*x2333))+((cj3*r02*x2319))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2337=(cj4*sj1);
IkReal x2338=(cj1*sj4);
IkReal x2339=((1.0)*cj5);
IkReal x2340=(r21*sj5);
IkReal x2341=(cj1*cj4);
IkReal x2342=(sj1*sj4);
IkReal x2343=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x2340*x2342))+((cj5*r20*x2342))+(((-1.0)*r00*x2338*x2339))+((r02*x2341))+((r01*sj5*x2338))+(((-1.0)*r22*x2337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2337))+(((-1.0)*r00*x2339*x2342))+((r22*x2341))+(((-1.0)*r20*x2338*x2339))+((x2338*x2340))+((r01*sj5*x2342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2340*x2342))+((cj5*r20*x2342))+(((-1.0)*r00*x2338*x2339))+((r02*x2341))+((r01*sj5*x2338))+(((-1.0)*r22*x2337))))+IKsqr((((r02*x2337))+(((-1.0)*r00*x2339*x2342))+((r22*x2341))+(((-1.0)*r20*x2338*x2339))+((x2338*x2340))+((r01*sj5*x2342))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2340*x2342))+((cj5*r20*x2342))+(((-1.0)*r00*x2338*x2339))+((r02*x2341))+((r01*sj5*x2338))+(((-1.0)*r22*x2337))), (((r02*x2337))+(((-1.0)*r00*x2339*x2342))+((r22*x2341))+(((-1.0)*r20*x2338*x2339))+((x2338*x2340))+((r01*sj5*x2342))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2344=IKcos(j2);
IkReal x2345=IKsin(j2);
IkReal x2346=(cj5*r01);
IkReal x2347=((1.0)*cj3);
IkReal x2348=(cj5*r00);
IkReal x2349=((0.33655)*sj1);
IkReal x2350=((1.0)*sj1);
IkReal x2351=(cj5*r21);
IkReal x2352=(r00*sj5);
IkReal x2353=(cj5*r20);
IkReal x2354=((1.0)*cj4);
IkReal x2355=(r20*sj5);
IkReal x2356=(cj1*x2344);
IkReal x2357=(cj3*cj4*sj5);
IkReal x2358=((1.0)*sj4*sj5);
IkReal x2359=(cj1*x2345);
IkReal x2360=(x2345*x2350);
evalcond[0]=(((sj1*x2344))+x2359+(((-1.0)*r01*x2358))+((sj4*x2348))+(((-1.0)*r02*x2354)));
evalcond[1]=(x2356+(((-1.0)*x2360))+(((-1.0)*r21*x2358))+((sj4*x2353))+(((-1.0)*r22*x2354)));
evalcond[2]=(((x2345*x2349))+(((-0.33655)*x2356))+(((0.14105)*x2355))+(((0.14105)*x2351))+(((-1.0)*pz))+(((-0.4445)*cj1)));
evalcond[3]=((((-1.0)*x2344*x2349))+(((-0.4445)*sj1))+(((-0.33655)*x2359))+(((0.14105)*x2346))+(((0.14105)*x2352))+(((-1.0)*px)));
evalcond[4]=(((r01*x2357))+x2356+(((-1.0)*x2360))+(((-1.0)*r02*sj4*x2347))+((sj3*x2352))+(((-1.0)*cj4*x2347*x2348))+((sj3*x2346)));
evalcond[5]=((((-1.0)*r22*sj4*x2347))+(((-1.0)*x2359))+(((-1.0)*x2344*x2350))+((sj3*x2355))+((sj3*x2351))+((r21*x2357))+(((-1.0)*cj4*x2347*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2361=((0.757142857142857)*sj4);
IkReal x2362=((0.317322834645669)*sj5);
IkReal x2363=((0.317322834645669)*cj5);
IkReal x2364=((0.757142857142857)*cj4);
if( IKabs(((((2.24971878515186)*px))+((r02*x2364))+(((-1.0)*r01*x2363))+(((-1.0)*r00*x2362))+(((-1.0)*cj5*r00*x2361))+((r01*sj5*x2361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2362))+((cj5*r20*x2361))+(((-1.0)*r21*sj5*x2361))+(((-1.0)*r22*x2364))+((r21*x2363))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.24971878515186)*px))+((r02*x2364))+(((-1.0)*r01*x2363))+(((-1.0)*r00*x2362))+(((-1.0)*cj5*r00*x2361))+((r01*sj5*x2361))))+IKsqr((((r20*x2362))+((cj5*r20*x2361))+(((-1.0)*r21*sj5*x2361))+(((-1.0)*r22*x2364))+((r21*x2363))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.24971878515186)*px))+((r02*x2364))+(((-1.0)*r01*x2363))+(((-1.0)*r00*x2362))+(((-1.0)*cj5*r00*x2361))+((r01*sj5*x2361))), (((r20*x2362))+((cj5*r20*x2361))+(((-1.0)*r21*sj5*x2361))+(((-1.0)*r22*x2364))+((r21*x2363))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2365=((1.0)*pz);
IkReal x2366=((0.14105)*cj5);
IkReal x2367=((0.33655)*sj4);
IkReal x2368=(r01*sj5);
IkReal x2369=(cj5*r20);
IkReal x2370=(cj5*r00);
IkReal x2371=((0.14105)*sj5);
IkReal x2372=((0.33655)*sj3);
IkReal x2373=(r21*sj5);
IkReal x2374=((0.33655)*cj4);
IkReal x2375=(r00*x2371);
IkReal x2376=((0.4445)*(IKsin(j1)));
IkReal x2377=(r01*x2366);
IkReal x2378=(r21*x2366);
IkReal x2379=(r20*x2371);
IkReal x2380=((0.4445)*(IKcos(j1)));
IkReal x2381=(cj3*x2374);
IkReal x2382=(x2380+x2365);
IkReal x2383=(x2378+x2379);
IkReal x2384=(x2375+x2376+x2377);
evalcond[0]=((((-1.0)*r02*x2374))+x2384+((x2367*x2370))+(((-1.0)*px))+(((-1.0)*x2367*x2368)));
evalcond[1]=(x2383+((x2367*x2369))+(((-1.0)*x2382))+(((-1.0)*x2367*x2373))+(((-1.0)*r22*x2374)));
evalcond[2]=((((-1.0)*x2384))+((cj3*r22*x2367))+px+(((-1.0)*x2373*x2381))+((x2369*x2381))+(((-1.0)*cj5*r21*x2372))+(((-1.0)*r20*sj5*x2372)));
evalcond[3]=(((cj3*r02*x2367))+x2383+(((-1.0)*x2368*x2381))+(((-1.0)*x2382))+(((-1.0)*cj5*r01*x2372))+((x2370*x2381))+(((-1.0)*r00*sj5*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2385=((1.0)*r01);
IkReal x2386=(sj1*sj4);
IkReal x2387=(cj5*r00);
IkReal x2388=(cj1*cj4);
IkReal x2389=(cj5*r20);
IkReal x2390=(cj1*sj4);
IkReal x2391=(sj5*x2390);
IkReal x2392=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x2385*x2391))+((x2387*x2390))+(((-1.0)*r02*x2388))+(((-1.0)*r22*x2392))+(((-1.0)*r21*sj5*x2386))+((x2386*x2389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2392))+(((-1.0)*sj5*x2385*x2386))+(((-1.0)*x2389*x2390))+((r22*x2388))+((r21*x2391))+((x2386*x2387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2385*x2391))+((x2387*x2390))+(((-1.0)*r02*x2388))+(((-1.0)*r22*x2392))+(((-1.0)*r21*sj5*x2386))+((x2386*x2389))))+IKsqr(((((-1.0)*r02*x2392))+(((-1.0)*sj5*x2385*x2386))+(((-1.0)*x2389*x2390))+((r22*x2388))+((r21*x2391))+((x2386*x2387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2385*x2391))+((x2387*x2390))+(((-1.0)*r02*x2388))+(((-1.0)*r22*x2392))+(((-1.0)*r21*sj5*x2386))+((x2386*x2389))), ((((-1.0)*r02*x2392))+(((-1.0)*sj5*x2385*x2386))+(((-1.0)*x2389*x2390))+((r22*x2388))+((r21*x2391))+((x2386*x2387))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2393=IKcos(j2);
IkReal x2394=IKsin(j2);
IkReal x2395=(cj5*r01);
IkReal x2396=((1.0)*cj3);
IkReal x2397=(cj5*r00);
IkReal x2398=((0.33655)*sj1);
IkReal x2399=((1.0)*sj1);
IkReal x2400=(cj5*r21);
IkReal x2401=(r00*sj5);
IkReal x2402=(cj5*r20);
IkReal x2403=((1.0)*cj4);
IkReal x2404=(r20*sj5);
IkReal x2405=(cj1*x2393);
IkReal x2406=(cj3*cj4*sj5);
IkReal x2407=((1.0)*sj4*sj5);
IkReal x2408=(cj1*x2394);
IkReal x2409=(x2393*x2399);
IkReal x2410=((1.0)*x2408);
IkReal x2411=(x2409+x2410);
evalcond[0]=(x2405+(((-1.0)*x2394*x2399))+(((-1.0)*r21*x2407))+(((-1.0)*r22*x2403))+((sj4*x2402)));
evalcond[1]=(((sj4*x2397))+(((-1.0)*r01*x2407))+(((-1.0)*r02*x2403))+(((-1.0)*x2411)));
evalcond[2]=((((0.14105)*x2404))+(((0.14105)*x2400))+(((-1.0)*pz))+((x2394*x2398))+(((-0.4445)*cj1))+(((-0.33655)*x2405)));
evalcond[3]=(((x2393*x2398))+(((0.14105)*x2401))+(((-1.0)*px))+(((0.4445)*sj1))+(((0.33655)*x2408))+(((0.14105)*x2395)));
evalcond[4]=((((-1.0)*x2405))+((r01*x2406))+(((-1.0)*r02*sj4*x2396))+((sj3*x2401))+((sj3*x2395))+(((-1.0)*cj4*x2396*x2397))+((sj1*x2394)));
evalcond[5]=((((-1.0)*r22*sj4*x2396))+((sj3*x2404))+((sj3*x2400))+(((-1.0)*x2411))+((r21*x2406))+(((-1.0)*cj4*x2396*x2402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2412=((0.33655)*cj0);
IkReal x2413=(cj5*sj4);
IkReal x2414=((0.14105)*cj0);
IkReal x2415=(sj4*sj5);
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(cj0,-2);
if(!x2416.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x2416.value)*(((((-1.0)*cj5*r01*x2414))+(((-0.1016)*cj0*sj0))+((r01*x2412*x2415))+(((-1.0)*r00*sj5*x2414))+(((-1.0)*r00*x2412*x2413))+((cj0*px))+((cj4*r02*x2412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*cj4*r22))+(((0.757142857142857)*r20*x2413))+(((-0.757142857142857)*r21*x2415))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x2416.value)*(((((-1.0)*cj5*r01*x2414))+(((-0.1016)*cj0*sj0))+((r01*x2412*x2415))+(((-1.0)*r00*sj5*x2414))+(((-1.0)*r00*x2412*x2413))+((cj0*px))+((cj4*r02*x2412))))))+IKsqr(((((-0.757142857142857)*cj4*r22))+(((0.757142857142857)*r20*x2413))+(((-0.757142857142857)*r21*x2415))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x2416.value)*(((((-1.0)*cj5*r01*x2414))+(((-0.1016)*cj0*sj0))+((r01*x2412*x2415))+(((-1.0)*r00*sj5*x2414))+(((-1.0)*r00*x2412*x2413))+((cj0*px))+((cj4*r02*x2412))))), ((((-0.757142857142857)*cj4*r22))+(((0.757142857142857)*r20*x2413))+(((-0.757142857142857)*r21*x2415))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2417=IKsin(j1);
IkReal x2418=IKcos(j1);
IkReal x2419=sj0*sj0;
IkReal x2420=cj0*cj0;
IkReal x2421=(cj3*r22);
IkReal x2422=((0.14105)*sj0);
IkReal x2423=(r20*sj5);
IkReal x2424=(cj5*r01);
IkReal x2425=(cj5*r10);
IkReal x2426=((0.33655)*sj4);
IkReal x2427=(cj5*sj0);
IkReal x2428=(r11*sj5);
IkReal x2429=((0.33655)*sj3);
IkReal x2430=(r21*sj5);
IkReal x2431=(r01*sj5);
IkReal x2432=(cj5*r00);
IkReal x2433=((0.14105)*cj5);
IkReal x2434=(cj5*r20);
IkReal x2435=(r10*sj5);
IkReal x2436=(r00*sj5);
IkReal x2437=(cj5*r11);
IkReal x2438=((0.1016)*sj0);
IkReal x2439=((0.33655)*cj4);
IkReal x2440=(cj5*r21);
IkReal x2441=((0.14105)*cj0);
IkReal x2442=(cj0*x2438);
IkReal x2443=(cj0*x2426);
IkReal x2444=((0.4445)*x2418);
IkReal x2445=(cj3*x2439);
IkReal x2446=(cj0*x2433);
IkReal x2447=((0.4445)*x2417);
IkReal x2448=(cj0*sj0*x2447);
evalcond[0]=((((-1.0)*r22*x2439))+(((0.14105)*x2423))+(((-1.0)*x2426*x2430))+(((-1.0)*pz))+((x2426*x2434))+((r21*x2433))+(((-1.0)*x2444)));
evalcond[1]=(x2442+((r12*sj0*x2439))+(((-1.0)*sj0*x2425*x2426))+((sj0*x2426*x2428))+(((-1.0)*x2422*x2437))+(((-1.0)*x2422*x2435))+((py*sj0))+((x2419*x2447)));
evalcond[2]=(((x2431*x2443))+((cj0*r02*x2439))+(((-1.0)*x2436*x2441))+(((-1.0)*x2424*x2441))+(((-1.0)*x2442))+((cj0*px))+((x2420*x2447))+(((-1.0)*x2432*x2443)));
evalcond[3]=((((-1.0)*x2428*x2445))+(((-1.0)*x2422*x2440))+((sj0*x2444))+(((-1.0)*x2422*x2423))+((x2425*x2445))+(((-1.0)*x2429*x2437))+(((-1.0)*x2429*x2435))+((pz*sj0))+((cj3*r12*x2426)));
evalcond[4]=((((-1.0)*x2431*x2445))+((x2432*x2445))+(((-1.0)*x2424*x2429))+(((-1.0)*r21*x2446))+(((-1.0)*x2423*x2441))+(((-1.0)*x2429*x2436))+((cj0*x2444))+((cj3*r02*x2426))+((cj0*pz)));
evalcond[5]=((((-1.0)*sj0*x2421*x2426))+(((-1.0)*r20*x2427*x2445))+((sj0*x2447))+((r21*x2427*x2429))+(((-0.14105)*x2435))+(((0.1016)*cj0))+py+((sj0*x2423*x2429))+(((-1.0)*r11*x2433))+((sj0*x2430*x2445)));
evalcond[6]=(((cj0*x2430*x2445))+(((-1.0)*x2438))+(((-0.14105)*x2436))+((cj0*x2423*x2429))+px+((cj0*x2429*x2440))+((cj0*x2447))+(((-1.0)*x2421*x2443))+(((-1.0)*cj0*x2434*x2445))+(((-0.14105)*x2424)));
evalcond[7]=((((-0.1016)*x2419))+x2448+(((-1.0)*x2425*x2443))+(((-1.0)*x2422*x2424))+((x2428*x2443))+((cj0*r12*x2439))+(((-1.0)*x2422*x2436))+((px*sj0)));
evalcond[8]=(((sj0*x2426*x2431))+x2448+(((0.1016)*x2420))+((r02*sj0*x2439))+(((-1.0)*x2435*x2441))+(((-1.0)*r00*x2426*x2427))+(((-1.0)*r11*x2446))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2449=(cj4*sj1);
IkReal x2450=(cj1*sj4);
IkReal x2451=((1.0)*cj5);
IkReal x2452=(r21*sj5);
IkReal x2453=(cj1*cj4);
IkReal x2454=(sj1*sj4);
IkReal x2455=(r01*sj4*sj5);
if( IKabs((((r02*x2453))+(((-1.0)*x2452*x2454))+(((-1.0)*r22*x2449))+((r01*sj5*x2450))+(((-1.0)*r00*x2450*x2451))+((cj5*r20*x2454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2449))+((r22*x2453))+((x2450*x2452))+(((-1.0)*r00*x2451*x2454))+((r01*sj5*x2454))+(((-1.0)*r20*x2450*x2451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2453))+(((-1.0)*x2452*x2454))+(((-1.0)*r22*x2449))+((r01*sj5*x2450))+(((-1.0)*r00*x2450*x2451))+((cj5*r20*x2454))))+IKsqr((((r02*x2449))+((r22*x2453))+((x2450*x2452))+(((-1.0)*r00*x2451*x2454))+((r01*sj5*x2454))+(((-1.0)*r20*x2450*x2451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2453))+(((-1.0)*x2452*x2454))+(((-1.0)*r22*x2449))+((r01*sj5*x2450))+(((-1.0)*r00*x2450*x2451))+((cj5*r20*x2454))), (((r02*x2449))+((r22*x2453))+((x2450*x2452))+(((-1.0)*r00*x2451*x2454))+((r01*sj5*x2454))+(((-1.0)*r20*x2450*x2451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2456=IKcos(j2);
IkReal x2457=IKsin(j2);
IkReal x2458=(cj5*r01);
IkReal x2459=((1.0)*cj3);
IkReal x2460=(cj5*r00);
IkReal x2461=((0.33655)*sj1);
IkReal x2462=((1.0)*sj1);
IkReal x2463=(cj5*r21);
IkReal x2464=(r00*sj5);
IkReal x2465=(cj5*r20);
IkReal x2466=((1.0)*cj4);
IkReal x2467=(r20*sj5);
IkReal x2468=(cj1*x2456);
IkReal x2469=(cj3*cj4*sj5);
IkReal x2470=((1.0)*sj4*sj5);
IkReal x2471=(cj1*x2457);
IkReal x2472=(x2457*x2462);
evalcond[0]=((((-1.0)*r01*x2470))+x2471+((sj1*x2456))+(((-1.0)*r02*x2466))+((sj4*x2460)));
evalcond[1]=((((-1.0)*r22*x2466))+(((-1.0)*r21*x2470))+x2468+(((-1.0)*x2472))+((sj4*x2465)));
evalcond[2]=((((-1.0)*pz))+((x2457*x2461))+(((0.14105)*x2467))+(((0.14105)*x2463))+(((-0.4445)*cj1))+(((-0.33655)*x2468)));
evalcond[3]=((((-0.33655)*x2471))+(((-0.4445)*sj1))+(((-1.0)*x2456*x2461))+(((-1.0)*px))+(((0.14105)*x2464))+(((0.14105)*x2458)));
evalcond[4]=(((r01*x2469))+x2468+((sj3*x2458))+(((-1.0)*x2472))+((sj3*x2464))+(((-1.0)*cj4*x2459*x2460))+(((-1.0)*r02*sj4*x2459)));
evalcond[5]=((((-1.0)*x2456*x2462))+(((-1.0)*x2471))+((r21*x2469))+((sj3*x2467))+((sj3*x2463))+(((-1.0)*cj4*x2459*x2465))+(((-1.0)*r22*sj4*x2459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2473=((1.0)*r01);
IkReal x2474=(sj1*sj4);
IkReal x2475=(cj5*r00);
IkReal x2476=(cj1*cj4);
IkReal x2477=(cj5*r20);
IkReal x2478=(cj1*sj4);
IkReal x2479=(sj5*x2478);
IkReal x2480=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x2480))+(((-1.0)*x2473*x2479))+(((-1.0)*r02*x2476))+(((-1.0)*r21*sj5*x2474))+((x2474*x2477))+((x2475*x2478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2479))+(((-1.0)*r02*x2480))+(((-1.0)*x2477*x2478))+(((-1.0)*sj5*x2473*x2474))+((r22*x2476))+((x2474*x2475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2480))+(((-1.0)*x2473*x2479))+(((-1.0)*r02*x2476))+(((-1.0)*r21*sj5*x2474))+((x2474*x2477))+((x2475*x2478))))+IKsqr((((r21*x2479))+(((-1.0)*r02*x2480))+(((-1.0)*x2477*x2478))+(((-1.0)*sj5*x2473*x2474))+((r22*x2476))+((x2474*x2475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2480))+(((-1.0)*x2473*x2479))+(((-1.0)*r02*x2476))+(((-1.0)*r21*sj5*x2474))+((x2474*x2477))+((x2475*x2478))), (((r21*x2479))+(((-1.0)*r02*x2480))+(((-1.0)*x2477*x2478))+(((-1.0)*sj5*x2473*x2474))+((r22*x2476))+((x2474*x2475))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2481=IKcos(j2);
IkReal x2482=IKsin(j2);
IkReal x2483=(cj5*r01);
IkReal x2484=((1.0)*cj3);
IkReal x2485=(cj5*r00);
IkReal x2486=((0.33655)*sj1);
IkReal x2487=((1.0)*sj1);
IkReal x2488=(cj5*r21);
IkReal x2489=(r00*sj5);
IkReal x2490=(cj5*r20);
IkReal x2491=((1.0)*cj4);
IkReal x2492=(r20*sj5);
IkReal x2493=(cj1*x2481);
IkReal x2494=(cj3*cj4*sj5);
IkReal x2495=((1.0)*sj4*sj5);
IkReal x2496=(cj1*x2482);
IkReal x2497=(x2481*x2487);
IkReal x2498=((1.0)*x2496);
IkReal x2499=(x2498+x2497);
evalcond[0]=(x2493+(((-1.0)*r21*x2495))+(((-1.0)*x2482*x2487))+((sj4*x2490))+(((-1.0)*r22*x2491)));
evalcond[1]=((((-1.0)*x2499))+(((-1.0)*r01*x2495))+(((-1.0)*r02*x2491))+((sj4*x2485)));
evalcond[2]=(((x2482*x2486))+(((0.14105)*x2492))+(((0.14105)*x2488))+(((-1.0)*pz))+(((-0.33655)*x2493))+(((-0.4445)*cj1)));
evalcond[3]=((((0.33655)*x2496))+((x2481*x2486))+(((0.14105)*x2483))+(((0.14105)*x2489))+(((-1.0)*px))+(((0.4445)*sj1)));
evalcond[4]=(((sj3*x2483))+((sj3*x2489))+(((-1.0)*x2493))+(((-1.0)*r02*sj4*x2484))+((r01*x2494))+(((-1.0)*cj4*x2484*x2485))+((sj1*x2482)));
evalcond[5]=((((-1.0)*cj4*x2484*x2490))+((sj3*x2488))+((sj3*x2492))+(((-1.0)*x2499))+(((-1.0)*r22*sj4*x2484))+((r21*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2500=(cj4*r12);
IkReal x2501=(cj4*r22);
IkReal x2502=(cj1*sj4);
IkReal x2503=(r11*sj5);
IkReal x2504=(r21*sj5);
IkReal x2505=((1.0)*sj1);
IkReal x2506=(sj1*sj4);
IkReal x2507=(cj5*r20);
IkReal x2508=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2502*x2508))+((x2506*x2507))+((cj1*x2500))+(((-1.0)*x2501*x2505))+(((-1.0)*sj4*x2504*x2505))+((x2502*x2503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2501))+((sj1*x2500))+(((-1.0)*x2502*x2507))+(((-1.0)*cj5*r10*sj4*x2505))+((x2503*x2506))+((x2502*x2504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2502*x2508))+((x2506*x2507))+((cj1*x2500))+(((-1.0)*x2501*x2505))+(((-1.0)*sj4*x2504*x2505))+((x2502*x2503))))+IKsqr((((cj1*x2501))+((sj1*x2500))+(((-1.0)*x2502*x2507))+(((-1.0)*cj5*r10*sj4*x2505))+((x2503*x2506))+((x2502*x2504))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2502*x2508))+((x2506*x2507))+((cj1*x2500))+(((-1.0)*x2501*x2505))+(((-1.0)*sj4*x2504*x2505))+((x2502*x2503))), (((cj1*x2501))+((sj1*x2500))+(((-1.0)*x2502*x2507))+(((-1.0)*cj5*r10*sj4*x2505))+((x2503*x2506))+((x2502*x2504))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2509=IKcos(j2);
IkReal x2510=IKsin(j2);
IkReal x2511=(cj3*cj4);
IkReal x2512=(r21*sj5);
IkReal x2513=((0.33655)*sj1);
IkReal x2514=((1.0)*sj4);
IkReal x2515=((1.0)*cj5);
IkReal x2516=((0.14105)*cj5);
IkReal x2517=((1.0)*sj1);
IkReal x2518=(cj5*sj4);
IkReal x2519=((1.0)*cj4);
IkReal x2520=((0.14105)*sj5);
IkReal x2521=(r11*sj5);
IkReal x2522=(cj5*sj3);
IkReal x2523=(sj3*sj5);
IkReal x2524=(cj1*x2509);
IkReal x2525=(cj1*x2510);
IkReal x2526=(x2510*x2517);
evalcond[0]=(x2525+((r10*x2518))+((sj1*x2509))+(((-1.0)*r12*x2519))+(((-1.0)*x2514*x2521)));
evalcond[1]=(x2524+(((-1.0)*r22*x2519))+(((-1.0)*x2512*x2514))+(((-1.0)*x2526))+((r20*x2518)));
evalcond[2]=(((x2510*x2513))+(((-1.0)*pz))+((r21*x2516))+(((-0.4445)*cj1))+((r20*x2520))+(((-0.33655)*x2524)));
evalcond[3]=(((r11*x2516))+(((-0.4445)*sj1))+(((-1.0)*py))+(((-1.0)*x2509*x2513))+((r10*x2520))+(((-0.33655)*x2525)));
evalcond[4]=(x2524+(((-1.0)*r10*x2511*x2515))+((r11*x2522))+(((-1.0)*cj3*r12*x2514))+((x2511*x2521))+((r10*x2523))+(((-1.0)*x2526)));
evalcond[5]=(((x2511*x2512))+(((-1.0)*x2525))+(((-1.0)*cj3*r22*x2514))+(((-1.0)*x2509*x2517))+((r20*x2523))+(((-1.0)*r20*x2511*x2515))+((r21*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2527=((1.0)*cj1);
IkReal x2528=(sj4*sj5);
IkReal x2529=(cj5*sj4);
IkReal x2530=((1.0)*sj1);
IkReal x2531=(sj1*x2529);
IkReal x2532=(cj4*x2530);
if( IKabs(((((-1.0)*r11*x2527*x2528))+((r20*x2531))+(((-1.0)*cj4*r12*x2527))+(((-1.0)*r22*x2532))+((cj1*r10*x2529))+(((-1.0)*r21*x2528*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x2528))+(((-1.0)*r11*x2528*x2530))+((r10*x2531))+(((-1.0)*r20*x2527*x2529))+(((-1.0)*r12*x2532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2527*x2528))+((r20*x2531))+(((-1.0)*cj4*r12*x2527))+(((-1.0)*r22*x2532))+((cj1*r10*x2529))+(((-1.0)*r21*x2528*x2530))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x2528))+(((-1.0)*r11*x2528*x2530))+((r10*x2531))+(((-1.0)*r20*x2527*x2529))+(((-1.0)*r12*x2532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x2527*x2528))+((r20*x2531))+(((-1.0)*cj4*r12*x2527))+(((-1.0)*r22*x2532))+((cj1*r10*x2529))+(((-1.0)*r21*x2528*x2530))), (((cj1*cj4*r22))+((cj1*r21*x2528))+(((-1.0)*r11*x2528*x2530))+((r10*x2531))+(((-1.0)*r20*x2527*x2529))+(((-1.0)*r12*x2532))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2533=IKcos(j2);
IkReal x2534=IKsin(j2);
IkReal x2535=(cj3*cj4);
IkReal x2536=(r21*sj5);
IkReal x2537=((0.33655)*sj1);
IkReal x2538=((1.0)*sj4);
IkReal x2539=((1.0)*cj5);
IkReal x2540=((0.14105)*cj5);
IkReal x2541=((1.0)*sj1);
IkReal x2542=(cj5*sj4);
IkReal x2543=((1.0)*cj4);
IkReal x2544=(r10*sj5);
IkReal x2545=(r11*sj5);
IkReal x2546=(r20*sj5);
IkReal x2547=(cj5*sj3);
IkReal x2548=(cj1*x2533);
IkReal x2549=(cj1*x2534);
IkReal x2550=(x2533*x2541);
IkReal x2551=((1.0)*x2549);
IkReal x2552=(x2550+x2551);
evalcond[0]=(x2548+((r20*x2542))+(((-1.0)*x2536*x2538))+(((-1.0)*r22*x2543))+(((-1.0)*x2534*x2541)));
evalcond[1]=((((-1.0)*r12*x2543))+(((-1.0)*x2538*x2545))+(((-1.0)*x2552))+((r10*x2542)));
evalcond[2]=((((0.14105)*x2546))+((r21*x2540))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x2548))+((x2534*x2537)));
evalcond[3]=((((0.14105)*x2544))+((r11*x2540))+(((-1.0)*py))+((x2533*x2537))+(((0.4445)*sj1))+(((0.33655)*x2549)));
evalcond[4]=(((sj1*x2534))+((r11*x2547))+(((-1.0)*r10*x2535*x2539))+((sj3*x2544))+(((-1.0)*x2548))+(((-1.0)*cj3*r12*x2538))+((x2535*x2545)));
evalcond[5]=(((r21*x2547))+(((-1.0)*cj3*r22*x2538))+((sj3*x2546))+(((-1.0)*r20*x2535*x2539))+(((-1.0)*x2552))+((x2535*x2536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2553=((1.0)*sj1);
IkReal x2554=(cj5*sj4);
IkReal x2555=(r20*sj0);
IkReal x2556=((1.0)*cj1);
IkReal x2557=(cj4*r12);
IkReal x2558=(cj4*r22*sj0);
IkReal x2559=(r11*sj4*sj5);
IkReal x2560=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2554*x2556))+((cj1*x2557))+((cj1*x2559))+((sj1*x2554*x2555))+(((-1.0)*x2553*x2558))+(((-1.0)*x2553*x2560)))),IkReal((((cj1*x2560))+((cj1*x2558))+(((-1.0)*x2554*x2555*x2556))+((sj1*x2559))+((sj1*x2557))+(((-1.0)*r10*x2553*x2554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2561.value)))+(x2562.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2563=IKsin(j2);
IkReal x2564=IKcos(j2);
IkReal x2565=((1.0)*cj3);
IkReal x2566=(cj5*r00);
IkReal x2567=(r00*sj5);
IkReal x2568=(cj4*cj5);
IkReal x2569=(cj5*r01);
IkReal x2570=(cj0*sj1);
IkReal x2571=(cj5*r21);
IkReal x2572=(cj5*sj4);
IkReal x2573=((1.0)*cj4);
IkReal x2574=(r10*sj5);
IkReal x2575=(cj5*r11);
IkReal x2576=(r20*sj5);
IkReal x2577=((0.33655)*sj0);
IkReal x2578=(cj1*x2564);
IkReal x2579=(cj3*cj4*sj5);
IkReal x2580=(sj1*x2563);
IkReal x2581=((1.0)*sj4*sj5);
IkReal x2582=(cj1*x2563);
IkReal x2583=(sj1*x2564);
evalcond[0]=(x2578+(((-1.0)*r21*x2581))+(((-1.0)*x2580))+((r20*x2572))+(((-1.0)*r22*x2573)));
evalcond[1]=((((-1.0)*r01*x2581))+((x2564*x2570))+((cj0*x2582))+((sj4*x2566))+(((-1.0)*r02*x2573)));
evalcond[2]=(((r10*x2572))+(((-1.0)*r12*x2573))+((sj0*x2582))+((sj0*x2583))+(((-1.0)*r11*x2581)));
evalcond[3]=((((0.33655)*x2580))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x2578))+(((0.14105)*x2571))+(((0.14105)*x2576)));
evalcond[4]=((((-1.0)*px))+(((-0.33655)*x2564*x2570))+(((-0.4445)*x2570))+(((0.14105)*x2567))+(((0.14105)*x2569))+(((-0.33655)*cj0*x2582))+(((0.1016)*sj0)));
evalcond[5]=((((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((-1.0)*x2577*x2583))+(((-1.0)*x2577*x2582))+(((0.14105)*x2575))+(((0.14105)*x2574)));
evalcond[6]=((((-1.0)*r20*x2565*x2568))+((r21*x2579))+(((-1.0)*x2583))+(((-1.0)*x2582))+((sj3*x2571))+((sj3*x2576))+(((-1.0)*r22*sj4*x2565)));
evalcond[7]=(((sj3*x2569))+((sj3*x2567))+(((-1.0)*r02*sj4*x2565))+((r01*x2579))+(((-1.0)*cj4*x2565*x2566))+(((-1.0)*x2563*x2570))+((cj0*x2578)));
evalcond[8]=(((r11*x2579))+((sj3*x2575))+((sj3*x2574))+(((-1.0)*r10*x2565*x2568))+(((-1.0)*sj0*x2580))+((sj0*x2578))+(((-1.0)*r12*sj4*x2565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2584=((1.0)*cj0);
IkReal x2585=(cj4*r02);
IkReal x2586=(cj1*sj4);
IkReal x2587=(cj4*r22);
IkReal x2588=(cj5*r20);
IkReal x2589=(sj1*sj4);
IkReal x2590=(sj5*x2589);
IkReal x2591=((1.0)*cj5*r00);
CheckValue<IkReal> x2592 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2584*x2590))+((cj1*x2585))+((cj0*x2588*x2589))+(((-1.0)*sj1*x2584*x2587))+(((-1.0)*x2586*x2591))+((r01*sj5*x2586)))),IkReal((((r01*x2590))+(((-1.0)*x2589*x2591))+((cj0*r21*sj5*x2586))+(((-1.0)*x2584*x2586*x2588))+((cj0*cj1*x2587))+((sj1*x2585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2592.valid){
continue;
}
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2593.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2592.value)+(((1.5707963267949)*(x2593.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2594=IKsin(j2);
IkReal x2595=IKcos(j2);
IkReal x2596=((1.0)*cj3);
IkReal x2597=(cj5*r00);
IkReal x2598=(r00*sj5);
IkReal x2599=(cj4*cj5);
IkReal x2600=(cj5*r01);
IkReal x2601=(cj0*sj1);
IkReal x2602=(cj5*r21);
IkReal x2603=(cj5*sj4);
IkReal x2604=((1.0)*cj4);
IkReal x2605=(r10*sj5);
IkReal x2606=(cj5*r11);
IkReal x2607=(r20*sj5);
IkReal x2608=((0.33655)*sj0);
IkReal x2609=(cj1*x2595);
IkReal x2610=(cj3*cj4*sj5);
IkReal x2611=(sj1*x2594);
IkReal x2612=((1.0)*sj4*sj5);
IkReal x2613=(cj1*x2594);
IkReal x2614=(sj1*x2595);
evalcond[0]=((((-1.0)*r21*x2612))+((r20*x2603))+(((-1.0)*x2611))+(((-1.0)*r22*x2604))+x2609);
evalcond[1]=((((-1.0)*r01*x2612))+((x2595*x2601))+(((-1.0)*r02*x2604))+((sj4*x2597))+((cj0*x2613)));
evalcond[2]=((((-1.0)*r11*x2612))+(((-1.0)*r12*x2604))+((r10*x2603))+((sj0*x2614))+((sj0*x2613)));
evalcond[3]=((((-0.33655)*x2609))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((0.33655)*x2611))+(((0.14105)*x2607))+(((0.14105)*x2602)));
evalcond[4]=((((-0.33655)*x2595*x2601))+(((-0.4445)*x2601))+(((-1.0)*px))+(((0.14105)*x2598))+(((-0.33655)*cj0*x2613))+(((0.1016)*sj0))+(((0.14105)*x2600)));
evalcond[5]=((((-1.0)*x2608*x2614))+(((-1.0)*x2608*x2613))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((0.14105)*x2606))+(((0.14105)*x2605)));
evalcond[6]=(((sj3*x2607))+((sj3*x2602))+(((-1.0)*x2613))+(((-1.0)*x2614))+(((-1.0)*r20*x2596*x2599))+(((-1.0)*r22*sj4*x2596))+((r21*x2610)));
evalcond[7]=(((r01*x2610))+((sj3*x2598))+((sj3*x2600))+(((-1.0)*r02*sj4*x2596))+(((-1.0)*x2594*x2601))+((cj0*x2609))+(((-1.0)*cj4*x2596*x2597)));
evalcond[8]=(((sj3*x2606))+((sj3*x2605))+(((-1.0)*r10*x2596*x2599))+((sj0*x2609))+((r11*x2610))+(((-1.0)*sj0*x2611))+(((-1.0)*r12*sj4*x2596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2615=(r10*sj0);
IkReal x2616=((0.33655)*sj4);
IkReal x2617=((0.757142857142857)*sj4);
IkReal x2618=(r11*sj0);
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(sj0,-2);
if(!x2619.valid){
continue;
}
if( IKabs(((-2.24971878515186)*(x2619.value)*(((((0.33655)*cj4*r12*sj0))+(((-1.0)*cj5*x2615*x2616))+((sj5*x2616*x2618))+(((-0.14105)*sj5*x2615))+(((-0.14105)*cj5*x2618))+(((0.1016)*cj0*sj0))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.757142857142857)*cj4*r22))+(((-1.0)*r21*sj5*x2617))+((cj5*r20*x2617))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.24971878515186)*(x2619.value)*(((((0.33655)*cj4*r12*sj0))+(((-1.0)*cj5*x2615*x2616))+((sj5*x2616*x2618))+(((-0.14105)*sj5*x2615))+(((-0.14105)*cj5*x2618))+(((0.1016)*cj0*sj0))+((py*sj0))))))+IKsqr(((((-0.757142857142857)*cj4*r22))+(((-1.0)*r21*sj5*x2617))+((cj5*r20*x2617))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.24971878515186)*(x2619.value)*(((((0.33655)*cj4*r12*sj0))+(((-1.0)*cj5*x2615*x2616))+((sj5*x2616*x2618))+(((-0.14105)*sj5*x2615))+(((-0.14105)*cj5*x2618))+(((0.1016)*cj0*sj0))+((py*sj0))))), ((((-0.757142857142857)*cj4*r22))+(((-1.0)*r21*sj5*x2617))+((cj5*r20*x2617))+(((0.317322834645669)*r20*sj5))+(((0.317322834645669)*cj5*r21))+(((-2.24971878515186)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2620=IKsin(j1);
IkReal x2621=IKcos(j1);
IkReal x2622=sj0*sj0;
IkReal x2623=cj0*cj0;
IkReal x2624=(cj3*r22);
IkReal x2625=((0.14105)*sj0);
IkReal x2626=(r20*sj5);
IkReal x2627=(cj5*r01);
IkReal x2628=(cj5*r10);
IkReal x2629=((0.33655)*sj4);
IkReal x2630=(cj5*sj0);
IkReal x2631=(r11*sj5);
IkReal x2632=((0.33655)*sj3);
IkReal x2633=(r21*sj5);
IkReal x2634=(r01*sj5);
IkReal x2635=(cj5*r00);
IkReal x2636=((0.14105)*cj5);
IkReal x2637=(cj5*r20);
IkReal x2638=(r10*sj5);
IkReal x2639=(r00*sj5);
IkReal x2640=(cj5*r11);
IkReal x2641=((0.1016)*sj0);
IkReal x2642=((0.33655)*cj4);
IkReal x2643=(cj5*r21);
IkReal x2644=((0.14105)*cj0);
IkReal x2645=(cj0*x2641);
IkReal x2646=(cj0*x2629);
IkReal x2647=((0.4445)*x2621);
IkReal x2648=(cj3*x2642);
IkReal x2649=(cj0*x2636);
IkReal x2650=((0.4445)*x2620);
IkReal x2651=(cj0*sj0*x2650);
evalcond[0]=((((-1.0)*r22*x2642))+((r21*x2636))+(((-1.0)*pz))+(((-1.0)*x2629*x2633))+(((-1.0)*x2647))+((x2629*x2637))+(((0.14105)*x2626)));
evalcond[1]=((((-1.0)*x2625*x2640))+((r12*sj0*x2642))+(((-1.0)*sj0*x2628*x2629))+((sj0*x2629*x2631))+((x2622*x2650))+((py*sj0))+(((-1.0)*x2625*x2638))+x2645);
evalcond[2]=((((-1.0)*x2635*x2646))+((cj0*r02*x2642))+(((-1.0)*x2645))+((x2623*x2650))+((x2634*x2646))+((cj0*px))+(((-1.0)*x2627*x2644))+(((-1.0)*x2639*x2644)));
evalcond[3]=(((sj0*x2647))+(((-1.0)*x2632*x2640))+(((-1.0)*x2625*x2643))+(((-1.0)*x2625*x2626))+((x2628*x2648))+(((-1.0)*x2632*x2638))+((pz*sj0))+((cj3*r12*x2629))+(((-1.0)*x2631*x2648)));
evalcond[4]=((((-1.0)*x2626*x2644))+(((-1.0)*x2634*x2648))+(((-1.0)*x2632*x2639))+((cj0*x2647))+(((-1.0)*r21*x2649))+((x2635*x2648))+((cj3*r02*x2629))+((cj0*pz))+(((-1.0)*x2627*x2632)));
evalcond[5]=(((sj0*x2650))+((sj0*x2626*x2632))+((r21*x2630*x2632))+(((-0.14105)*x2638))+(((0.1016)*cj0))+py+((sj0*x2633*x2648))+(((-1.0)*r11*x2636))+(((-1.0)*sj0*x2624*x2629))+(((-1.0)*r20*x2630*x2648)));
evalcond[6]=((((-1.0)*x2624*x2646))+(((-1.0)*cj0*x2637*x2648))+((cj0*x2632*x2643))+(((-0.14105)*x2639))+((cj0*x2626*x2632))+((cj0*x2650))+px+(((-1.0)*x2641))+((cj0*x2633*x2648))+(((-0.14105)*x2627)));
evalcond[7]=((((-1.0)*x2628*x2646))+(((-1.0)*x2625*x2627))+((x2631*x2646))+(((-0.1016)*x2622))+((px*sj0))+(((-1.0)*x2625*x2639))+((cj0*r12*x2642))+x2651);
evalcond[8]=((((-1.0)*r11*x2649))+(((0.1016)*x2623))+(((-1.0)*r00*x2629*x2630))+((sj0*x2629*x2634))+((cj0*py))+((r02*sj0*x2642))+(((-1.0)*x2638*x2644))+x2651);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2652=(cj4*sj1);
IkReal x2653=(cj1*sj4);
IkReal x2654=((1.0)*cj5);
IkReal x2655=(r21*sj5);
IkReal x2656=(cj1*cj4);
IkReal x2657=(sj1*sj4);
IkReal x2658=(r01*sj4*sj5);
if( IKabs(((((-1.0)*x2655*x2657))+(((-1.0)*r22*x2652))+((r01*sj5*x2653))+((r02*x2656))+((cj5*r20*x2657))+(((-1.0)*r00*x2653*x2654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x2657))+((x2653*x2655))+((r02*x2652))+((r22*x2656))+(((-1.0)*r20*x2653*x2654))+(((-1.0)*r00*x2654*x2657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2655*x2657))+(((-1.0)*r22*x2652))+((r01*sj5*x2653))+((r02*x2656))+((cj5*r20*x2657))+(((-1.0)*r00*x2653*x2654))))+IKsqr((((r01*sj5*x2657))+((x2653*x2655))+((r02*x2652))+((r22*x2656))+(((-1.0)*r20*x2653*x2654))+(((-1.0)*r00*x2654*x2657))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2655*x2657))+(((-1.0)*r22*x2652))+((r01*sj5*x2653))+((r02*x2656))+((cj5*r20*x2657))+(((-1.0)*r00*x2653*x2654))), (((r01*sj5*x2657))+((x2653*x2655))+((r02*x2652))+((r22*x2656))+(((-1.0)*r20*x2653*x2654))+(((-1.0)*r00*x2654*x2657))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2659=IKcos(j2);
IkReal x2660=IKsin(j2);
IkReal x2661=(cj5*r01);
IkReal x2662=((1.0)*cj3);
IkReal x2663=(cj5*r00);
IkReal x2664=((0.33655)*sj1);
IkReal x2665=((1.0)*sj1);
IkReal x2666=(cj5*r21);
IkReal x2667=(r00*sj5);
IkReal x2668=(cj5*r20);
IkReal x2669=((1.0)*cj4);
IkReal x2670=(r20*sj5);
IkReal x2671=(cj1*x2659);
IkReal x2672=(cj3*cj4*sj5);
IkReal x2673=((1.0)*sj4*sj5);
IkReal x2674=(cj1*x2660);
IkReal x2675=(x2660*x2665);
evalcond[0]=(((sj4*x2663))+(((-1.0)*r01*x2673))+(((-1.0)*r02*x2669))+x2674+((sj1*x2659)));
evalcond[1]=(((sj4*x2668))+(((-1.0)*x2675))+(((-1.0)*r21*x2673))+(((-1.0)*r22*x2669))+x2671);
evalcond[2]=((((-1.0)*pz))+(((-0.4445)*cj1))+((x2660*x2664))+(((0.14105)*x2666))+(((-0.33655)*x2671))+(((0.14105)*x2670)));
evalcond[3]=((((-0.4445)*sj1))+(((-1.0)*px))+(((-1.0)*x2659*x2664))+(((0.14105)*x2661))+(((0.14105)*x2667))+(((-0.33655)*x2674)));
evalcond[4]=((((-1.0)*r02*sj4*x2662))+(((-1.0)*cj4*x2662*x2663))+(((-1.0)*x2675))+((sj3*x2661))+((sj3*x2667))+((r01*x2672))+x2671);
evalcond[5]=((((-1.0)*x2674))+((r21*x2672))+(((-1.0)*cj4*x2662*x2668))+(((-1.0)*r22*sj4*x2662))+((sj3*x2670))+(((-1.0)*x2659*x2665))+((sj3*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2676=((1.0)*r01);
IkReal x2677=(sj1*sj4);
IkReal x2678=(cj5*r00);
IkReal x2679=(cj1*cj4);
IkReal x2680=(cj5*r20);
IkReal x2681=(cj1*sj4);
IkReal x2682=(sj5*x2681);
IkReal x2683=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x2677))+(((-1.0)*x2676*x2682))+(((-1.0)*r22*x2683))+((x2678*x2681))+(((-1.0)*r02*x2679))+((x2677*x2680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2683))+(((-1.0)*sj5*x2676*x2677))+((r22*x2679))+((r21*x2682))+(((-1.0)*x2680*x2681))+((x2677*x2678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x2677))+(((-1.0)*x2676*x2682))+(((-1.0)*r22*x2683))+((x2678*x2681))+(((-1.0)*r02*x2679))+((x2677*x2680))))+IKsqr(((((-1.0)*r02*x2683))+(((-1.0)*sj5*x2676*x2677))+((r22*x2679))+((r21*x2682))+(((-1.0)*x2680*x2681))+((x2677*x2678))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x2677))+(((-1.0)*x2676*x2682))+(((-1.0)*r22*x2683))+((x2678*x2681))+(((-1.0)*r02*x2679))+((x2677*x2680))), ((((-1.0)*r02*x2683))+(((-1.0)*sj5*x2676*x2677))+((r22*x2679))+((r21*x2682))+(((-1.0)*x2680*x2681))+((x2677*x2678))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2684=IKcos(j2);
IkReal x2685=IKsin(j2);
IkReal x2686=(cj5*r01);
IkReal x2687=((1.0)*cj3);
IkReal x2688=(cj5*r00);
IkReal x2689=((0.33655)*sj1);
IkReal x2690=((1.0)*sj1);
IkReal x2691=(cj5*r21);
IkReal x2692=(r00*sj5);
IkReal x2693=(cj5*r20);
IkReal x2694=((1.0)*cj4);
IkReal x2695=(r20*sj5);
IkReal x2696=(cj1*x2684);
IkReal x2697=(cj3*cj4*sj5);
IkReal x2698=((1.0)*sj4*sj5);
IkReal x2699=(cj1*x2685);
IkReal x2700=(x2684*x2690);
IkReal x2701=((1.0)*x2699);
IkReal x2702=(x2701+x2700);
evalcond[0]=(((sj4*x2693))+(((-1.0)*r22*x2694))+(((-1.0)*x2685*x2690))+x2696+(((-1.0)*r21*x2698)));
evalcond[1]=(((sj4*x2688))+(((-1.0)*r02*x2694))+(((-1.0)*x2702))+(((-1.0)*r01*x2698)));
evalcond[2]=((((-1.0)*pz))+(((0.14105)*x2691))+(((0.14105)*x2695))+((x2685*x2689))+(((-0.4445)*cj1))+(((-0.33655)*x2696)));
evalcond[3]=((((0.14105)*x2686))+((x2684*x2689))+(((0.33655)*x2699))+(((-1.0)*px))+(((0.14105)*x2692))+(((0.4445)*sj1)));
evalcond[4]=((((-1.0)*r02*sj4*x2687))+((sj1*x2685))+((r01*x2697))+((sj3*x2692))+(((-1.0)*cj4*x2687*x2688))+(((-1.0)*x2696))+((sj3*x2686)));
evalcond[5]=((((-1.0)*r22*sj4*x2687))+(((-1.0)*cj4*x2687*x2693))+(((-1.0)*x2702))+((sj3*x2691))+((sj3*x2695))+((r21*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2703=(cj4*r12);
IkReal x2704=(cj4*r22);
IkReal x2705=(cj1*sj4);
IkReal x2706=(r11*sj5);
IkReal x2707=(r21*sj5);
IkReal x2708=((1.0)*sj1);
IkReal x2709=(sj1*sj4);
IkReal x2710=(cj5*r20);
IkReal x2711=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*sj4*x2707*x2708))+((x2705*x2706))+((x2709*x2710))+(((-1.0)*x2704*x2708))+((cj1*x2703))+(((-1.0)*x2705*x2711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2705*x2710))+((x2705*x2707))+(((-1.0)*cj5*r10*sj4*x2708))+((x2706*x2709))+((cj1*x2704))+((sj1*x2703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x2707*x2708))+((x2705*x2706))+((x2709*x2710))+(((-1.0)*x2704*x2708))+((cj1*x2703))+(((-1.0)*x2705*x2711))))+IKsqr(((((-1.0)*x2705*x2710))+((x2705*x2707))+(((-1.0)*cj5*r10*sj4*x2708))+((x2706*x2709))+((cj1*x2704))+((sj1*x2703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x2707*x2708))+((x2705*x2706))+((x2709*x2710))+(((-1.0)*x2704*x2708))+((cj1*x2703))+(((-1.0)*x2705*x2711))), ((((-1.0)*x2705*x2710))+((x2705*x2707))+(((-1.0)*cj5*r10*sj4*x2708))+((x2706*x2709))+((cj1*x2704))+((sj1*x2703))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2712=IKcos(j2);
IkReal x2713=IKsin(j2);
IkReal x2714=(cj3*cj4);
IkReal x2715=(r21*sj5);
IkReal x2716=((0.33655)*sj1);
IkReal x2717=((1.0)*sj4);
IkReal x2718=((1.0)*cj5);
IkReal x2719=((0.14105)*cj5);
IkReal x2720=((1.0)*sj1);
IkReal x2721=(cj5*sj4);
IkReal x2722=((1.0)*cj4);
IkReal x2723=((0.14105)*sj5);
IkReal x2724=(r11*sj5);
IkReal x2725=(cj5*sj3);
IkReal x2726=(sj3*sj5);
IkReal x2727=(cj1*x2712);
IkReal x2728=(cj1*x2713);
IkReal x2729=(x2713*x2720);
evalcond[0]=(x2728+((sj1*x2712))+(((-1.0)*r12*x2722))+(((-1.0)*x2717*x2724))+((r10*x2721)));
evalcond[1]=(x2727+(((-1.0)*x2715*x2717))+(((-1.0)*r22*x2722))+((r20*x2721))+(((-1.0)*x2729)));
evalcond[2]=((((-0.33655)*x2727))+(((-1.0)*pz))+(((-0.4445)*cj1))+((r20*x2723))+((x2713*x2716))+((r21*x2719)));
evalcond[3]=((((-1.0)*x2712*x2716))+(((-0.4445)*sj1))+(((-0.33655)*x2728))+(((-1.0)*py))+((r10*x2723))+((r11*x2719)));
evalcond[4]=(x2727+(((-1.0)*cj3*r12*x2717))+((x2714*x2724))+(((-1.0)*r10*x2714*x2718))+((r11*x2725))+(((-1.0)*x2729))+((r10*x2726)));
evalcond[5]=((((-1.0)*r20*x2714*x2718))+(((-1.0)*x2728))+((r21*x2725))+((r20*x2726))+(((-1.0)*cj3*r22*x2717))+((x2714*x2715))+(((-1.0)*x2712*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2730=((1.0)*cj1);
IkReal x2731=(sj4*sj5);
IkReal x2732=(cj5*sj4);
IkReal x2733=((1.0)*sj1);
IkReal x2734=(sj1*x2732);
IkReal x2735=(cj4*x2733);
if( IKabs(((((-1.0)*cj4*r12*x2730))+(((-1.0)*r21*x2731*x2733))+(((-1.0)*r11*x2730*x2731))+((cj1*r10*x2732))+(((-1.0)*r22*x2735))+((r20*x2734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x2730*x2732))+(((-1.0)*r11*x2731*x2733))+(((-1.0)*r12*x2735))+((r10*x2734))+((cj1*r21*x2731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x2730))+(((-1.0)*r21*x2731*x2733))+(((-1.0)*r11*x2730*x2731))+((cj1*r10*x2732))+(((-1.0)*r22*x2735))+((r20*x2734))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x2730*x2732))+(((-1.0)*r11*x2731*x2733))+(((-1.0)*r12*x2735))+((r10*x2734))+((cj1*r21*x2731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x2730))+(((-1.0)*r21*x2731*x2733))+(((-1.0)*r11*x2730*x2731))+((cj1*r10*x2732))+(((-1.0)*r22*x2735))+((r20*x2734))), (((cj1*cj4*r22))+(((-1.0)*r20*x2730*x2732))+(((-1.0)*r11*x2731*x2733))+(((-1.0)*r12*x2735))+((r10*x2734))+((cj1*r21*x2731))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2736=IKcos(j2);
IkReal x2737=IKsin(j2);
IkReal x2738=(cj3*cj4);
IkReal x2739=(r21*sj5);
IkReal x2740=((0.33655)*sj1);
IkReal x2741=((1.0)*sj4);
IkReal x2742=((1.0)*cj5);
IkReal x2743=((0.14105)*cj5);
IkReal x2744=((1.0)*sj1);
IkReal x2745=(cj5*sj4);
IkReal x2746=((1.0)*cj4);
IkReal x2747=(r10*sj5);
IkReal x2748=(r11*sj5);
IkReal x2749=(r20*sj5);
IkReal x2750=(cj5*sj3);
IkReal x2751=(cj1*x2736);
IkReal x2752=(cj1*x2737);
IkReal x2753=(x2736*x2744);
IkReal x2754=((1.0)*x2752);
IkReal x2755=(x2754+x2753);
evalcond[0]=(x2751+(((-1.0)*x2739*x2741))+((r20*x2745))+(((-1.0)*x2737*x2744))+(((-1.0)*r22*x2746)));
evalcond[1]=(((r10*x2745))+(((-1.0)*x2741*x2748))+(((-1.0)*r12*x2746))+(((-1.0)*x2755)));
evalcond[2]=(((r21*x2743))+(((0.14105)*x2749))+(((-1.0)*pz))+((x2737*x2740))+(((-0.4445)*cj1))+(((-0.33655)*x2751)));
evalcond[3]=(((r11*x2743))+(((0.14105)*x2747))+(((0.33655)*x2752))+(((-1.0)*py))+(((0.4445)*sj1))+((x2736*x2740)));
evalcond[4]=(((r11*x2750))+((sj3*x2747))+((x2738*x2748))+(((-1.0)*r10*x2738*x2742))+(((-1.0)*cj3*r12*x2741))+((sj1*x2737))+(((-1.0)*x2751)));
evalcond[5]=(((r21*x2750))+((sj3*x2749))+(((-1.0)*cj3*r22*x2741))+(((-1.0)*r20*x2738*x2742))+(((-1.0)*x2755))+((x2738*x2739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2756=((1.0)*sj1);
IkReal x2757=(cj5*sj4);
IkReal x2758=(r20*sj0);
IkReal x2759=((1.0)*cj1);
IkReal x2760=(cj4*r12);
IkReal x2761=(cj4*r22*sj0);
IkReal x2762=(r11*sj4*sj5);
IkReal x2763=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2764=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2764.valid){
continue;
}
CheckValue<IkReal> x2765 = IKatan2WithCheck(IkReal((((cj1*x2760))+((cj1*x2762))+(((-1.0)*r10*x2757*x2759))+(((-1.0)*x2756*x2761))+(((-1.0)*x2756*x2763))+((sj1*x2757*x2758)))),IkReal((((cj1*x2763))+((cj1*x2761))+((sj1*x2760))+((sj1*x2762))+(((-1.0)*r10*x2756*x2757))+(((-1.0)*x2757*x2758*x2759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2765.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2764.value)))+(x2765.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2766=IKsin(j2);
IkReal x2767=IKcos(j2);
IkReal x2768=((1.0)*cj3);
IkReal x2769=(cj5*r00);
IkReal x2770=(r00*sj5);
IkReal x2771=(cj4*cj5);
IkReal x2772=(cj5*r01);
IkReal x2773=(cj0*sj1);
IkReal x2774=(cj5*r21);
IkReal x2775=(cj5*sj4);
IkReal x2776=((1.0)*cj4);
IkReal x2777=(r10*sj5);
IkReal x2778=(cj5*r11);
IkReal x2779=(r20*sj5);
IkReal x2780=((0.33655)*sj0);
IkReal x2781=(cj1*x2767);
IkReal x2782=(cj3*cj4*sj5);
IkReal x2783=(sj1*x2766);
IkReal x2784=((1.0)*sj4*sj5);
IkReal x2785=(cj1*x2766);
IkReal x2786=(sj1*x2767);
evalcond[0]=(x2781+(((-1.0)*r21*x2784))+((r20*x2775))+(((-1.0)*x2783))+(((-1.0)*r22*x2776)));
evalcond[1]=(((sj4*x2769))+(((-1.0)*r02*x2776))+((x2767*x2773))+((cj0*x2785))+(((-1.0)*r01*x2784)));
evalcond[2]=((((-1.0)*r12*x2776))+((r10*x2775))+((sj0*x2785))+((sj0*x2786))+(((-1.0)*r11*x2784)));
evalcond[3]=((((0.14105)*x2779))+(((0.14105)*x2774))+(((0.33655)*x2783))+(((-1.0)*pz))+(((-0.4445)*cj1))+(((-0.33655)*x2781)));
evalcond[4]=((((0.14105)*x2770))+(((0.14105)*x2772))+(((-0.33655)*cj0*x2785))+(((-1.0)*px))+(((0.1016)*sj0))+(((-0.4445)*x2773))+(((-0.33655)*x2767*x2773)));
evalcond[5]=((((0.14105)*x2778))+(((0.14105)*x2777))+(((-1.0)*x2780*x2786))+(((-1.0)*x2780*x2785))+(((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1)));
evalcond[6]=(((r21*x2782))+(((-1.0)*r22*sj4*x2768))+(((-1.0)*r20*x2768*x2771))+(((-1.0)*x2786))+(((-1.0)*x2785))+((sj3*x2779))+((sj3*x2774)));
evalcond[7]=((((-1.0)*x2766*x2773))+(((-1.0)*cj4*x2768*x2769))+((r01*x2782))+(((-1.0)*r02*sj4*x2768))+((cj0*x2781))+((sj3*x2770))+((sj3*x2772)));
evalcond[8]=((((-1.0)*sj0*x2783))+(((-1.0)*r12*sj4*x2768))+(((-1.0)*r10*x2768*x2771))+((sj0*x2781))+((r11*x2782))+((sj3*x2778))+((sj3*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2787=((1.0)*cj0);
IkReal x2788=(cj4*r02);
IkReal x2789=(cj1*sj4);
IkReal x2790=(cj4*r22);
IkReal x2791=(cj5*r20);
IkReal x2792=(sj1*sj4);
IkReal x2793=(sj5*x2792);
IkReal x2794=((1.0)*cj5*r00);
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal((((r01*sj5*x2789))+(((-1.0)*x2789*x2794))+(((-1.0)*sj1*x2787*x2790))+(((-1.0)*r21*x2787*x2793))+((cj1*x2788))+((cj0*x2791*x2792)))),IkReal((((cj0*cj1*x2790))+((cj0*r21*sj5*x2789))+((sj1*x2788))+((r01*x2793))+(((-1.0)*x2787*x2789*x2791))+(((-1.0)*x2792*x2794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2795.value)))+(x2796.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2797=IKsin(j2);
IkReal x2798=IKcos(j2);
IkReal x2799=((1.0)*cj3);
IkReal x2800=(cj5*r00);
IkReal x2801=(r00*sj5);
IkReal x2802=(cj4*cj5);
IkReal x2803=(cj5*r01);
IkReal x2804=(cj0*sj1);
IkReal x2805=(cj5*r21);
IkReal x2806=(cj5*sj4);
IkReal x2807=((1.0)*cj4);
IkReal x2808=(r10*sj5);
IkReal x2809=(cj5*r11);
IkReal x2810=(r20*sj5);
IkReal x2811=((0.33655)*sj0);
IkReal x2812=(cj1*x2798);
IkReal x2813=(cj3*cj4*sj5);
IkReal x2814=(sj1*x2797);
IkReal x2815=((1.0)*sj4*sj5);
IkReal x2816=(cj1*x2797);
IkReal x2817=(sj1*x2798);
evalcond[0]=((((-1.0)*x2814))+((r20*x2806))+(((-1.0)*r22*x2807))+(((-1.0)*r21*x2815))+x2812);
evalcond[1]=(((sj4*x2800))+((x2798*x2804))+(((-1.0)*r01*x2815))+(((-1.0)*r02*x2807))+((cj0*x2816)));
evalcond[2]=((((-1.0)*r11*x2815))+((r10*x2806))+(((-1.0)*r12*x2807))+((sj0*x2816))+((sj0*x2817)));
evalcond[3]=((((-1.0)*pz))+(((-0.4445)*cj1))+(((0.33655)*x2814))+(((0.14105)*x2805))+(((-0.33655)*x2812))+(((0.14105)*x2810)));
evalcond[4]=((((-0.4445)*x2804))+(((-1.0)*px))+(((0.14105)*x2801))+(((0.14105)*x2803))+(((-0.33655)*x2798*x2804))+(((0.1016)*sj0))+(((-0.33655)*cj0*x2816)));
evalcond[5]=((((-0.1016)*cj0))+(((-1.0)*py))+(((-0.4445)*sj0*sj1))+(((0.14105)*x2809))+(((0.14105)*x2808))+(((-1.0)*x2811*x2817))+(((-1.0)*x2811*x2816)));
evalcond[6]=((((-1.0)*x2817))+(((-1.0)*x2816))+(((-1.0)*r22*sj4*x2799))+((r21*x2813))+((sj3*x2805))+(((-1.0)*r20*x2799*x2802))+((sj3*x2810)));
evalcond[7]=(((r01*x2813))+(((-1.0)*cj4*x2799*x2800))+(((-1.0)*r02*sj4*x2799))+(((-1.0)*x2797*x2804))+((sj3*x2801))+((sj3*x2803))+((cj0*x2812)));
evalcond[8]=(((sj3*x2809))+((sj3*x2808))+((sj0*x2812))+((r11*x2813))+(((-1.0)*r12*sj4*x2799))+(((-1.0)*r10*x2799*x2802))+(((-1.0)*sj0*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - redhawk (aba2f801a91d97d0e8c19f274a5566c9)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
