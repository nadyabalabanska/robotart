#!/usr/bin/python 

import socket
import struct
import thread
import time

import rospy
from redhawk_ctl.msg import redhawk_telem
from sensor_msgs.msg import JointState
from std_msgs.msg import Header


CRC16IBMTable = [0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
   0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
   0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
   0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
   0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
   0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
   0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
   0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
   0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
   0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
   0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
   0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
   0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
   0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
   0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
   0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
   0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
   0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
   0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
   0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
   0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
   0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
   0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
   0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
   0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
   0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
   0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
   0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
   0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
   0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
   0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
   0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040]
   
schunkErr = { 0x76 : 'Cable Break Error', 
0xDD : 'Commutation Err', 
0xD2 : 'Config Mem Err',
0xDE : 'Overcurrent',
0xD9 : 'Fast Stop',
0xDC : 'Fragmentation Err',
0xDF : 'I2T Err',
0xE0 : 'Could Not Initialize',
0xE1 : 'Internal Err',
0xD4 : 'Bad Phrase',
0x73 : 'Logic Overvolt',
0x72 : 'Logic Undervolt',
0xEC : 'Math Error',
0x75 : 'Motor Overvolt',
0x74 : 'Motor Undervolt (EStop)',
0x82 : 'Overshoot error',
0xD3 : 'Program Memory Error',
0xEB : 'Resolver Check Fail',
0xD8 : 'Contact Service',
0xD6 : 'Soft High Limit Reached',
0xD5 : 'Soft Low Limit Reached',
0x71 : 'Overtemp',
0x70 : 'Undertemp',
0xE4 : 'Too Fast Error',
0xDA : 'Tow Error',
0xDB : 'Profibus Error',
0xC8 : 'Wrong Ramp Type',
0x01 : '(INFO) Booted Successfully',
0x19 : 'Invalid Checksum',
0x09 : 'Communication Error',
0x05 : 'Command Failed',
0x1D : 'Invalid Message Length',
0x08 : 'No Error',
0x03 : 'Invalid Rights',
0x07 : '(INFO) Sine Vector Search',
0x10 : '(INFO) Comm. Timeout',
0x11 : '(INFO) Unknown Axis',
0x04 : '(INFO) Unknown Command',
0x16 : '(INFO) Incorrect Baudrate',
0x1E : '(INFO) Param Out of Range',
0x06 : 'Not Referenced!',
0x83 : 'Unknown Hardware Version' }
   
        
def runReceiver(pub):
    global throttle
    rcvSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    rcvSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    rcvSock.bind(("", 42121))

    while True:
       data, addr = rcvSock.recvfrom(1024)
       telemetryFormat = '!f 2I 27f I f 9I H'
       telemetry = struct.unpack(telemetryFormat, data)
       
       msg = redhawk_telem()
       msg.header = Header()
       msg.header.stamp = rospy.Time.now()
       msg.joint_1 = telemetry[15]
       msg.joint_2 = telemetry[16]
       msg.joint_3 = telemetry[17]
       msg.joint_4 = telemetry[18]
       msg.joint_5 = telemetry[19]
       msg.joint_6 = telemetry[20]
       
       theCrc = crc(data[0:-2])
       if theCrc == telemetry[41]:
           # CRC correct
           pub.publish(msg)
       else:
           # CRC wrong!
           print("CRC wrong!")
           
                  
def getJointStatus(errValue):
    errName = '0x%02X' % errValue
    try:
        if(schunkErr[errValue]):
            errName = schunkErr[errValue] + ' (' + errName +')'
    except:
        pass
    return errName
           

def crc(data):
    uCRCValue = 0
    for char in data:
        c = ord(char)
        uCRCValue = CRC16IBMTable[(uCRCValue ^ c) & 0xFF] ^ (uCRCValue >> 8);
    return uCRCValue;


if __name__ == "__main__":
    rospy.init_node('redhawk_telem')
    pub = rospy.Publisher('redhawk_telem', redhawk_telem, queue_size = 1000)
    
    runReceiver(pub)

